<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<plcProject caseSensitive="true" useCustomWorkspace="true" debugMode="false" extcheck="true" SFCControl="false" strictPointerCheck="false" copyWarningThreshold="200" version="2.2" useLD2="true" useFBMethods="false">
	<image>RESTSvcSQL.imgx</image>
	<commSettings>ModbusTCP:255,1000,M#TCPIP:192.168.0.181/502,5000</commSettings>
	<sources>
		<main>
			<resources/>
			<tasks>
				<task name="Back">
					<program>RESTSvcMng</program>
					<program>EastronMng</program>
				</task>
			</tasks>
			<globalVars>
				<group name="Inputs">
					<var name="Di00CPU" type="BOOL">
						<descr>Di00 CPU module</descr>
						<address type="I" typeVar="X" index="255" subIndex="0"/>
					</var>
					<var name="Di01CPU" type="BOOL">
						<descr>Di01 CPU module</descr>
						<address type="I" typeVar="X" index="255" subIndex="1"/>
					</var>
					<var name="Di02CPU" type="BOOL">
						<descr>Di02 CPU module</descr>
						<address type="I" typeVar="X" index="255" subIndex="2"/>
					</var>
					<var name="Di03CPU" type="BOOL">
						<descr>Di03 CPU module</descr>
						<address type="I" typeVar="X" index="255" subIndex="3"/>
					</var>
					<var name="Di04CPU" type="BOOL">
						<descr>Di04 CPU module</descr>
						<address type="I" typeVar="X" index="255" subIndex="4"/>
					</var>
					<var name="Di05CPU" type="BOOL">
						<descr>Di05 CPU module</descr>
						<address type="I" typeVar="X" index="255" subIndex="5"/>
					</var>
				</group>
				<group name="Outputs">
					<var name="Do00CPU" type="BOOL">
						<descr>Do00 CPU module</descr>
						<address type="Q" typeVar="X" index="255" subIndex="0"/>
					</var>
					<var name="Do01CPU" type="BOOL">
						<descr>Do01 CPU module</descr>
						<address type="Q" typeVar="X" index="255" subIndex="1"/>
					</var>
					<var name="Do02CPU" type="BOOL">
						<descr>Do02 CPU module</descr>
						<address type="Q" typeVar="X" index="255" subIndex="2"/>
					</var>
					<var name="Do03CPU" type="BOOL">
						<descr>Do03 CPU module</descr>
						<address type="Q" typeVar="X" index="255" subIndex="3"/>
					</var>
				</group>
				<group name="Global">
					<var name="AcPower" type="REAL">
						<descr>Active power (Watts)</descr>
					</var>
					<var name="Frequency" type="REAL">
						<descr>Line frequency (Hertz)</descr>
					</var>
					<var name="PwFactor" type="REAL">
						<descr>Power factor</descr>
					</var>
					<var name="Voltage" type="REAL">
						<descr>Line voltage (Volts)</descr>
					</var>
				</group>
			</globalVars>
			<retainVars>
				<group name="Inputs"/>
				<group name="Outputs"/>
				<group name="Global"/>
			</retainVars>
			<constantVars>
				<group name="Inputs"/>
				<group name="Outputs"/>
				<group name="Global"/>
			</constantVars>
			<functions/>
			<functionBlocks/>
			<programs>
				<program name="EastronMng" version="1.0.0">
					<vars>
						<localVars>
							<var name="Meter" type="EastronSDM120_v1">
								<descr>SDM120 meter</descr>
							</var>
							<var name="Sport" type="SysSerialPort">
								<descr>Serial port</descr>
							</var>
							<var name="MManager" type="ModbusMsCore">
								<descr>Master modbus core</descr>
							</var>
						</localVars>
					</vars>
					<iecDeclaration valid="TRUE">
						<![CDATA[]]>
					</iecDeclaration>
					<sourceCode type="FBD">
						<FBD>
							<network order="N:1" width="200" height="28" error="false">
								<conn id="C:0" error="false">
									<segment xStart="38" yStart="5" xEnd="43" yEnd="5"/>
									<startPin>FB:MManager.Enabled</startPin>
									<endPin>FB:Meter.Enable</endPin>
								</conn>
								<conn id="C:1" error="false">
									<segment xStart="38" yStart="7" xEnd="39" yEnd="7"/>
									<segment xEnd="39" yEnd="6"/>
									<segment xEnd="43" yEnd="6"/>
									<startPin>FB:MManager.MMID</startPin>
									<endPin>FB:Meter.MMID</endPin>
								</conn>
								<conn id="C:2" error="false">
									<segment xStart="31" yStart="9" xEnd="31" yEnd="9"/>
									<startPin>K:7</startPin>
									<endPin>FB:MManager.Delay</endPin>
								</conn>
								<conn id="C:3" error="false">
									<segment xStart="31" yStart="8" xEnd="31" yEnd="8"/>
									<startPin>K:8</startPin>
									<endPin>FB:MManager.IFTime</endPin>
								</conn>
								<conn id="C:4" error="false">
									<segment xStart="26" yStart="5" xEnd="31" yEnd="5"/>
									<startPin>FB:Sport.Opened</startPin>
									<endPin>FB:MManager.Enable</endPin>
								</conn>
								<conn id="C:5" error="false">
									<segment xStart="26" yStart="7" xEnd="31" yEnd="7"/>
									<startPin>FB:Sport.File</startPin>
									<endPin>FB:MManager.File</endPin>
								</conn>
								<conn id="C:6" error="false">
									<segment xStart="11" yStart="6" xEnd="14" yEnd="6"/>
									<startPin>O:24.1</startPin>
									<endPin>FB:Sport.COM</endPin>
								</conn>
								<conn id="C:7" error="false">
									<segment xStart="14" yStart="5" xEnd="14" yEnd="5"/>
									<startPin>K:9</startPin>
									<endPin>FB:Sport.Open</endPin>
								</conn>
								<conn id="C:8" error="false">
									<segment xStart="5" yStart="6" xEnd="5" yEnd="6"/>
									<startPin>K:10</startPin>
									<endPin>O:24.0</endPin>
								</conn>
								<conn id="C:9" error="false">
									<segment xStart="14" yStart="7" xEnd="14" yEnd="7"/>
									<startPin>K:11</startPin>
									<endPin>FB:Sport.Baudrate</endPin>
								</conn>
								<conn id="C:10" error="false">
									<segment xStart="14" yStart="8" xEnd="14" yEnd="8"/>
									<startPin>K:12</startPin>
									<endPin>FB:Sport.Parity</endPin>
								</conn>
								<conn id="C:11" error="false">
									<segment xStart="14" yStart="9" xEnd="14" yEnd="9"/>
									<startPin>K:13</startPin>
									<endPin>FB:Sport.DataBits</endPin>
								</conn>
								<conn id="C:12" error="false">
									<segment xStart="14" yStart="10" xEnd="14" yEnd="10"/>
									<startPin>K:14</startPin>
									<endPin>FB:Sport.StopBits</endPin>
								</conn>
								<conn id="C:13" error="false">
									<segment xStart="14" yStart="11" xEnd="14" yEnd="11"/>
									<startPin>V:1</startPin>
									<endPin>FB:Sport.DTRManagement</endPin>
								</conn>
								<conn id="C:14" error="false">
									<segment xStart="14" yStart="12" xEnd="14" yEnd="12"/>
									<startPin>K:15</startPin>
									<endPin>FB:Sport.DTRComplement</endPin>
								</conn>
								<conn id="C:15" error="false">
									<segment xStart="14" yStart="13" xEnd="14" yEnd="13"/>
									<startPin>K:16</startPin>
									<endPin>FB:Sport.EchoFlush</endPin>
								</conn>
								<conn id="C:16" error="false">
									<segment xStart="14" yStart="14" xEnd="14" yEnd="14"/>
									<startPin>K:17</startPin>
									<endPin>FB:Sport.DTROnTime</endPin>
								</conn>
								<conn id="C:17" error="false">
									<segment xStart="14" yStart="15" xEnd="14" yEnd="15"/>
									<startPin>K:18</startPin>
									<endPin>FB:Sport.DTROffTime</endPin>
								</conn>
								<conn id="C:18" error="false">
									<segment xStart="14" yStart="16" xEnd="14" yEnd="16"/>
									<startPin>K:19</startPin>
									<endPin>FB:Sport.FlushTm</endPin>
								</conn>
								<conn id="C:19" error="false">
									<segment xStart="14" yStart="17" xEnd="14" yEnd="17"/>
									<startPin>K:20</startPin>
									<endPin>FB:Sport.RxSize</endPin>
								</conn>
								<conn id="C:20" error="false">
									<segment xStart="14" yStart="18" xEnd="14" yEnd="18"/>
									<startPin>K:21</startPin>
									<endPin>FB:Sport.TxSize</endPin>
								</conn>
								<conn id="C:21" error="false">
									<segment xStart="31" yStart="6" xEnd="31" yEnd="6"/>
									<startPin>K:22</startPin>
									<endPin>FB:MManager.SpyOn</endPin>
								</conn>
								<conn id="C:22" error="false">
									<segment xStart="43" yStart="7" xEnd="43" yEnd="7"/>
									<startPin>K:6</startPin>
									<endPin>FB:Meter.Node</endPin>
								</conn>
								<conn id="C:23" error="false">
									<segment xStart="50" yStart="8" xEnd="50" yEnd="8"/>
									<startPin>FB:Meter.Voltage</startPin>
									<endPin>V:3</endPin>
								</conn>
								<conn id="C:24" error="false">
									<segment xStart="50" yStart="10" xEnd="50" yEnd="10"/>
									<startPin>FB:Meter.Frequency</startPin>
									<endPin>V:2</endPin>
								</conn>
								<conn id="C:25" error="false">
									<segment xStart="50" yStart="11" xEnd="50" yEnd="11"/>
									<startPin>FB:Meter.AcPower</startPin>
									<endPin>V:4</endPin>
								</conn>
								<conn id="C:26" error="false">
									<segment xStart="50" yStart="14" xEnd="50" yEnd="14"/>
									<startPin>FB:Meter.PwFactor</startPin>
									<endPin>V:5</endPin>
								</conn>
								<conn id="C:28" error="false">
									<segment xStart="43" yStart="8" xEnd="43" yEnd="8"/>
									<startPin>K:23</startPin>
									<endPin>FB:Meter.Timeout</endPin>
								</conn>
								<const id="K:6" error="false" name="1" x="43" y="7">
									<pin>C:22</pin>
								</const>
								<const id="K:7" error="false" name="10" x="31" y="9">
									<pin>C:2</pin>
								</const>
								<const id="K:8" error="false" name="14000" x="31" y="8">
									<pin>C:3</pin>
								</const>
								<const id="K:9" error="false" name="TRUE" x="14" y="5">
									<pin>C:7</pin>
								</const>
								<const id="K:10" error="false" name="'COM2'" x="5" y="6">
									<pin>C:8</pin>
								</const>
								<const id="K:11" error="false" name="2400" x="14" y="7">
									<pin>C:9</pin>
								</const>
								<const id="K:12" error="false" name="'N'" x="14" y="8">
									<pin>C:10</pin>
								</const>
								<const id="K:13" error="false" name="8" x="14" y="9">
									<pin>C:11</pin>
								</const>
								<const id="K:14" error="false" name="1" x="14" y="10">
									<pin>C:12</pin>
								</const>
								<const id="K:15" error="false" name="FALSE" x="14" y="12">
									<pin>C:14</pin>
								</const>
								<const id="K:16" error="false" name="FALSE" x="14" y="13">
									<pin>C:15</pin>
								</const>
								<const id="K:17" error="false" name="0" x="14" y="14">
									<pin>C:16</pin>
								</const>
								<const id="K:18" error="false" name="0" x="14" y="15">
									<pin>C:17</pin>
								</const>
								<const id="K:19" error="false" name="0" x="14" y="16">
									<pin>C:18</pin>
								</const>
								<const id="K:20" error="false" name="0" x="14" y="17">
									<pin>C:19</pin>
								</const>
								<const id="K:21" error="false" name="0" x="14" y="18">
									<pin>C:20</pin>
								</const>
								<const id="K:22" error="false" name="FALSE" x="31" y="6">
									<pin>C:21</pin>
								</const>
								<const id="K:23" error="false" name="200" x="43" y="8">
									<pin>C:28</pin>
								</const>
								<var id="V:1" error="false" type="Input" name="DTR_AUTO_WO_TIMES" x="14" y="11">
									<pin>C:13</pin>
								</var>
								<var id="V:2" error="false" type="Output" name="Frequency" x="50" y="10">
									<pin>C:24</pin>
								</var>
								<var id="V:3" error="false" type="Output" name="Voltage" x="50" y="8">
									<pin>C:23</pin>
								</var>
								<var id="V:4" error="false" type="Output" name="AcPower" x="50" y="11">
									<pin>C:25</pin>
								</var>
								<var id="V:5" error="false" type="Output" name="PwFactor" x="50" y="14">
									<pin>C:26</pin>
								</var>
								<op id="O:24" error="false" width="6" name="ADR" x="5" y="6">
									<inputPin name="0" negated="false">C:8</inputPin>
									<outputPin name="1" negated="false">C:6</outputPin>
								</op>
								<funBlock id="FB:Sport" error="false" width="12" name="SysSerialPort" x="14" y="5">
									<inputPin name="Open" negated="false">C:7</inputPin>
									<inputPin name="COM" negated="false">C:6</inputPin>
									<inputPin name="Baudrate" negated="false">C:9</inputPin>
									<inputPin name="Parity" negated="false">C:10</inputPin>
									<inputPin name="DataBits" negated="false">C:11</inputPin>
									<inputPin name="StopBits" negated="false">C:12</inputPin>
									<inputPin name="DTRManagement" negated="false">C:13</inputPin>
									<inputPin name="DTRComplement" negated="false">C:14</inputPin>
									<inputPin name="EchoFlush" negated="false">C:15</inputPin>
									<inputPin name="DTROnTime" negated="false">C:16</inputPin>
									<inputPin name="DTROffTime" negated="false">C:17</inputPin>
									<inputPin name="FlushTm" negated="false">C:18</inputPin>
									<inputPin name="RxSize" negated="false">C:19</inputPin>
									<inputPin name="TxSize" negated="false">C:20</inputPin>
									<outputPin name="Opened" negated="false">C:4</outputPin>
									<outputPin name="Fault" negated="false"/>
									<outputPin name="File" negated="false">C:5</outputPin>
								</funBlock>
								<funBlock id="FB:MManager" error="false" width="7" name="ModbusMsCore" x="31" y="5">
									<inputPin name="Enable" negated="false">C:4</inputPin>
									<inputPin name="SpyOn" negated="false">C:21</inputPin>
									<inputPin name="File" negated="false">C:5</inputPin>
									<inputPin name="IFTime" negated="false">C:3</inputPin>
									<inputPin name="Delay" negated="false">C:2</inputPin>
									<outputPin name="Enabled" negated="false">C:0</outputPin>
									<outputPin name="Fault" negated="false"/>
									<outputPin name="MMID" negated="false">C:1</outputPin>
								</funBlock>
								<funBlock id="FB:Meter" error="false" width="7" name="EastronSDM120_v1" x="43" y="5">
									<inputPin name="Enable" negated="false">C:0</inputPin>
									<inputPin name="MMID" negated="false">C:1</inputPin>
									<inputPin name="Node" negated="false">C:22</inputPin>
									<inputPin name="Timeout" negated="false">C:28</inputPin>
									<outputPin name="Done" negated="false"/>
									<outputPin name="Fault" negated="false"/>
									<outputPin name="Errors" negated="false"/>
									<outputPin name="Voltage" negated="false">C:23</outputPin>
									<outputPin name="Current" negated="false"/>
									<outputPin name="Frequency" negated="false">C:24</outputPin>
									<outputPin name="AcPower" negated="false">C:25</outputPin>
									<outputPin name="ApPower" negated="false"/>
									<outputPin name="RePower" negated="false"/>
									<outputPin name="PwFactor" negated="false">C:26</outputPin>
									<outputPin name="IAcEnergy" negated="false"/>
									<outputPin name="EAcEnergy" negated="false"/>
									<outputPin name="TAcEnergy" negated="false"/>
								</funBlock>
							</network>
							<network order="N:2" width="200" height="12" error="false"/>
						</FBD>
					</sourceCode>
				</program>
				<program name="RESTSvcMng" version="1.0.0">
					<vars>
						<localVars>
							<var name="REST" type="RESTWSvcClient">
								<descr>REST service FB</descr>
							</var>
							<var name="i" type="INT">
								<descr>Auxiliary counter</descr>
							</var>
							<var name="RESTSBf" type="STRING" length="256">
								<descr>REST Send buffer</descr>
							</var>
							<var name="FileOk" type="USINT">
								<descr>INI file on cloud is Ok</descr>
							</var>
							<var name="UTCDateTime" type="UDINT">
								<descr>UTC Date/Time</descr>
							</var>
							<var name="DSCmd" type="BOOL">
								<descr>Debug send command</descr>
							</var>
							<var name="RESTSend" type="RESTSendFct">
								<descr>REST send function</descr>
							</var>
							<var name="RESTSvBck" type="RESTSERVICEBACKUP">
								<descr>REST service backup data</descr>
							</var>
						</localVars>
					</vars>
					<iecDeclaration valid="TRUE">
						<![CDATA[]]>
					</iecDeclaration>
					<sourceCode type="ST">
						<![CDATA[(* ************************************************************************** *)
(* PROGRAM "VPSFXRESTMng"                                                     *)
(* ************************************************************************** *)
(* Eseguo gestione servizio REST sul web.                                     *)
(* -------------------------------------------------------------------------- *)
	
	(* ---------------------------------------------------------------------- *)
	(* ESEGUO INIZIALIZZAZIONI                                                *)
	(* ---------------------------------------------------------------------- *)
	(* Eseguo inizializzazione variabili. *)

	IF (SysFirstLoop) THEN
		REST.SpyOn:=TRUE; (* Spy On *)
		REST.RESTSvBck:=ADR(RESTSvBck); (* REST service backup pointer*)
		REST.FIFOFile:='Storage/REST.bin'; (* Path and name of file where to log *)
		REST.FIFOSize:=10000; (* FIFO file size *)

		REST.HostAddress:=ADR('www.slimline.altervista.org'); (* Host address servizio REST *)
		REST.HostName:=REST.HostAddress; (* Host name servizio REST *)
		REST.Page:=ADR('Mdp095a200/Ptp145a000/RESTSvc.php'); (* Pagina servizio REST *)
		REST.HostPort:=80; (* Porta servizio REST *)

		REST.HBitTime:=5; (* Heartbeat time (S) *)
		REST.BLength:=512; (* REST Request/Answer buffers length *)
	END_IF;

	(* ---------------------------------------------------------------------- *)
	(* GESTIONE SERVIZIO REST                                                 *)
	(* ---------------------------------------------------------------------- *)
	(* Eseguo gestione servizio REST. *)
	
	REST(Enable:=TRUE); (* Eseguo gestione servizio REST *)
	RESTSend(RSvID:=REST.RSvID, Add:=NULL);
	REST.SvcAck:=FALSE; (* REST service acknowledge *)

	(* ---------------------------------------------------------------------- *)
	(* INVIO VALORI AL SERVER CLOUD                                           *)
	(* ---------------------------------------------------------------------- *)
	(* Eseguo temporizzazione invio ogni minuto. *)
	
	IF (SysGetUTCDateTime(TRUE) <> UTCDateTime) THEN
		UTCDateTime:=SysGetUTCDateTime(TRUE); (* UTC Date/Time *)
		IF ((MOD(UTCDateTime, 60) = 0) OR (DSCmd)) THEN
			DSCmd:=FALSE; (* Debug send command *)

			(* Eseguo compilazione dati da inviare al server in JSON. *)

			i:=SysVarsnprintf(ADR(RESTSBf), SIZEOF(RESTSBf), '{"Frequency":"%.1f", ', REAL_TYPE, ADR(Frequency));
			i:=SysLWVarsnprintf(ADR(RESTSBf), SIZEOF(RESTSBf), '"Voltage":"%.1f", ', REAL_TYPE, ADR(Voltage));
			i:=SysLWVarsnprintf(ADR(RESTSBf), SIZEOF(RESTSBf), '"AcPower":"%.1f", ', REAL_TYPE, ADR(AcPower));
			i:=SysLWVarsnprintf(ADR(RESTSBf), SIZEOF(RESTSBf), '"PwFactor":"%.1f"}', REAL_TYPE, ADR(PwFactor));
			RESTSend(Add:=ADR(RESTSBf));
		END_IF;
	END_IF;

	(* ---------------------------------------------------------------------- *)
	(* RICEZIONE OK DA SERVER CLOUD                                           *)
	(* ---------------------------------------------------------------------- *)
	(* Su ricezione Ok da servizio REST controllo l'Ok ricevuto. *)

	IF NOT(REST.SvcOk) THEN RETURN; END_IF;
	REST.SvcAck:=TRUE; (* REST service acknowledge *)
	REST.RPAck:=0; (* REST parameters acknowledge *)

(* [End of file] *)

]]>
					</sourceCode>
				</program>
			</programs>
			<macros/>
			<structs/>
			<typedefs/>
			<enums/>
			<subranges/>
			<interfaces/>
		</main>
		<target id="Mps054_XTarget_12_0" name="RESTSvcSQL.tgt" fullXml="false">
			<![CDATA[(* ************************************************************************** *)
(* Project      : SFW168J000                                                  *)
(* Programmer   : Massimo Piovera                                             *)
(* Date         : 02/10/2015                                                  *)
(* ************************************************************************** *)
(* Alias "ELSIST XTarget 12.0"                                                *)
(* -------------------------------------------------------------------------- *)

(* ************************************************************************** *)
(* VARIABLES                                                                  *)
(* ************************************************************************** *)

VAR_GLOBAL

    {G:"System variables"}
    SysVR               AT %MB0.0 : ARRAY[0..767] OF BYTE;      {DE:"System read only variables"}
    SysClock100         AT %MB0.0 : BOOL;                       {DE:"System clock 100 mS"}
    SysClock1000        AT %MB0.1 : BOOL;                       {DE:"System clock 1000 mS"}
    SysBackupEnd        AT %MB0.2 : BOOL;                       {DE:"System backup end"}
    SysRestoreFault     AT %MB0.3 : BOOL;                       {DE:"System restore fault"}
    SysPLCInRun         AT %MB0.4 : BOOL;                       {DE:"System PLC is running"}
    SysFirstLoop        AT %MB0.5 : BOOL;                       {DE:"System first execution loop"}
    SysLLabCn           AT %MB0.6 : BOOL;                       {DE:"LogicLab connected to the system"}
    SysIsDST            AT %MB0.7 : BOOL;                       {DE:"Is daylight saving time"}
    SysDTSet            AT %MB0.8 : BOOL;                       {DE:"Date/Time set"}
    SysUVSet            AT %MB0.9 : BOOL;                       {DE:"User variables set"}
    SysAlwaysOff        AT %MB0.10 : BOOL;                      {DE:"Always off"}
    SysAlwaysOn         AT %MB0.11 : BOOL;                      {DE:"Always on"}
    SysFFBUspt          AT %MB0.12 : BOOL;                      {DE:"Function or FB unsupported"}
    SysFFBPrt           AT %MB0.13 : BOOL;                      {DE:"Function or FB protected"}
    SysCfgChanged       AT %MB0.14 : BOOL;                      {DE:"System configuration changed"}

    SysActTaskID        AT %MB0.64 : USINT;                     {DE:"System active task ID"}
    SysErActTaskID      AT %MB0.65 : USINT;                     {DE:"System task ID in error"}

    SysModulesReady     AT %MB0.128 : WORD;                     {DE:"Modules connected to Sline bus (bit index)"}
    SysApllVMajor       AT %MB0.130 : UINT;                     {DE:"Application major version number"}
    SysApllVMinor       AT %MB0.132 : UINT;                     {DE:"Application minor version number"}

    SysTBackLpTm        AT %MB0.256 : UDINT;                    {DE:"System Back task loop time (uS)"}
    SysTBackLpTmMin     AT %MB0.260 : UDINT;                    {DE:"System Back task loop time min (uS)"}
    SysTBackLpTmMax     AT %MB0.264 : UDINT;                    {DE:"System Back task loop time max (uS)"}

    SysTBootExTm        AT %MB0.268 : UDINT;                    {DE:"System Boot task execution time (uS)"}
    SysTBootExTmMin     AT %MB0.272 : UDINT;                    {DE:"System Boot task execution time min (uS)"}
    SysTBootExTmMax     AT %MB0.276 : UDINT;                    {DE:"System Boot task execution time max (uS)"}

    SysTFastExTm        AT %MB0.280 : UDINT;                    {DE:"System Fast task execution time (uS)"}
    SysTFastExTmMin     AT %MB0.284 : UDINT;                    {DE:"System Fast task execution time min (uS)"}
    SysTFastExTmMax     AT %MB0.288 : UDINT;                    {DE:"System Fast task execution time max (uS)"}

    SysTSlowExTm        AT %MB0.292 : UDINT;                    {DE:"System Slow task execution time (uS)"}
    SysTSlowExTmMin     AT %MB0.296 : UDINT;                    {DE:"System Slow task execution time min (uS)"}
    SysTSlowExTmMax     AT %MB0.300 : UDINT;                    {DE:"System Slow task execution time max (uS)"}

    SysTBackExTm        AT %MB0.304 : UDINT;                    {DE:"System Back task execution time (uS)"}
    SysTBackExTmMin     AT %MB0.308 : UDINT;                    {DE:"System Back task execution time min (uS)"}
    SysTBackExTmMax     AT %MB0.312 : UDINT;                    {DE:"System Back task execution time max (uS)"}

    SysStartTime        AT %MB0.316 : UDINT;                    {DE:"PLC run since Date/Time [Epoch time]"}
    SysTime             AT %MB0.320 : UDINT;                    {DE:"System time [mS]"}
    SysTFastLpTm        AT %MB0.324 : UDINT;                    {DE:"System Fast task loop time (uS)"}
    SysTSlowLpTm        AT %MB0.328 : UDINT;                    {DE:"System Slow task loop time (uS)"}

    SysApplID           AT %MB0.332 : UDINT;                    {DE:"Application ID"}
    SysMfcCode          AT %MB0.336 : UDINT;                    {DE:"Manufacturer code"}
    SysCustomerCode     AT %MB0.340 : UDINT;                    {DE:"Customer code"}
    SysErCode           AT %MB0.344 : UDINT;                    {DE:"System error code"}
    SysErTime           AT %MB0.348 : UDINT;                    {DE:"System error time"}
    SysSerialNr         AT %MB0.352 : UDINT;                    {DE:"Device serial number"}
    SysApllBTime        AT %MB0.356 : UDINT;                    {DE:"Build time (Epoch)"}
    SysUniqueID         AT %MB0.360 : UDINT;                    {DE:"Unique ID"}
    
    SysPLCUpTime        AT %MB0.364 : UDINT;                    {DE:"PLC up time (S)"}

    SysCode             AT %MB0.512 : STRING[10];               {DE:"Device product code"}
    SysFVersion         AT %MB0.523 : STRING[10];               {DE:"Firmware version"}
    SysErInfos          AT %MB0.534 : STRING[32];               {DE:"System error infos"}
    SysApllName         AT %MB0.567 : STRING[10];               {DE:"Application name"}
    SysUSetA            AT %MB0.578 : STRING[16];               {DE:"User setting (A)"}
    SysUSetB            AT %MB0.595 : STRING[16];               {DE:"User setting (B)"}
    SysUSetC            AT %MB0.612 : STRING[16];               {DE:"User setting (C)"}
    SysUSetD            AT %MB0.629 : STRING[16];               {DE:"User setting (D)"}

    {G:"System variables"}

    SysVRW              AT %MB1.0 : ARRAY[0..639] OF BYTE;      {DE:"System read and write variables"}
    SysTimeInit         AT %MB1.0 : BOOL;                       {DE:"System timing calculation init"}

    SysDateTime         AT %MB1.256 : UDINT;                    {DE:"System current local date time [Epoch time]"}
    SysLastError        AT %MB1.260 : UDINT;                    {DE:"Last error value"}
    SysUTCDateTime      AT %MB1.264 : UDINT;                    {DE:"System current UTC date time [Epoch time]"}

    SysUInfoA           AT %MB1.512 : STRING[16];               {DE:"User info (A)"}
    SysUInfoB           AT %MB1.529 : STRING[16];               {DE:"User info (B)"}
    SysUInfoC           AT %MB1.546 : STRING[16];               {DE:"User info (C)"}
    SysUInfoD           AT %MB1.563 : STRING[16];               {DE:"User info (D)"}

    {G:"User data"}
    SysData             AT %MB100.0 : ARRAY[0..4095] OF BYTE;   {IO:"User data and backup"}
    SysDataBk           AT %MB100.2048 : ARRAY[0..2047] OF BYTE;{IO:"User data backup"}

    {G:"Digital inputs"}
    SysDI00             AT %IX0.0 : ARRAY[0..31] OF BOOL;       {IO:"Logic inputs module 00"}
    SysDI01             AT %IX1.0 : ARRAY[0..31] OF BOOL;       {IO:"Logic inputs module 01"}
    SysDI02             AT %IX2.0 : ARRAY[0..31] OF BOOL;       {IO:"Logic inputs module 02"}
    SysDI03             AT %IX3.0 : ARRAY[0..31] OF BOOL;       {IO:"Logic inputs module 03"}
    SysDI04             AT %IX4.0 : ARRAY[0..31] OF BOOL;       {IO:"Logic inputs module 04"}
    SysDI05             AT %IX5.0 : ARRAY[0..31] OF BOOL;       {IO:"Logic inputs module 05"}
    SysDI06             AT %IX6.0 : ARRAY[0..31] OF BOOL;       {IO:"Logic inputs module 06"}
    SysDI07             AT %IX7.0 : ARRAY[0..31] OF BOOL;       {IO:"Logic inputs module 07"}
    SysDI08             AT %IX8.0 : ARRAY[0..31] OF BOOL;       {IO:"Logic inputs module 08"}
    SysDI09             AT %IX9.0 : ARRAY[0..31] OF BOOL;       {IO:"Logic inputs module 09"}
    SysDI10             AT %IX10.0 : ARRAY[0..31] OF BOOL;      {IO:"Logic inputs module 10"}
    SysDI11             AT %IX11.0 : ARRAY[0..31] OF BOOL;      {IO:"Logic inputs module 11"}
    SysDI12             AT %IX12.0 : ARRAY[0..31] OF BOOL;      {IO:"Logic inputs module 12"}
    SysDI13             AT %IX13.0 : ARRAY[0..31] OF BOOL;      {IO:"Logic inputs module 13"}
    SysDI14             AT %IX14.0 : ARRAY[0..31] OF BOOL;      {IO:"Logic inputs module 14"}
    SysDI15             AT %IX15.0 : ARRAY[0..31] OF BOOL;      {IO:"Logic inputs module 15"}

    SysCPUDI            AT %IX255.0 : ARRAY[0..31] OF BOOL;     {IO:"Logic inputs CPU"}

    {G:"Digital outputs"}
    SysDO00             AT %QX0.0 : ARRAY[0..31] OF BOOL;       {IO:"Logic outputs module 00"}
    SysDO01             AT %QX1.0 : ARRAY[0..31] OF BOOL;       {IO:"Logic outputs module 01"}
    SysDO02             AT %QX2.0 : ARRAY[0..31] OF BOOL;       {IO:"Logic outputs module 02"}
    SysDO03             AT %QX3.0 : ARRAY[0..31] OF BOOL;       {IO:"Logic outputs module 03"}
    SysDO04             AT %QX4.0 : ARRAY[0..31] OF BOOL;       {IO:"Logic outputs module 04"}
    SysDO05             AT %QX5.0 : ARRAY[0..31] OF BOOL;       {IO:"Logic outputs module 05"}
    SysDO06             AT %QX6.0 : ARRAY[0..31] OF BOOL;       {IO:"Logic outputs module 06"}
    SysDO07             AT %QX7.0 : ARRAY[0..31] OF BOOL;       {IO:"Logic outputs module 07"}
    SysDO08             AT %QX8.0 : ARRAY[0..31] OF BOOL;       {IO:"Logic outputs module 08"}
    SysDO09             AT %QX9.0 : ARRAY[0..31] OF BOOL;       {IO:"Logic outputs module 09"}
    SysDO10             AT %QX10.0 : ARRAY[0..31] OF BOOL;      {IO:"Logic outputs module 10"}
    SysDO11             AT %QX11.0 : ARRAY[0..31] OF BOOL;      {IO:"Logic outputs module 11"}
    SysDO12             AT %QX12.0 : ARRAY[0..31] OF BOOL;      {IO:"Logic outputs module 12"}
    SysDO13             AT %QX13.0 : ARRAY[0..31] OF BOOL;      {IO:"Logic outputs module 13"}
    SysDO14             AT %QX14.0 : ARRAY[0..31] OF BOOL;      {IO:"Logic outputs module 14"}
    SysDO15             AT %QX15.0 : ARRAY[0..31] OF BOOL;      {IO:"Logic outputs module 15"}

    SysCPUDO            AT %QX255.0 : ARRAY[0..31] OF BOOL;     {IO:"Logic outputs CPU"}
END_VAR

(* ########################################################################## *)
(* SYSTEM DATA TYPES DEFINITIONS AND FUNCTIONS                                *)
(* ########################################################################## *)

(* -------------------------------------------------------------------------- *)
(* Task ID definition                                                         *)
(* -------------------------------------------------------------------------- *)

VAR_GLOBAL CONSTANT
    {G:"Task ID definition"}

    ID_TASK_BOOT : USINT := 0;  {DE:"Boot task ID"}
    ID_TASK_BACK : USINT := 1;  {DE:"Back task ID"}
    ID_TASK_SLOW : USINT := 2;  {DE:"Slow task ID"}
    ID_TASK_FAST : USINT := 3;  {DE:"Fast task ID"}
END_VAR

(* -------------------------------------------------------------------------- *)
(* "SysMAlloc" function                                                       *)
(* -------------------------------------------------------------------------- *)

FUNCTION SysMAlloc : @USINT

    {DE:"Allocate a memory buffer"}

    VAR_INPUT
        Size : UDINT;           {DE:"Memory size"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

(* -------------------------------------------------------------------------- *)
(* "SysRMAlloc" function                                                      *)
(* -------------------------------------------------------------------------- *)

FUNCTION SysRMAlloc : BOOL

    {DE:"Allocate a relocatable memory buffer"}

    VAR_INPUT
        Size    : UDINT;           {DE:"Memory size"}
        DataPtr : @UDINT;          {DE:"Memory buffer address"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

(* -------------------------------------------------------------------------- *)
(* "SysRMFree" function                                                       *)
(* -------------------------------------------------------------------------- *)

FUNCTION SysRMFree : BOOL

    {DE:"Disallocate a relocatable memory buffer"}

    VAR_INPUT
        DataPtr : @UDINT;          {DE:"Memory buffer address"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

(* -------------------------------------------------------------------------- *)
(* "SysGetRandom" function                                                    *)
(* -------------------------------------------------------------------------- *)

FUNCTION SysGetRandom : REAL

    {DE:"Get random number"}

    VAR_INPUT
        Cmd : BOOL;             {DE:"Command"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

(* -------------------------------------------------------------------------- *)
(* "SysGetSysTime" function                                                   *)
(* -------------------------------------------------------------------------- *)

FUNCTION SysGetSysTime : UDINT

    {DE:"Get uSec system time"}

    VAR_INPUT
        Cmd : BOOL;             {DE:"Command"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

(* -------------------------------------------------------------------------- *)
(* "SysSetTaskLpTime" function                                                *)
(* -------------------------------------------------------------------------- *)

FUNCTION SysSetTaskLpTime : BOOL

    {DE:"Set the task loop time"}

    VAR_INPUT
        TaskID : USINT;         {DE:"Task ID"}
        Time   : UDINT;         {DE:"Task time [uSec]"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

(* -------------------------------------------------------------------------- *)
(* "SysSetLastError" function                                                 *)
(* -------------------------------------------------------------------------- *)

FUNCTION SysSetLastError : BOOL

    { HIDDEN:ON }
    {DE:"Set the last error"}

    VAR_INPUT
        Error    : UDINT;       {DE:"Error number"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

(* -------------------------------------------------------------------------- *)
(* "SysGetLastError" function                                                 *)
(* -------------------------------------------------------------------------- *)

FUNCTION SysGetLastError : UDINT

    {DE:"Get the last error"}

    VAR_INPUT
        Cmd : BOOL;             {DE:"Command"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

(* -------------------------------------------------------------------------- *)
(* "SysGetEndianness" function                                                *)
(* -------------------------------------------------------------------------- *)

FUNCTION SysGetEndianness : BOOL

    {DE:"Get the endianness"}

    VAR_INPUT
        Cmd : BOOL;             {DE:"Command"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

(* ########################################################################## *)
(* TERMIO DATA TYPES DEFINITIONS AND FUNCTIONS                                *)
(* ########################################################################## *)

(* -------------------------------------------------------------------------- *)
(* TermIO definition                                                          *)
(* -------------------------------------------------------------------------- *)

VAR_GLOBAL CONSTANT

    {G:"TermIO definition"}

    NULL : FILEP := 0;  {DE:"NULL pointer"}
    EOF : INT := -1;    {DE:"End of file"}
END_VAR

(* -------------------------------------------------------------------------- *)
(* FILEP definition                                                           *)
(* -------------------------------------------------------------------------- *)

TYPE FILEP : UDINT; END_TYPE

(* -------------------------------------------------------------------------- *)
(* "Sysfopen" function                                                        *)
(* -------------------------------------------------------------------------- *)

FUNCTION Sysfopen : FILEP

    {DE:"Open a file"}

    VAR_INPUT
        FName : STRING[20];     {DE:"File name"}
        Mode  : STRING[4];      {DE:"Attribute"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

(* -------------------------------------------------------------------------- *)
(* "Sysfclose" function                                                       *)
(* -------------------------------------------------------------------------- *)

FUNCTION Sysfclose : INT

    {DE:"Close a file"}

    VAR_INPUT
        File : FILEP;           {DE:"File"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

(* -------------------------------------------------------------------------- *)
(* "SysFIsOpen" function                                                      *)
(* -------------------------------------------------------------------------- *)

FUNCTION SysFIsOpen : BOOL

    {DE:"Get the file open status"}

    VAR_INPUT
        File : FILEP;           {DE:"File"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

(* -------------------------------------------------------------------------- *)
(* "Sysfgetc" function                                                        *)
(* -------------------------------------------------------------------------- *)

FUNCTION Sysfgetc : INT

    {DE:"Get character from file"}

    VAR_INPUT
        File : FILEP;           {DE:"File"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

(* -------------------------------------------------------------------------- *)
(* "Sysfputc" function                                                        *)
(* -------------------------------------------------------------------------- *)

FUNCTION Sysfputc : INT

    {DE:"Put character to file"}

    VAR_INPUT
        Ch   : INT;             {DE:"Character"}
        File : FILEP;           {DE:"File"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

(* -------------------------------------------------------------------------- *)
(* "Sysfread" function                                                        *)
(* -------------------------------------------------------------------------- *)

FUNCTION Sysfread : INT

    {DE:"Read data from file"}

    VAR_INPUT
        Buf  : @USINT;          {DE:"Buffer filled with read data"}
        Size : INT;             {DE:"Bytes per data block"}
        Count: INT;             {DE:"Nr of data blocks"}
        File : FILEP;           {DE:"File"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

(* -------------------------------------------------------------------------- *)
(* "Sysfwrite" function                                                       *)
(* -------------------------------------------------------------------------- *)

FUNCTION Sysfwrite : INT

    {DE:"Write data to file"}

    VAR_INPUT
        Buf  : @USINT;          {DE:"Buffer of data to write"}
        Size : INT;             {DE:"Bytes per data block"}
        Count: INT;             {DE:"Nr of data blocks"}
        File : FILEP;           {DE:"File"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

(* -------------------------------------------------------------------------- *)
(* "SysFGetIChars" function                                                   *)
(* -------------------------------------------------------------------------- *)

FUNCTION SysFGetIChars : INT

    {DE:"Get available input chars"}

    VAR_INPUT
        File : FILEP;           {DE:"File"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

(* -------------------------------------------------------------------------- *)
(* "SysGetIChars" function                                                    *)
(* -------------------------------------------------------------------------- *)

FUNCTION SysGetIChars : INT

    {DE:"Get available input chars"}

    VAR_INPUT
        File : FILEP;           {DE:"File"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

(* -------------------------------------------------------------------------- *)
(* "SysFGetOSpace" function                                                   *)
(* -------------------------------------------------------------------------- *)

FUNCTION SysFGetOSpace : INT

    {DE:"Get available output space"}

    VAR_INPUT
        File : FILEP;           {DE:"File"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

(* -------------------------------------------------------------------------- *)
(* "SysGetOSpace" function                                                    *)
(* -------------------------------------------------------------------------- *)

FUNCTION SysGetOSpace : INT

    {DE:"Get available output space"}

    VAR_INPUT
        File : FILEP;           {DE:"File"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

(* -------------------------------------------------------------------------- *)
(* "SysFIBfClear" function                                                    *)
(* -------------------------------------------------------------------------- *)

FUNCTION SysFIBfClear : BOOL

    {DE:"Clear input buffer"}

    VAR_INPUT
        File : FILEP;           {DE:"File"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

(* -------------------------------------------------------------------------- *)
(* "SysFOBfClear" function                                                    *)
(* -------------------------------------------------------------------------- *)

FUNCTION SysFOBfClear : BOOL

    {DE:"Clear output buffer"}

    VAR_INPUT
        File : FILEP;           {DE:"File"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

(* -------------------------------------------------------------------------- *)
(* "SysFOBfFlush" function                                                    *)
(* -------------------------------------------------------------------------- *)

FUNCTION SysFOBfFlush : BOOL

    {DE:"Flush output buffer"}

    VAR_INPUT
        File : FILEP;           {DE:"File"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

(* -------------------------------------------------------------------------- *)
(* "SysFGetIBfSize" function                                                  *)
(* -------------------------------------------------------------------------- *)

FUNCTION SysFGetIBfSize : UDINT

    {DE:"Get input buffer size"}

    VAR_INPUT
        File : FILEP;           {DE:"File"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

(* -------------------------------------------------------------------------- *)
(* "SysGetRxBSize" function                                                   *)
(* -------------------------------------------------------------------------- *)

FUNCTION SysGetRxBSize : UDINT

    {DE:"Get input buffer size"}

    VAR_INPUT
        File : FILEP;           {DE:"File"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

(* -------------------------------------------------------------------------- *)
(* "SysFGetOBfSize" function                                                  *)
(* -------------------------------------------------------------------------- *)

FUNCTION SysFGetOBfSize : UDINT

    {DE:"Get output buffer size"}

    VAR_INPUT
        File : FILEP;           {DE:"File"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

(* -------------------------------------------------------------------------- *)
(* "SysGetTxBSize" function                                                   *)
(* -------------------------------------------------------------------------- *)

FUNCTION SysGetTxBSize : UDINT

    {DE:"Get Tx buffer size"}

    VAR_INPUT
        File : FILEP;           {DE:"File"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

(* ########################################################################## *)
(* FILE SYSTEM DATA TYPES DEFINITIONS AND FUNCTIONS                           *)
(* ########################################################################## *)

(* -------------------------------------------------------------------------- *)
(* File system definition                                                     *)
(* -------------------------------------------------------------------------- *)

VAR_GLOBAL CONSTANT
    {G:"FSeek origin definition"}

    ID_SEEK_SET: USINT := 0;  {DE:"Beginning of file"}
    ID_SEEK_CUR: USINT := 1;  {DE:"Current position of the file pointer"}
    ID_SEEK_END: USINT := 2;  {DE:"End of file"}
END_VAR

(* -------------------------------------------------------------------------- *)
(* "Sysrename" function                                                       *)
(* -------------------------------------------------------------------------- *)

FUNCTION Sysrename : BOOL

    {DE:"Rename a file"}

    VAR_INPUT
        OldName : STRING[32];   {DE:"File to rename"}
        NewName : STRING[32];   {DE:"New name"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

(* -------------------------------------------------------------------------- *)
(* "Sysremove" function                                                       *)
(* -------------------------------------------------------------------------- *)

FUNCTION Sysremove : BOOL

    {DE:"Remove a file"}

    VAR_INPUT
        Name : STRING[32];      {DE:"File to rename"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

(* -------------------------------------------------------------------------- *)
(* "Sysfilelength" function                                                   *)
(* -------------------------------------------------------------------------- *)

FUNCTION Sysfilelength : DINT

    {DE:"Returns the file length"}

    VAR_INPUT
        Name : STRING[32];      {DE:"File name"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

(* -------------------------------------------------------------------------- *)
(* "Sysfseek" function                                                        *)
(* -------------------------------------------------------------------------- *)

FUNCTION Sysfseek : DINT

    {DE:"Set the file pointer"}

    VAR_INPUT
        File : FILEP;           {DE:"File"}
        Offset : DINT;          {DE:"Offset"}
        Origin : INT;           {DE:"Origin"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

(* -------------------------------------------------------------------------- *)
(* "SysDirListing" function block                                             *)
(* -------------------------------------------------------------------------- *)

FUNCTION_BLOCK SysDirListing

    {DE:"Directory listing"}

    VAR
        Ver     : USINT := 0;   {DE:"Function block version"}
        IVP     : UDINT;        {DE:"Internal variables pointer"}
    END_VAR

    VAR_INPUT
        Init    : BOOL;         {DE:"Init command"}
        Next    : BOOL;         {DE:"Next command"}
        PathName: STRING[32];   {DE:"Directory name"}
    END_VAR

    VAR_OUTPUT
        Found   : BOOL;         {DE:"File found"}
        Fault   : BOOL;         {DE:"Fault"}
        IsDir   : BOOL;         {DE:"Is directory"}
        Size    : UDINT;        {DE:"File size"}
        Time    : UDINT;        {DE:"File time (UTC)"}
        FileName: STRING[16];   {DE:"File name"}
    END_VAR

    { CODE:EMBEDDED }

END_FUNCTION_BLOCK

(* ########################################################################## *)
(* SERIAL DATA TYPES DEFINITIONS AND FUNCTIONS                                *)
(* ########################################################################## *)

(* -------------------------------------------------------------------------- *)
(* SYSSERIALMODE definition                                                   *)
(* -------------------------------------------------------------------------- *)

TYPE
    SYSSERIALMODE : STRUCT      {DE:"Serial mode"}
        Baudrate : UDINT;       {DE:"Baudrate"}
        Parity : STRING[1];     {DE:"Parity type"}
        DataBits : USINT;       {DE:"Nr of data bits"}
        StopBits : USINT;       {DE:"Nr of stop bits"}
        DTRManagement : USINT;  {DE:"DTR management type"}
        DTRComplement : BOOL;   {DE:"Complement the DTR signal"}
        EchoFlush : BOOL;       {DE:"Flush the echo"}
        DTROnTime : UINT;       {DE:"DTR On wait time"}
        DTROffTime : UINT;      {DE:"DTR Off wait time"}
    END_STRUCT;
END_TYPE

(* -------------------------------------------------------------------------- *)
(* Serial DTR mode definition                                                 *)
(* -------------------------------------------------------------------------- *)

VAR_GLOBAL CONSTANT

    {G:"Serial mode definition"}

    DTR_OFF : USINT := 0;   {DE:"DTR off"}
    DTR_ON : USINT := 1;    {DE:"DTR on"}
    DTR_AUTO_WO_TIMES : USINT := 2; {DE:"DTR Auto without times"}
    DTR_AUTO_W_TIMES : USINT := 3;  {DE:"DTR Auto with times"}
END_VAR

(* -------------------------------------------------------------------------- *)
(* "SysGetSerialMode" function                                                *)
(* -------------------------------------------------------------------------- *)

FUNCTION SysGetSerialMode : BOOL

    {DE:"Get serial mode"}

    VAR_INPUT
        Mode : @SYSSERIALMODE;  {DE:"SYSSERIALMODE data"}
        File : FILEP;           {DE:"File"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

(* -------------------------------------------------------------------------- *)
(* "SysSetSerialMode" function                                                *)
(* -------------------------------------------------------------------------- *)

FUNCTION SysSetSerialMode : BOOL

    {DE:"Set serial mode"}

    VAR_INPUT
        Mode : @SYSSERIALMODE;  {DE:"SYSSERIALMODE data"}
        File : FILEP;           {DE:"File"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

(* -------------------------------------------------------------------------- *)
(* "SysGetSerialCTS" function                                                 *)
(* -------------------------------------------------------------------------- *)

FUNCTION SysGetSerialCTS : BOOL

    {DE:"Get serial CTS signal status"}

    VAR_INPUT
        File : FILEP;           {DE:"File"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

(* -------------------------------------------------------------------------- *)
(* "SysSetSerialDTR" function                                                 *)
(* -------------------------------------------------------------------------- *)

FUNCTION SysSetSerialDTR : BOOL

    {DE:"Set serial DTR signal status"}

    VAR_INPUT
        Status : BOOL;          {DE:"DTR status"}
        File : FILEP;           {DE:"File"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

(* -------------------------------------------------------------------------- *)
(* "SysSerialPort" function block                                             *)
(* -------------------------------------------------------------------------- *)

FUNCTION_BLOCK SysSerialPort

    {DE:"Serial port manager"}

    VAR
        Ver     : USINT := 0;   {DE:"Function block version"}
        IVP     : UDINT;        {DE:"Internal variables pointer"}
    END_VAR

    VAR_INPUT
        Open    : BOOL;         {DE:"Open serial port"}
        COM     : @USINT;       {DE:"COM port"}
        Baudrate: UDINT;        {DE:"Baudrate"}
        Parity  : STRING[1];    {DE:"Parity type"}
        DataBits: USINT;        {DE:"Number of data bits"}
        StopBits: USINT;        {DE:"Number of stop bits"}
        DTRManagement: USINT;   {DE:"DTR management type"}
        DTRComplement: BOOL;    {DE:"DTR signal complement"}
        EchoFlush   : BOOL;     {DE:"Flush the echo characters"}
        DTROnTime   : UINT;     {DE:"DTR on time"}
        DTROffTime  : UINT;     {DE:"DTR off time"}
        FlushTm : UINT;         {DE:"Flush time [mS]"}
        RxSize  : UINT;         {DE:"Rx buffer data size"}
        TxSize  : UINT;         {DE:"Tx buffer data size"}
    END_VAR

    VAR_OUTPUT
        Opened  : BOOL;         {DE:"Serial port was opened"}
        Fault   : BOOL;         {DE:"Fault status"}
        File    : FILEP;        {DE:"File pointer"}
    END_VAR

    { CODE:EMBEDDED }

END_FUNCTION_BLOCK

(* ########################################################################## *)
(* SCANF AND PRINTF DATA TYPES DEFINITIONS AND FUNCTIONS                      *)
(* ########################################################################## *)

(* -------------------------------------------------------------------------- *)
(* Variable types definition                                                  *)
(* -------------------------------------------------------------------------- *)

VAR_GLOBAL CONSTANT
    {G:"Variable types definition"}

    BOOL_TYPE : USINT := 10;    {DE:"Boolean (1 bits)"}

    BYTE_TYPE : USINT := 20;    {DE:"Byte (8 bits)"}
    SINT_TYPE : USINT := 21;    {DE:"Single integer signed (8 bits)"}
    USINT_TYPE : USINT := 22;   {DE:"Single integer unsigned (8 bits)"}

    WORD_TYPE : USINT := 30;    {DE:"Word (16 bits)"}
    INT_TYPE : USINT := 31;     {DE:"Integer signed (16 bits)"}
    UINT_TYPE : USINT := 32;    {DE:"Integer unsigned (16 bits)"}

    DWORD_TYPE : USINT := 40;   {DE:"Double word (32 bits)"}
    DINT_TYPE : USINT := 41;    {DE:"Double integer signed (32 bits)"}
    UDINT_TYPE : USINT := 42;   {DE:"Double integer unsigned (32 bits)"}
    REAL_TYPE : USINT := 43;    {DE:"Floating (32 bits)"}

    STRING_TYPE : USINT := 50;  {DE:"String"}
END_VAR

(* -------------------------------------------------------------------------- *)
(* "SysVarsscanf" function                                                    *)
(* -------------------------------------------------------------------------- *)

FUNCTION SysVarsscanf : BOOL

    {DE:"Extracts values from string"}

    VAR_INPUT
        String : @USINT;        {DE:"String to scan"}
        Format : STRING[80];    {DE:"Scan format"}
        VarType : USINT;        {DE:"Variable type"}
        VarAdd : UDINT;         {DE:"Variable address"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

(* -------------------------------------------------------------------------- *)
(* "SysVarfprintf" function                                                   *)
(* -------------------------------------------------------------------------- *)

FUNCTION SysVarfprintf : INT

    {DE:"Variable print to file"}

    VAR_INPUT
        File : FILEP;           {DE:"File"}
        Format : STRING[80];    {DE:"Print format"}
        VarType : USINT;        {DE:"Variable type"}
        VarAdd : UDINT;         {DE:"Variable address"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

(* -------------------------------------------------------------------------- *)
(* "SysVarsnprintf" function                                                  *)
(* -------------------------------------------------------------------------- *)

FUNCTION SysVarsnprintf : INT

    {DE:"Variable print to string"}

    VAR_INPUT
        String : @USINT;        {DE:"Return string"}
        Size : UDINT;           {DE:"Return size"}
        Format : STRING[80];    {DE:"Print format"}
        VarType : USINT;        {DE:"Variable type"}
        VarAdd : UDINT;         {DE:"Variable address"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

(* -------------------------------------------------------------------------- *)
(* "SysLWVarsnprintf" function                                                *)
(* -------------------------------------------------------------------------- *)

FUNCTION SysLWVarsnprintf : INT

    {DE:"Variable print to string with append"}

    VAR_INPUT
        String : @USINT;        {DE:"Return string"}
        Size : UDINT;           {DE:"Return size"}
        Format : STRING[80];    {DE:"Print format"}
        VarType : USINT;        {DE:"Variable type"}
        VarAdd : UDINT;         {DE:"Variable address"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

(* ########################################################################## *)
(* CODE FUNCTION DATA TYPES DEFINITIONS AND FUNCTIONS                         *)
(* ########################################################################## *)

(* -------------------------------------------------------------------------- *)
(* "SysPCodeAccept" function                                                  *)
(* -------------------------------------------------------------------------- *)

FUNCTION SysPCodeAccept : BOOL

    {DE:"Accept a protection code"}

    VAR_INPUT
        Code : STRING[20];      {DE:"Code"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

(* -------------------------------------------------------------------------- *)
(* "SysIDEnabled" function                                                    *)
(* -------------------------------------------------------------------------- *)

FUNCTION SysIDEnabled : REAL

    { HIDDEN:ON }
    {DE:"Protected ID enabled"}

    VAR_INPUT
        ID : UINT;              {DE:"ID to check"}
        DTime : UDINT;          {DE:"Demo time"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

(* ########################################################################## *)
(* I2C BUS TYPES DEFINITIONS AND FUNCTIONS                                    *)
(* ########################################################################## *)

(* -------------------------------------------------------------------------- *)
(* "SysI2CWrRd" function                                                      *)
(* -------------------------------------------------------------------------- *)

FUNCTION SysI2CWrRd : BOOL

    {DE:"Write and read on I2C bus"}

    VAR_INPUT
        Address : USINT;        {DE:"I2c address"}
        WrBytes : USINT;        {DE:"Bytes to write"}
        WrBuffer: @USINT;       {DE:"Write data buffer"}
        RdBytes : USINT;        {DE:"Bytes to read"}
        RdBuffer: @USINT;       {DE:"Read data buffer"}
     END_VAR

    { CODE:EMBEDDED }

END_FUNCTION

(* ########################################################################## *)
(* CAN DATA TYPES DEFINITIONS AND FUNCTIONS                                   *)
(* ########################################################################## *)

(* -------------------------------------------------------------------------- *)
(* CAN bit rate definition                                                    *)
(* -------------------------------------------------------------------------- *)

VAR_GLOBAL CONSTANT

    {G:"CAN bit rate definition"}

    CAN_50KBIT : USINT := 0;    {DE:"Bit rate 50 Khz"}
    CAN_100KBIT : USINT := 1;   {DE:"Bit rate 100 Khz"}
    CAN_125KBIT : USINT := 2;   {DE:"Bit rate 125 Khz"}
    CAN_250KBIT : USINT := 3;   {DE:"Bit rate 250 Khz"}
    CAN_500KBIT : USINT := 4;   {DE:"Bit rate 500 Khz"}
    CAN_1MBIT : USINT := 5;     {DE:"Bit rate 1 Mhz"}
END_VAR

(* -------------------------------------------------------------------------- *)
(* SYSCANMESSAGE definition                                                   *)
(* -------------------------------------------------------------------------- *)

TYPE
    SYSCANMESSAGE : STRUCT      {DE:"CAN message"}
        RmReq : BOOL;           {DE:"FALSE:Data frame, TRUE:Remote request"}
        Length : USINT;         {DE:"Data length"}
        MsgID : UDINT;          {DE:"Message ID (FF:Bit 31) (11 or 29 Bit)"}
        Data : ARRAY[0..7] OF USINT;    {DE:"Message data"}
    END_STRUCT;
END_TYPE

(* -------------------------------------------------------------------------- *)
(* "SysCANSetMode" function                                                   *)
(* -------------------------------------------------------------------------- *)

FUNCTION SysCANSetMode : BOOL

    {DE:"Sets the CAN controller mode"}

    VAR_INPUT
        BitRate : USINT;        {DE:"Bit rate"}
        Filter : UDINT;         {DE:"Acceptance filter"}
        Mask : UDINT;           {DE:"Acceptance mask"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

(* -------------------------------------------------------------------------- *)
(* "SysIsCANRxTxAv" function                                                  *)
(* -------------------------------------------------------------------------- *)

FUNCTION SysIsCANRxTxAv : BOOL

    {DE:"Check if CAN Rx/Tx is available"}

    VAR_INPUT
        Select : BOOL;         {DE:"eFALSE:Rx message selection, eTRUE:Tx space selection"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

(* -------------------------------------------------------------------------- *)
(* "SysCANRxMsg" function                                                     *)
(* -------------------------------------------------------------------------- *)

FUNCTION SysCANRxMsg : BOOL

    {DE:"Receive a CAN message"}

    VAR_INPUT
        Mask : UDINT;           {DE:"Message ID mask"}
        ID : UDINT;             {DE:"Message ID (FF:Bit 31) (11 or 29 Bit)"}
        Msg : @SYSCANMESSAGE;   {DE:"Message pointer"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

(* -------------------------------------------------------------------------- *)
(* "SysCANTxMsg" function                                                     *)
(* -------------------------------------------------------------------------- *)

FUNCTION SysCANTxMsg : BOOL

    {DE:"Send a CAN message"}

    VAR_INPUT
        Msg : @SYSCANMESSAGE;   {DE:"Message pointer"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

(* ########################################################################## *)
(* IEC EMBEDDED SUPPORT FUNCTION BLOCKS                                       *)
(* ########################################################################## *)

(* ************************************************************************** *)
(* DATE AND TIME FUNCTION BLOCKS                                              *)
(* ************************************************************************** *)

(* -------------------------------------------------------------------------- *)
(* "SysETimeToDate" function block                                            *)
(* -------------------------------------------------------------------------- *)

FUNCTION_BLOCK SysETimeToDate

    {DE:"Epoch time to date conversion"}

    VAR
        Ver     : USINT := 0;   {DE:"Function block version"}
        IVP     : UDINT;        {DE:"Internal variables pointer"}
    END_VAR

    VAR_INPUT
        EpochTime: UDINT;       {DE:"Epoch time"}
    END_VAR

    VAR_OUTPUT
        Done   : BOOL;          {DE:"Conversion done"}
        Fault  : BOOL;          {DE:"Conversion fault"}
        Year   : UINT;          {DE:"Year"}
        Month  : USINT;         {DE:"Month"}
        Day    : USINT;         {DE:"Day"}
        WeekDay: USINT;         {DE:"WeekDay"}
        Hour   : USINT;         {DE:"Hour"}
        Minute : USINT;         {DE:"Minute"}
        Second : USINT;         {DE:"Second"}
    END_VAR

    { CODE:EMBEDDED }

END_FUNCTION_BLOCK

(* -------------------------------------------------------------------------- *)
(* "SysDateToETime" function block                                            *)
(* -------------------------------------------------------------------------- *)

FUNCTION_BLOCK SysDateToETime

    {DE:"Date to epoch time conversion"}

    VAR
        Ver     : USINT := 0;   {DE:"Function block version"}
        IVP     : UDINT;        {DE:"Internal variables pointer"}
    END_VAR

    VAR_INPUT
        Year   : UINT;          {DE:"Year"}
        Month  : USINT;         {DE:"Month"}
        Day    : USINT;         {DE:"Day"}
        Hour   : USINT;         {DE:"Hour"}
        Minute : USINT;         {DE:"Minute"}
        Second : USINT;         {DE:"Second"}
    END_VAR

    VAR_OUTPUT
        Done   : BOOL;          {DE:"Conversion done"}
        Fault  : BOOL;          {DE:"Conversion fault"}
        EpochTime: UDINT;       {DE:"Epoch time"}
    END_VAR

    { CODE:EMBEDDED }

END_FUNCTION_BLOCK

(* -------------------------------------------------------------------------- *)
(* "SysGetUTCDateTime" function                                               *)
(* -------------------------------------------------------------------------- *)

FUNCTION SysGetUTCDateTime : UDINT

    {DE:"Get the system UTC date time"}

    VAR_INPUT
        Cmd : BOOL;             {DE:"Command"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

(* -------------------------------------------------------------------------- *)
(* "SysSetUTCDateTime" function                                               *)
(* -------------------------------------------------------------------------- *)

FUNCTION SysSetUTCDateTime : BOOL

    {DE:"Set the system UTC date time"}

    VAR_INPUT
        UTCDateTime : UDINT;             {DE:"UTC date and time to set"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

(* -------------------------------------------------------------------------- *)
(* "SysTimeZoneAdj" function                                                  *)
(* -------------------------------------------------------------------------- *)

FUNCTION SysTimeZoneAdj : UDINT

    {DE:"Adjust the UTC date time with time zone and daylight saving time"}

    VAR_INPUT
        UTCDateTime : UDINT;             {DE:"UTC date and time to adjust"}
        TimeZone    : SINT;              {DE:"Difference to Greenwich time (GMT) (H)"}
        DaylightZone: USINT;             {DE:"Daylight saving zone (0=None; 1=Europe; 2=USA"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

(* ************************************************************************** *)
(* UTILITIES                                                                  *)
(* ************************************************************************** *)

(* -------------------------------------------------------------------------- *)
(* "Sysmemset" function                                                       *)
(* -------------------------------------------------------------------------- *)

FUNCTION Sysmemset : @USINT

    {DE:"Fill a memory area with a character value"}

    VAR_INPUT
        Buff    : @USINT;       {DE:"Memory area"}
        Ch      : INT;          {DE:"Character to set"}
        Size    : UDINT;        {DE:"Number of bytes to set"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

(* -------------------------------------------------------------------------- *)
(* "Sysmemmove" function                                                      *)
(* -------------------------------------------------------------------------- *)

FUNCTION Sysmemmove : @USINT

    {DE:"Copy bytes between two memory areas"}

    VAR_INPUT
        Dest    : @USINT;       {DE:"Destination area"}
        Src     : @USINT;       {DE:"Source area"}
        Size    : UDINT;        {DE:"Number of bytes to copy"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

VAR_GLOBAL CONSTANT

    {G:"Find mode"}

    FIND_DEFAULT        : USINT := 16#00;  {DE:"Default find"}
    FIND_FROM_END       : USINT := 16#01;  {DE:"Find from end"}
    FIND_NO_CASE        : USINT := 16#02;  {DE:"Find case insentive"}
    FIND_GET_END        : USINT := 16#04;  {DE:"Return a pointer to end of found"}
END_VAR

(* -------------------------------------------------------------------------- *)
(* "SysMemFind" function                                                      *)
(* -------------------------------------------------------------------------- *)

FUNCTION SysMemFind : @USINT

    {DE:"Locate a memory area inside another"}

    VAR_INPUT
        Haystack: @USINT;       {DE:"Memory area where to find"}
        HSize   : UDINT;        {DE:"Haystack area size"}
        Needle  : @USINT;       {DE:"Memory area to find"}
        NSize   : UDINT;        {DE:"Needle area size"}
        Mode    : USINT;        {DE:"Find mode"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

(* -------------------------------------------------------------------------- *)
(* "Systolower" function                                                      *)
(* -------------------------------------------------------------------------- *)

FUNCTION Systolower : INT

    {DE:"Convert a character to lower case"}

    VAR_INPUT
        Ch      : INT;          {DE:"Character to convert"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

(* -------------------------------------------------------------------------- *)
(* "Systoupper" function                                                      *)
(* -------------------------------------------------------------------------- *)

FUNCTION Systoupper : INT

    {DE:"Convert a character to upper case"}

    VAR_INPUT
        Ch      : INT;          {DE:"Character to convert"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

(* -------------------------------------------------------------------------- *)
(* "Sysstrlen" function                                                       *)
(* -------------------------------------------------------------------------- *)

FUNCTION Sysstrlen : UDINT

    {DE:"Calculate length of string"}

    VAR_INPUT
        Str     : @USINT;       {DE:"String"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

(* -------------------------------------------------------------------------- *)
(* "SysStrFind" function                                                      *)
(* -------------------------------------------------------------------------- *)

FUNCTION SysStrFind : @USINT

    {DE:"Locate a substring inside a string"}

    VAR_INPUT
        Haystack: @USINT;       {DE:"String where to find"}
        Needle  : @USINT;       {DE:"String to find"}
        Mode    : USINT;        {DE:"Find mode"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

VAR_GLOBAL CONSTANT

    {G:"OS variable ID"}

    OSID_CFG_WRITE          : UDINT := 1;   {DE:"Save configuration"}
    
    OSID_ETH0_IP            : UDINT := 100; {DE:"Eth0 IP address"}
    OSID_ETH0_MASK          : UDINT := 101; {DE:"Eth0 network mask"}
    OSID_ETH0_GATEWAY       : UDINT := 102; {DE:"Eth0 gateway"}
    OSID_ETH0_MAC           : UDINT := 103; {DE:"Eth0 MAC address"}
    OSID_ETH0_DNS_PRIM      : UDINT := 104; {DE:"Eth0 primary DNS"}
    OSID_ETH0_DNS_SEC       : UDINT := 105; {DE:"Eth0 secondary DNS"}
    
    OSID_ETH1_IP            : UDINT := 200; {DE:"Eth1 IP address"}
    OSID_ETH1_MASK          : UDINT := 201; {DE:"Eth1 network mask"}
    OSID_ETH1_GATEWAY       : UDINT := 202; {DE:"Eth1 gateway"}
    OSID_ETH1_MAC           : UDINT := 203; {DE:"Eth1 MAC address"}
    OSID_ETH1_LEASED_MAC    : UDINT := 204; {DE:"Eth1 leased MAC address"}
END_VAR

(* -------------------------------------------------------------------------- *)
(* "SysOSIDValue" function                                                    *)
(* -------------------------------------------------------------------------- *)

FUNCTION SysOSIDValue : BOOL

    {DE:"Get or set an operative system variable"}

    VAR_INPUT
        Wr      : BOOL;         {DE:"Write command"}
        OSID    : UDINT;        {DE:"Variable ID"}
        Val     : @USINT;       {DE:"Variable pointer"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

(* -------------------------------------------------------------------------- *)
(* "SysGetCrc" function block                                                 *)
(* -------------------------------------------------------------------------- *)

FUNCTION_BLOCK SysGetCrc

    {DE:"Crc calculation"}

    VAR
        Ver     : USINT := 0;   {DE:"Function block version"}
        IVP     : UDINT;        {DE:"Internal variables pointer"}
    END_VAR

    VAR_INPUT
        Buf   : @USINT;         {DE:"Buffer filled with read data"}
        ByteNr: UINT;           {DE:"Number of byte to calculate"}
        CrcIni: UINT;           {DE:"Crc init value"}
    END_VAR

    VAR_OUTPUT
        Crc : UINT;             {DE:"Calculated Crc"}
    END_VAR

    { CODE:EMBEDDED }

END_FUNCTION_BLOCK

(* ************************************************************************** *)
(* CHECK CALCULATION                                                          *)
(* ************************************************************************** *)

(* -------------------------------------------------------------------------- *)
(* Check mode definition                                                      *)
(* -------------------------------------------------------------------------- *)

VAR_GLOBAL CONSTANT

    {G:"Check type definitions"}

    CRC_16_MODBUS   : USINT := 1;   {DE:"Modbus RTU CRC"}
    LRC_ISO1155     : USINT := 2;   {DE:"ISO1155 LRC"}
END_VAR

(* -------------------------------------------------------------------------- *)
(* "SysGetCheck" function                                                     *)
(* -------------------------------------------------------------------------- *)

FUNCTION SysGetCheck : UDINT

    {DE:"Check calculation"}

    VAR_INPUT
        Buf     : @USINT;       {DE:"Buffer filled with data"}
        ByteNr  : UDINT;        {DE:"Number of bytes to calculate"}
        Init    : UDINT;        {DE:"Init value"}
        Type    : USINT;        {DE:"Check type"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

(* ************************************************************************** *)
(* PERIPHERAL MANAGEMENT FUNCTION BLOCKS                                      *)
(* ************************************************************************** *)

(* -------------------------------------------------------------------------- *)
(* "SysPhrInfos" function                                                     *)
(* -------------------------------------------------------------------------- *)

FUNCTION SysPhrInfos : BOOL

    {DE:"Read peripheral module infos"}

    VAR_INPUT
        Module: USINT;          {DE:"Module address"}
        InfoID: USINT;          {DE:"Info ID"}
        Info : STRING[10];      {DE:"Info report"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

(* -------------------------------------------------------------------------- *)
(* "SysPhrVRd" function                                                       *)
(* -------------------------------------------------------------------------- *)

FUNCTION SysPhrVRd : BOOL

    {DE:"Read variable from peripheral bus"}

    VAR_INPUT
        Module: USINT;          {DE:"Module address"}
        RdAdd: UINT;            {DE:"Read address"}
        VarType: USINT;         {DE:"Variable type"}
        VarAdd: UDINT;          {DE:"Variable address"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

(* -------------------------------------------------------------------------- *)
(* "SysPhrVWr" function                                                       *)
(* -------------------------------------------------------------------------- *)

FUNCTION SysPhrVWr : BOOL

    {DE:"Write variable to peripheral bus"}

    VAR_INPUT
        Module: USINT;          {DE:"Module address"}
        WrAdd: UINT;            {DE:"Write address"}
        VarType: USINT;         {DE:"Variable type"}
        VarAdd: UDINT;          {DE:"Variable address"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

(* -------------------------------------------------------------------------- *)
(* "SysGetPhrDI" function block                                               *)
(* -------------------------------------------------------------------------- *)

VAR_GLOBAL CONSTANT

    {G:"Digital input mode"}

    DI_8_LL : USINT := 1;       {DE:"Read 0-7 input mode"}
    DI_8_L  : USINT := 2;       {DE:"Read 8-15 input mode"}
    DI_8_M  : USINT := 3;       {DE:"Read 16-23 input mode"}
    DI_8_MM : USINT := 4;       {DE:"Read 24-31 input mode"}

    DI_16_L : USINT := 5;       {DE:"Read 0-15 input mode"}
    DI_16_M : USINT := 6;       {DE:"Read 16-31 input mode"}

    DI_32   : USINT := 7;       {DE:"Read 32 input mode"}
    
    DI_I_8_LL : USINT := 11;    {DE:"Read 0-7 immediate input mode"}
    DI_I_8_L  : USINT := 12;    {DE:"Read 8-15 immediate input mode"}
    DI_I_8_M  : USINT := 13;    {DE:"Read 16-23 immediate input mode"}
    DI_I_8_MM : USINT := 14;    {DE:"Read 24-31 immediate input mode"}

    DI_I_16_L : USINT := 15;    {DE:"Read 0-15 immediate input mode"}
    DI_I_16_M : USINT := 16;    {DE:"Read 16-31 immediate input mode"}

    DI_I_32   : USINT := 17;    {DE:"Read 32 immediate input mode"}

END_VAR

FUNCTION_BLOCK SysGetPhrDI

    {DE:"Get the peripheral digital inputs"}

    VAR
        Ver     : USINT := 0;   {DE:"Function block version"}
        IVP     : UDINT;        {DE:"Internal variables pointer"}
    END_VAR

    VAR_INPUT
        Address : USINT;        {DE:"Module address"}
        Mode    : USINT;        {DE:"Mode"}
    END_VAR

    VAR_OUTPUT
        Done    : BOOL;         {DE:"Function done"}
        Fault   : BOOL;         {DE:"Function fault"}
        Value   : DWORD;        {DE:"Digital input value"}
    END_VAR

    { CODE:EMBEDDED }

END_FUNCTION_BLOCK

(* -------------------------------------------------------------------------- *)
(* "SysSetPhrDO" function block                                               *)
(* -------------------------------------------------------------------------- *)

VAR_GLOBAL CONSTANT

    {G:"Digital output mode"}

    DO_8_LL : USINT := 1;       {DE:"Write 0-7 output mode"}
    DO_8_L  : USINT := 2;       {DE:"Write 8-15 output mode"}
    DO_8_M  : USINT := 3;       {DE:"Write 16-23 output mode"}
    DO_8_MM : USINT := 4;       {DE:"Write 24-31 output mode"}

    DO_16_L : USINT := 5;       {DE:"Write 0-15 output mode"}
    DO_16_M : USINT := 6;       {DE:"Write 16-31 output mode"}

    DO_32   : USINT := 7;       {DE:"Write 32 output mode"}
END_VAR

FUNCTION_BLOCK SysSetPhrDO

    {DE:"Set the peripheral digital outputs"}

    VAR
        Ver     : USINT := 1;   {DE:"Function block version"}
        IVP     : UDINT;        {DE:"Internal variables pointer"}
    END_VAR

    VAR_INPUT
        Address : USINT;        {DE:"Module address"}
        Mode    : USINT;        {DE:"Mode"}
        Value   : DWORD;        {DE:"Digital output value"}
        Mask    : DWORD;        {DE:"Memory mapped output mask"}
    END_VAR

    VAR_OUTPUT
        Done    : BOOL;         {DE:"Function done"}
        Fault   : BOOL;         {DE:"Function fault"}
    END_VAR

    { CODE:EMBEDDED }

END_FUNCTION_BLOCK

(* -------------------------------------------------------------------------- *)
(* "SysGetAnInp" function block                                               *)
(* -------------------------------------------------------------------------- *)

VAR_GLOBAL CONSTANT

    {G:"Analog to digital mode"}

    AD_IDLE              : USINT := 16#00;  {DE:"Idle mode"}
    AD_VOLT_0_125_COMMON : USINT := 16#01;  {DE:"0-1.25V common mode"}
    AD_VOLT_0_10_COMMON  : USINT := 16#02;  {DE:"0-10V common mode"}
    AD_CURR_0_20_COMMON  : USINT := 16#03;  {DE:"0-20mA common mode"}
    AD_CURR_4_20_COMMON  : USINT := 16#04;  {DE:"4-20mA common mode"}
    AD_VOLT_0_1_COMMON   : USINT := 16#05;  {DE:"0-1V common mode"}
    AD_CURR_0_20_DIFFER  : USINT := 16#06;  {DE:"0-20mA differential mode"}
    AD_VOLT_0_1_DIFFER   : USINT := 16#07;  {DE:"0-1V differential mode"}
    AD_VOLT_0_125_DIFFER : USINT := 16#08;  {DE:"0-1.25V differential mode"}
    AD_VOLT_0_10_DIFFER  : USINT := 16#09;  {DE:"0-10V differential mode"}
    AD_PT100_DIFFER      : USINT := 16#0A;  {DE:"Pt100 differential mode"}
    AD_PT1000_DIFFER     : USINT := 16#0B;  {DE:"Pt1000 differential mode"}
    AD_NI1000_DIFFER     : USINT := 16#0C;  {DE:"Ni1000 differential mode"}
    AD_CURR_4_20_DIFFER  : USINT := 16#0D;  {DE:"4-20mA differential mode"}
    AD_PT100_DIN_43760   : USINT := 16#20;  {DE:"Pt100 DIN_43760 standard"}
    AD_PT100_AMERICAN    : USINT := 16#21;  {DE:"Pt100 American standard"}
    AD_PT100_ITS_90      : USINT := 16#22;  {DE:"Pt100 ITS-90 standard"}
    AD_PT100_IEC_60751   : USINT := 16#23;  {DE:"Pt100 IEC-60751 standard"}
    AD_PT1000_DIN_43760  : USINT := 16#28;  {DE:"Pt1000 DIN_43760 standard"}
    AD_PT1000_AMERICAN   : USINT := 16#29;  {DE:"Pt1000 American standard"}
    AD_PT1000_ITS_90     : USINT := 16#2A;  {DE:"Pt1000 ITS-90 standard"}
    AD_PT1000_IEC_60751  : USINT := 16#2B;  {DE:"Pt1000 IEC-60751 standard"}
    AD_NI1000_DIN_43760  : USINT := 16#30;  {DE:"Ni1000 DIN_43760 standard"}
    AD_THERMOCOUPLE_B    : USINT := 16#40;  {DE:"Thermocouple B type"}
    AD_THERMOCOUPLE_E    : USINT := 16#41;  {DE:"Thermocouple E type"}
    AD_THERMOCOUPLE_J    : USINT := 16#42;  {DE:"Thermocouple J type"}
    AD_THERMOCOUPLE_K    : USINT := 16#43;  {DE:"Thermocouple K type"}
    AD_THERMOCOUPLE_N    : USINT := 16#44;  {DE:"Thermocouple N type"}
    AD_THERMOCOUPLE_R    : USINT := 16#45;  {DE:"Thermocouple R type"}
    AD_THERMOCOUPLE_S    : USINT := 16#46;  {DE:"Thermocouple S type"}
    AD_THERMOCOUPLE_T    : USINT := 16#47;  {DE:"Thermocouple T type"}
    AD_VIN_VREF_G_1      : USINT := 16#5A;  {DE:"Vin/Vref gain=1"}
    AD_VIN_VREF_G_2      : USINT := 16#5B;  {DE:"Vin/Vref gain=2"}
    AD_VIN_VREF_G_4      : USINT := 16#5C;  {DE:"Vin/Vref gain=4"}
    AD_VIN_VREF_G_8      : USINT := 16#5D;  {DE:"Vin/Vref gain=8"}
    AD_VIN_VREF_G_16     : USINT := 16#5E;  {DE:"Vin/Vref gain=16"}
    AD_VIN_VREF_G_32     : USINT := 16#5F;  {DE:"Vin/Vref gain=32"}
    AD_VIN_VREF_G_64     : USINT := 16#60;  {DE:"Vin/Vref gain=64"}
    AD_VIN_VREF_G_128    : USINT := 16#61;  {DE:"Vin/Vref gain=128"}
    AD_RESISTOR_300_OHM  : USINT := 16#6E;  {DE:"Resistor 0-300 ohm"}
    AD_RESISTOR_5000_OHM : USINT := 16#6F;  {DE:"Resistor 0-5000 ohm"}
    
END_VAR

FUNCTION_BLOCK SysGetAnInp

    {DE:"Get analog input"}

    VAR
        Ver     : USINT := 0;   {DE:"Function block version"}
        IVP     : UDINT;        {DE:"Internal variables pointer"}
    END_VAR

    VAR_INPUT
        Address : USINT;        {DE:"Module address"}
        Channel : USINT;        {DE:"Channel"}
        Mode    : USINT;        {DE:"Mode"}
    END_VAR

    VAR_OUTPUT
        Done    : BOOL;         {DE:"Function done"}
        Fault   : BOOL;         {DE:"Function fault"}
        Value   : REAL;         {DE:"Value"}
    END_VAR

    { CODE:EMBEDDED }

END_FUNCTION_BLOCK

(* -------------------------------------------------------------------------- *)
(* "SysSetAnOut" function block                                               *)
(* -------------------------------------------------------------------------- *)

VAR_GLOBAL CONSTANT

    {G:"Digital to analog mode"}

    DA_VOLT_0_10         : USINT := 16#01;  {DE:"0-10V"}
    DA_VOLT_0_5          : USINT := 16#02;  {DE:"0-5V"}
    DA_VOLT_M10_10       : USINT := 16#03;  {DE:"+-10V"}
    DA_VOLT_M5_5         : USINT := 16#04;  {DE:"+-5V"}
    DA_CURR_0_20         : USINT := 16#05;  {DE:"0-20mA"}
    DA_CURR_4_20         : USINT := 16#06;  {DE:"4-20mA"}

END_VAR

FUNCTION_BLOCK SysSetAnOut

    {DE:"Set analog output"}

    VAR
        Ver     : USINT := 0;   {DE:"Function block version"}
        IVP     : UDINT;        {DE:"Internal variables pointer"}
    END_VAR

    VAR_INPUT
        Address : USINT;        {DE:"Module address"}
        Channel : USINT;        {DE:"Channel"}
        Mode    : USINT;        {DE:"Mode"}
        Value   : REAL;         {DE:"Value"}
     END_VAR

    VAR_OUTPUT
        Done    : BOOL;         {DE:"Function done"}
        Fault   : BOOL;         {DE:"Function fault"}
    END_VAR

    { CODE:EMBEDDED }

END_FUNCTION_BLOCK

(* -------------------------------------------------------------------------- *)
(* "SysGetCounter" function block                                             *)
(* -------------------------------------------------------------------------- *)

FUNCTION_BLOCK SysGetCounter

    {DE:"Get counter value"}

    VAR
        Ver     : USINT := 0;   {DE:"Function block version"}
        IVP     : UDINT;        {DE:"Internal variables pointer"}
    END_VAR

    VAR_INPUT
        Address : USINT;        {DE:"Module address"}
        Channel : USINT;        {DE:"Channel"}
        Mode : UDINT;           {DE:"Mode"}
        RCount  : BOOL;         {DE:"Reverse count"}
        Reset  : BOOL;          {DE:"Count reset"}
     END_VAR

    VAR_OUTPUT
        Done    : BOOL;         {DE:"Function done"}
        Fault   : BOOL;         {DE:"Function fault"}
        Value  : UDINT;         {DE:"Counter value"}
    END_VAR

    { CODE:EMBEDDED }

END_FUNCTION_BLOCK

(* -------------------------------------------------------------------------- *)
(* "SysGetEncoder" function block                                             *)
(* -------------------------------------------------------------------------- *)

FUNCTION_BLOCK SysGetEncoder

    {DE:"Get encoder value"}

    VAR
        Ver     : USINT := 0;   {DE:"Function block version"}
        IVP     : UDINT;        {DE:"Internal variables pointer"}
    END_VAR

    VAR_INPUT
        Address : USINT;        {DE:"Module address"}
        Channel : USINT;        {DE:"Channel"}
        RCount  : BOOL;         {DE:"Reverse count"}
        ZeroEn  : BOOL;         {DE:"Zero enable"}
        GateEn  : BOOL;         {DE:"Gate enable"}
        RGate   : BOOL;         {DE:"Reverse gate"}
     END_VAR

    VAR_OUTPUT
        Done    : BOOL;         {DE:"Function done"}
        Fault   : BOOL;         {DE:"Function fault"}
        ZeroD   : BOOL;         {DE:"Zero pulse detected"}
        GateD   : BOOL;         {DE:"Gate detected"}
        GQuote  : UINT;         {DE:"Gate quote"}
        EQuote  : UINT;         {DE:"Encoder quote"}
    END_VAR

    { CODE:EMBEDDED }

END_FUNCTION_BLOCK

(* -------------------------------------------------------------------------- *)
(* "SysDMXMng" function block                                                 *)
(* -------------------------------------------------------------------------- *)

FUNCTION_BLOCK SysDMXMng

    {DE:"DMX protocol management"}

    VAR
        Ver     : USINT := 0;   {DE:"Function block version"}
        IVP     : UDINT;        {DE:"Internal variables pointer"}
    END_VAR

    VAR_INPUT
        Start  : BOOL;          {DE:"Start"}
        File : FILEP;           {DE:"File"}
        Status : USINT;         {DE:"Status byte"}
        Devices : UINT;         {DE:"Number of devices"}
        Delay : UINT;           {DE:"Interframe delay [mSec]"}
        DataPtr : @USINT;       {DE:"Data array pointer"}
     END_VAR

    VAR_OUTPUT
        Done    : BOOL;         {DE:"Function done"}
        Fault   : BOOL;         {DE:"Function fault"}
    END_VAR

    { CODE:EMBEDDED }

END_FUNCTION_BLOCK

(* -------------------------------------------------------------------------- *)
(* "SysSetPWMOut" function block                                              *)
(* -------------------------------------------------------------------------- *)

FUNCTION_BLOCK SysSetPWMOut

    {DE:"Set PWM generator output"}

    VAR
        Ver     : USINT := 0;   {DE:"Function block version"}
        IVP     : UDINT;        {DE:"Internal variables pointer"}
    END_VAR

    VAR_INPUT
        Address : USINT;        {DE:"Module address"}
        Channel : USINT;        {DE:"Channel"}
        Frequency : REAL;       {DE:"Frequency (Hz)"}
        Duty    : REAL;         {DE:"Duty cycle (%)"}
     END_VAR

    VAR_OUTPUT
        Done    : BOOL;         {DE:"Function done"}
        Fault   : BOOL;         {DE:"Function fault"}
    END_VAR

    { CODE:EMBEDDED }

END_FUNCTION_BLOCK

(* ########################################################################## *)
(* NETWORK DATA TYPES DEFINITIONS AND FUNCTIONS                               *)
(* ########################################################################## *)

(* -------------------------------------------------------------------------- *)
(* "SysUDPSktSend" function                                                   *)
(* -------------------------------------------------------------------------- *)

FUNCTION SysUDPSktSend : INT

    {DE:"Send data to UDP socket"}

    VAR_INPUT
        File    : FILEP;        {DE:"File pointer"}
        TxData  : @USINT;       {DE:"Tx data buffer"}
        Size    : UINT;         {DE:"Data buffer size"}
        PeerIP  : STRING[15];   {DE:"Peer IP address"}
        PeerPort    : UINT;     {DE:"Peer port"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

(* -------------------------------------------------------------------------- *)
(* "SysIPReach" function block                                                *)
(* -------------------------------------------------------------------------- *)

FUNCTION_BLOCK SysIPReach

    {DE:"Checks if IP is reachable"}

    VAR
        Ver     : USINT := 0;   {DE:"Function block version"}
        IVP     : UDINT;        {DE:"Internal variables pointer"}
    END_VAR

    VAR_INPUT
        Enable  : BOOL;         {DE:"Function enable"}
        PeerIP  : STRING[15];   {DE:"Peer IP address"}
     END_VAR

    VAR_OUTPUT
        Done    : BOOL;         {DE:"Function done"}
        Fault   : BOOL;         {DE:"Function fault"}
        Refresh : USINT;        {DE:"Refresh percentage (%)"}
    END_VAR

    { CODE:EMBEDDED }

END_FUNCTION_BLOCK

(* -------------------------------------------------------------------------- *)
(* "SysSktListen" function block                                              *)
(* -------------------------------------------------------------------------- *)

FUNCTION_BLOCK SysSktListen

    {DE:"Set socket in listening"}

    VAR
        Ver     : USINT := 0;   {DE:"Function block version"}
        IVP     : UDINT;        {DE:"Internal variables pointer"}
    END_VAR

    VAR_INPUT
        Enable  : BOOL;         {DE:"Function enable"}
        File    : FILEP;        {DE:"File"}
        MyIP    : STRING[15];   {DE:"My IP address"}
        MyPort  : UINT;         {DE:"My port"}
        LifeTm  : UINT;         {DE:"Life time (S)"}
        FlushTm : UINT;         {DE:"Flush time (mS)"}
        RxSize  : UINT;         {DE:"Rx data size"}
        TxSize  : UINT;         {DE:"Tx data size"}
    END_VAR

    VAR_OUTPUT
        Done    : BOOL;         {DE:"Function done"}
        Fault   : BOOL;         {DE:"Function fault"}
        Connect : BOOL;         {DE:"Socket connect"}
        ClientIP: STRING[15];   {DE:"Client IP address"}
        ClientPort  : UINT;     {DE:"Client port"}
    END_VAR

    { CODE:EMBEDDED }

END_FUNCTION_BLOCK

(* -------------------------------------------------------------------------- *)
(* "SysUDPSktRcv" function block                                              *)
(* -------------------------------------------------------------------------- *)

FUNCTION_BLOCK SysUDPSktRcv

    {DE:"Receive data from UDP socket"}

    VAR
        Ver     : USINT := 0;   {DE:"Function block version"}
        IVP     : UDINT;        {DE:"Internal variables pointer"}
    END_VAR

    VAR_INPUT
        Enable  : BOOL;         {DE:"Function enable"}
        File    : FILEP;        {DE:"File pointer"}
        PeerIP  : STRING[15];   {DE:"Peer IP address"}
        PeerPort: UINT;         {DE:"Peer port"}
        RxData  : @USINT;       {DE:"Rx data buffer"}
        Size    : UINT;         {DE:"Data buffer size"}
     END_VAR

    VAR_OUTPUT
        Done    : BOOL;         {DE:"Function done"}
        Fault   : BOOL;         {DE:"Function fault"}
        ClientIP: STRING[15];   {DE:"Client IP address"}
        ClientPort  : UINT;     {DE:"Client port"}
        RxSize  : UINT;         {DE:"Received bytes"}
    END_VAR

    { CODE:EMBEDDED }

END_FUNCTION_BLOCK

(* -------------------------------------------------------------------------- *)
(* "SysUDPClient" function block                                              *)
(* -------------------------------------------------------------------------- *)

FUNCTION_BLOCK SysUDPClient

    {DE:"UDP client"}

    VAR
        Ver      : USINT := 0;   {DE:"Function block version"}
        IVP      : UDINT;        {DE:"Internal variables pointer"}
    END_VAR

    VAR_INPUT
        Connect  : BOOL;         {DE:"Connection request"}
        PeerAdd  : @USINT;       {DE:"Peer address"}
        PeerPort : UINT;         {DE:"Peer port"}
        LocalAdd : @USINT;       {DE:"Local address"}
        LocalPort: UINT;         {DE:"Local port"}
        FlushTm  : UINT;         {DE:"Flush time [mS]"}
        LifeTm   : UINT;         {DE:"Life time [S]"}
        RxSize   : UINT;         {DE:"Rx buffer data size"}
        TxSize   : UINT;         {DE:"Tx buffer data size"}
     END_VAR

    VAR_OUTPUT
        Connected: BOOL;         {DE:"Connected"}
        Fault    : BOOL;         {DE:"Function fault"}
        File     : FILEP;        {DE:"File pointer"}
    END_VAR

    { CODE:EMBEDDED }

END_FUNCTION_BLOCK

(* -------------------------------------------------------------------------- *)
(* "SysUDPServer" function block                                              *)
(* -------------------------------------------------------------------------- *)

FUNCTION_BLOCK SysUDPServer

    {DE:"UDP server"}

    VAR
        Ver      : USINT := 0;   {DE:"Function block version"}
        IVP      : UDINT;        {DE:"Internal variables pointer"}
    END_VAR

    VAR_INPUT
        Enable   : BOOL;         {DE:"Server enable"}
        FilesArr : @FILEP;       {DE:"File pointer array address"}
        LocalAdd : @USINT;       {DE:"Local address"}
        LocalPort: UINT;         {DE:"Local port"}
        MaxConn  : USINT;        {DE:"Max number of connections"}
        FlushTm  : UINT;         {DE:"Flush time [mS]"}
        LifeTm   : UINT;         {DE:"Life time [S]"}
        RxSize   : UINT;         {DE:"Rx buffer data size"}
        TxSize   : UINT;         {DE:"Tx buffer data size"}
     END_VAR

    VAR_OUTPUT
        Enabled  : BOOL;         {DE:"Enabled"}
        Fault    : BOOL;         {DE:"Function fault"}
        ConnPeers: USINT;        {DE:"Number of peers connected"}
    END_VAR

    { CODE:EMBEDDED }

END_FUNCTION_BLOCK

(* -------------------------------------------------------------------------- *)
(* "SysTCPClient" function block                                              *)
(* -------------------------------------------------------------------------- *)

FUNCTION_BLOCK SysTCPClient

    {DE:"TCP client"}

    VAR
        Ver      : USINT := 0;   {DE:"Function block version"}
        IVP      : UDINT;        {DE:"Internal variables pointer"}
    END_VAR

    VAR_INPUT
        Connect  : BOOL;         {DE:"Connection request"}
        PeerAdd  : @USINT;       {DE:"Peer address"}
        PeerPort : UINT;         {DE:"Peer port"}
        LocalAdd : @USINT;       {DE:"Local address"}
        LocalPort: UINT;         {DE:"Local port"}
        FlushTm  : UINT;         {DE:"Flush time [mS]"}
        LifeTm   : UINT;         {DE:"Life time [S]"}
        RxSize   : UINT;         {DE:"Rx buffer data size"}
        TxSize   : UINT;         {DE:"Tx buffer data size"}
     END_VAR

    VAR_OUTPUT
        Connected: BOOL;         {DE:"Connected"}
        Fault    : BOOL;         {DE:"Function fault"}
        File     : FILEP;        {DE:"File pointer"}
    END_VAR

    { CODE:EMBEDDED }

END_FUNCTION_BLOCK

(* -------------------------------------------------------------------------- *)
(* "SysTCPServer" function block                                              *)
(* -------------------------------------------------------------------------- *)

FUNCTION_BLOCK SysTCPServer

    {DE:"TCP server"}

    VAR
        Ver      : USINT := 0;   {DE:"Function block version"}
        IVP      : UDINT;        {DE:"Internal variables pointer"}
    END_VAR

    VAR_INPUT
        Enable   : BOOL;         {DE:"Server enable"}
        FilesArr : @FILEP;       {DE:"File pointer array address"}
        LocalAdd : @USINT;       {DE:"Local address"}
        LocalPort: UINT;         {DE:"Local port"}
        MaxConn  : USINT;        {DE:"Max number of connections"}
        FlushTm  : UINT;         {DE:"Flush time [mS]"}
        LifeTm   : UINT;         {DE:"Life time [S]"}
        RxSize   : UINT;         {DE:"Rx buffer data size"}
        TxSize   : UINT;         {DE:"Tx buffer data size"}
     END_VAR

    VAR_OUTPUT
        Enabled  : BOOL;         {DE:"Enabled"}
        Fault    : BOOL;         {DE:"Function fault"}
        ConnPeers: USINT;        {DE:"Number of peers connected"}
    END_VAR

    { CODE:EMBEDDED }

END_FUNCTION_BLOCK

(* -------------------------------------------------------------------------- *)
(* "SysGetIpInfos" function block                                             *)
(* -------------------------------------------------------------------------- *)

FUNCTION_BLOCK SysGetIpInfos

    {DE:"Get IP infos"}

    VAR
        Ver      : USINT := 0;   {DE:"Function block version"}
        IVP      : UDINT;        {DE:"Internal variables pointer"}
    END_VAR

    VAR_INPUT
        File     : FILEP;        {DE:"Pointer to file"}
     END_VAR

    VAR_OUTPUT
        PeerIP   : STRING[15];   {DE:"Peer IP address"}
        PeerPort : UINT;         {DE:"Peer port"}
        Status   : DWORD;        {DE:"Connection status"}
    END_VAR

    { CODE:EMBEDDED }

END_FUNCTION_BLOCK

(* ########################################################################## *)
(* SPY DATA FUNCTION DATA TYPES DEFINITIONS AND FUNCTIONS                     *)
(* ########################################################################## *)

(* -------------------------------------------------------------------------- *)
(* Variable types definition                                                  *)
(* -------------------------------------------------------------------------- *)

VAR_GLOBAL CONSTANT
    {G:"Spy mode definition"}

    SPY_ASCII : USINT := 1;     {DE:"Ascii mode"}
    SPY_ASCHEX: USINT := 10;    {DE:"Ascii with substitute unprintable chars"}
    SPY_BINARY: USINT := 100;   {DE:"Binary mode (From 100 to 180)"}
END_VAR

(* -------------------------------------------------------------------------- *)
(* "SysSpyData" function                                                      *)
(* -------------------------------------------------------------------------- *)

FUNCTION SysSpyData : BOOL

    {DE:"Spy data"}

    VAR_INPUT
        Mode    : USINT;        {DE:"Spy mode"}
        TFlags  : UDINT;        {DE:"Trigger flags"}
        Label   : @USINT;       {DE:"Label pointer"}
        DPtr    : @USINT;       {DE:"Data pointer"}
    END_VAR

    {CODE:EMBEDDED}

END_FUNCTION

]]>
		</target>
		<targetXML name="RESTSvcSQL.tgtx" fullXml="true">
			<target>
				<resources>
					<resource name="ELS20" processor="ARMv7M">
						<task id="0" name="Fast" type="cyclic" period="1000" descr="Fast task">
							<constraints minPeriod="100" maxPeriod="10000"/>
						</task>
						<task id="1" name="Slow" type="cyclic" period="10000" descr="Slow task">
							<constraints minPeriod="1000" maxPeriod="100000"/>
						</task>
						<task id="2" name="Boot" type="single" period="0" descr="Boot task"/>
						<task id="3" name="Back" period="0" type="cyclic" descr="Background task"/>
					</resource>
				</resources>
			</target>
		</targetXML>
		<libraries>
			<lib version="1.0.0" name="V:\Bertaser\Absolutely Useful\Libraries\eLLabRESTSvcLib_A500.plclib" fullXml="true" link="false">
				<descr/>
				<globalVars/>
				<retainVars/>
				<constantVars/>
				<functions>
					<function name="_GetFIFOSpace" version="1.0.0">
						<descr>(eLLabRESTSvcLib_A500) Get the FIFO space (Private)</descr>
						<returnValue>UDINT</returnValue>
						<vars>
							<inputVars>
								<var name="In" type="UDINT">
									<descr>FIFO in index</descr>
								</var>
								<var name="Out" type="UDINT">
									<descr>FIFO out index</descr>
								</var>
								<var name="Length" type="UDINT">
									<descr>FIFO length</descr>
								</var>
							</inputVars>
						</vars>
						<iecDeclaration valid="TRUE">
							<![CDATA[]]>
						</iecDeclaration>
						<sourceCode type="ST">
							<![CDATA[(* ************************************************************************** *)
(* FUNCTION "UDINT _GetFIFOSpace(UDINT In, UDINT Out, UDINT Length)"          *)
(* ************************************************************************** *)
(* Questa funzione calcola lo spazio ancora presente nel buffer FIFO.         *)
(* -------------------------------------------------------------------------- *)
(* Eseguo calcolo spazio in buffer FIFO. *)

	IF (In >= Out) THEN
		_GetFIFOSpace:=Length-(In-Out);
	ELSE
		_GetFIFOSpace:=Out-In;
	END_IF;

(* [End of file] *)]]>
						</sourceCode>
					</function>
				</functions>
				<functionBlocks>
					<functionBlock name="_HTTPGetPage" version="1.0.0">
						<descr>(eLLabRESTSvcLib_A500) HTTP get page (Private)</descr>
						<vars>
							<inputVars>
								<var name="Enable" type="BOOL">
									<descr>FB enable</descr>
								</var>
								<var name="SpyOn" type="BOOL">
									<descr>Spy active</descr>
								</var>
								<var name="HostAddress" type="@BYTE">
									<descr>Host address</descr>
								</var>
								<var name="HostName" type="@BYTE">
									<descr>Host name</descr>
								</var>
								<var name="HostPort" type="UINT">
									<descr>Host port</descr>
								</var>
								<var name="Page" type="@BYTE">
									<descr>Page to request</descr>
								</var>
								<var name="Request" type="@BYTE">
									<descr>Request string</descr>
								</var>
								<var name="Filename" type="STRING" length="32">
									<descr>Path and name of file where to log</descr>
								</var>
								<var name="PBuffer" type="@BYTE">
									<descr>Page buffer</descr>
								</var>
								<var name="PBLength" type="UDINT">
									<descr>Page buffer length</descr>
								</var>
								<var name="Timeout" type="UDINT">
									<descr>Execution timeout (mS)</descr>
								</var>
							</inputVars>
							<outputVars>
								<var name="Done" type="BOOL">
									<descr>Execution done</descr>
								</var>
								<var name="Ok" type="BOOL">
									<descr>Page loaded</descr>
								</var>
								<var name="Fault" type="BOOL">
									<descr>Execution fault</descr>
								</var>
								<var name="HTTPStatus" type="STRING" length="64">
									<descr>HTPP Status received</descr>
								</var>
								<var name="PLength" type="UDINT">
									<descr>Received page length</descr>
								</var>
								<var name="PLTime" type="REAL">
									<descr>Page load time (S)</descr>
								</var>
							</outputVars>
							<externalVars>
								<var name="SysActTaskID" type="USINT">
									<descr>Task ID</descr>
								</var>
							</externalVars>
							<localVars>
								<var name="CaseBk" type="USINT">
									<descr>Case back</descr>
								</var>
								<var name="CaseNr" type="USINT">
									<descr>Case gestione</descr>
								</var>
								<var name="DBPtr" type="@BYTE">
									<descr>Data buffer pointer (SysRMalloc)</descr>
								</var>
								<var name="ErrorNr" type="UDINT">
									<descr>Error number</descr>
								</var>
								<var name="Fp" type="FILEP">
									<descr>File pointer</descr>
								</var>
								<var name="i" type="UDINT">
									<descr>Auxiliary variable</descr>
								</var>
								<var name="LBf" type="UDINT" dim0="5">
									<descr>Length buffer</descr>
								</var>
								<var name="Ptr" type="@BYTE">
									<descr>Auxiliary pointer</descr>
								</var>
								<var name="SBPtr" type="@BYTE">
									<descr>Spy buffer pointer (SysRMAlloc)</descr>
								</var>
								<var name="TCPClient" type="SysTCPClient">
									<descr>TCP client</descr>
								</var>
								<var name="TimeBf" type="UDINT" dim0="2">
									<descr>Time buffer</descr>
								</var>
							</localVars>
							<localConsts>
								<const name="DBSize" type="UINT">
									<descr>Data buffer size (SysRMalloc)</descr>
									<initValue>512</initValue>
								</const>
								<const name="SBSize" type="UINT">
									<descr>Spy buffer size (SysRMAlloc)</descr>
									<initValue>128</initValue>
								</const>
							</localConsts>
						</vars>
						<iecDeclaration valid="TRUE">
							<![CDATA[]]>
						</iecDeclaration>
						<interfaces/>
						<methods/>
						<sourceCode type="ST">
							<![CDATA[(* ************************************************************************** *)
(* FUNCTION BLOCK "HTTPGetPage"                                               *)
(* ************************************************************************** *)
(* Questa FB esegue la richiesta di una pagina web e la ritorna. E' possibile *)
(* passare alla pagina parametri in POST (Non vi è limite sulla lunghezza) e  *)
(* non vi è limite sulla dimensione della pagina ritornata.                   *)
(*                                                                            *)
(* Parametri in ingresso:                                                     *)
(* Enable: Abilitazione FB                                                    *)
(* SpyOn: Abilitazione Spy                                                    *)
(* PeerIP: Indirizzo IP server                                                *)
(* Host: DNS server HTTP                                                      *)
(* Page: Pagina richiesta                                                     *)
(* Request: Stringa richiesta dati                                            *)
(* PBuffer: Indirizzo buffer dati pagina (Se NULL non viene salvata)          *)
(* PBLength: Dimensione buffer dati pagina (Se 0 non viene salvata)           *)
(* Filename: Nome file dove salvare pagina (Se NULL non viene salvata)        *)
(* Timeout: Tempo timeout esecuzione (mS)                                     *)
(*                                                                            *)
(* Parametri in uscita:                                                       *)
(* Done: FB eseguito                                                          *)
(* Ok: Pagina ritornata dal server                                            *)
(* Fault: Fault                                                               *)
(* HTTPStatus: Status richiesta HTTP                                          *)
(* PLength: Lunghezza pagina ricevuta                                         *)
(* PLTime: Tempo caricamento pagina (S)                                       *)
(* -------------------------------------------------------------------------- *)
(* Definizione array buffer tempo.                                            *)
(* TimeBf[0], Timeout esecuzione sequenze                                     *)
(* TimeBf[1], Calcolo tempo caricamento pagina                                *)
(* -------------------------------------------------------------------------- *)
(* Spy TFlags                                                                 *)
(* 16#00000001, 'Tx' Invio dati verso server HTTP                             *)
(* 16#00000002, 'Rx' Ricezione dati da server HTTP                            *)
(* 16#00000004, 'Rq' Stringa richiesta                                        *)
(* 16#08000000, 'Lg' Log dati di esecuzione                                   *)
(* 16#10000000, 'Pi' Informazioni di pagina                                   *)
(* 16#40000000, 'Er' Errori di esecuzione                                     *)
(* -------------------------------------------------------------------------- *)

	(* ---------------------------------------------------------------------- *)
    (* INIZIALIZZAZIONI                                                       *)
    (* ---------------------------------------------------------------------- *)
	(* Eseguo inizializzazioni. *)

	Ok:=FALSE; (* Page loaded *)
	Fault:=FALSE; (* Execution fault*)
	IF (SysActTaskID <> ID_TASK_BACK) THEN i:=SysSetLastError(10054020); Fault:=TRUE; RETURN; END_IF;
	TCPClient(); (* Connessione al server HTTP *)

    (* ---------------------------------------------------------------------- *)
    (* ESEGUO GESTIONE SPIONAGGIO                                             *)
    (* ---------------------------------------------------------------------- *)
	(* Eseguo Spy per averlo attivo da Telnet e per controllare se spazio. *)

	IF (SpyOn) THEN IF NOT(SysSpyData(0, 0, 0, 0)) THEN RETURN; END_IF; END_IF;

	(* Gestione spionaggio alloco/disalloco buffer di appoggio dati. *)

	IF (SpyOn AND (SBPtr = NULL)) THEN i:=SysRMAlloc(SBSize, ADR(SBPtr)); END_IF;
	IF (NOT(SpyOn) AND (SBPtr <> NULL)) THEN i:=SysRMFree(ADR(SBPtr)); END_IF;

    (* ---------------------------------------------------------------------- *)
    (* ESEGUO GESTIONE ERRORE                                                 *)
    (* ---------------------------------------------------------------------- *)
	(* Eseguo gestione report errore. *)

	IF (ErrorNr <> 0) THEN
		IF (SBPtr <> NULL) THEN
			i:=SysVarsnprintf(SBPtr, SBSize, 'Error:%08d', UDINT_TYPE, ADR(ErrorNr));
			i:=SysLWVarsnprintf(SBPtr, SBSize, ', On Case:%d', USINT_TYPE, ADR(CaseNr));
			i:=SysLWVarsnprintf(SBPtr, SBSize, ', Back:%d', USINT_TYPE, ADR(CaseBk));
			i:=SysSpyData(SPY_ASCII, 16#40000000, ADR('Er'), SBPtr);
		END_IF;

		(* Set error code ed impulso di "Fault". *)

        i:=SysSetLastError(ErrorNr); (* Set error code *)
		ErrorNr:=0; (* Error number *)
		Fault:=TRUE; (* Execution fault*)
		Done:=TRUE; (* Execution done *)
		RETURN;
	END_IF;

    (* ---------------------------------------------------------------------- *)
    (* ABILITAZIONE                                                           *)
    (* ---------------------------------------------------------------------- *)
    (* Eseguo controllo abilitazione se in esecuzione attendo fine. Il case *)
    (* viene azzerato solo sul done. *)

    IF (NOT(Enable) AND (CaseNr = 0)) THEN
     	IF (DBPtr <> NULL) THEN i:=SysRMFree(ADR(DBPtr)); END_IF;
		Done:=FALSE; (* Execution done *)
      	RETURN; 
	END_IF;

    (* Se terminato Disattivare/Attivare enable per eseguire nuovamente. *)

    IF (Done) THEN
    	IF (DBPtr <> NULL) THEN i:=SysRMFree(ADR(DBPtr)); END_IF;
		TCPClient.Connect:=FALSE; (* Abilitazione connessione *)
    	CaseNr		:=0; (* Case gestione *)
    	RETURN;
   	END_IF;

	(* ---------------------------------------------------------------------- *)
    (* GESTIONE TIMEOUT SEQUENZA                                              *)
    (* ---------------------------------------------------------------------- *)
    (* Viene gestito il timeout esecuzione sequenze. *)

    IF (CaseNr = 0) THEN TimeBf[0]:=SysGetSysTime(TRUE); END_IF;
	IF ((SysGetSysTime(TRUE)-TimeBf[0]) > (Timeout*1000)) THEN ErrorNr:=10054110; RETURN; END_IF;

	(* ---------------------------------------------------------------------- *)
    (* GESTIONE TRASMISSIONE DATI                                             *)
    (* ---------------------------------------------------------------------- *)
    (* Eseguo trasmissione dei dati presenti nel buffer dati. Non eseguendo *)
    (* flush i dati sono trasmessi dopo tempo flush uscendo in unico frame. *)

	IF ((CaseNr >= 10) AND (CaseNr < 100)) THEN

		(* Controllo se dati da trasmettere e se spazio in buffer di uscita. *)

		LBf[0]:=Sysstrlen(DBPtr); (* Dati da trasmettere *)
		LBf[1]:=SysGetOSpace(TCPClient.File); (* Spazio in buffer *)
		IF ((LBf[0] > 0) AND (LBf[1] > 0)) THEN

			IF (LBf[1] < LBf[0]) THEN LBf[0]:=LBf[1]; END_IF;
			i:=Sysfwrite(DBPtr, TO_INT(LBf[0]), 1, TCPClient.File);
			i:=Sysmemmove(DBPtr, DBPtr+LBf[0], LBf[0]); (* Rimuovo dati trasmessi *)
		END_IF;

		(* Continuo nelle sequenze invio dati solo se spazio per almeno 128 *)
		(* caratteri. Le stringhe definite sono tutte più corte. *)

		IF ((DBSize-Sysstrlen(DBPtr)) < 128) THEN RETURN; END_IF;
	END_IF;	

	(* ---------------------------------------------------------------------- *)
    (* GESTIONE RICEZIONE DATI                                                *)
    (* ---------------------------------------------------------------------- *)
    (* Eseguo ricezione dei dati dal socket e li carico nel buffer dati. *)

	IF (CaseNr >= 100) THEN

		(* Controllo se dati nel buffer di ricezione. *)

		LBf[0]:=SysGetIChars(TCPClient.File); (* Dati ricevuti *)
		LBf[1]:=DBSize-Sysstrlen(DBPtr)-1; (* Spazio disponibile in buffer *)
		IF ((LBf[0] <> 0) AND (LBf[1] <> 0)) THEN

			IF (LBf[1] < LBf[0]) THEN LBf[0]:=LBf[1]; END_IF;
			LBf[1]:=Sysstrlen(DBPtr); (* Posizione scrittura in buffer *)
			i:=Sysfread(DBPtr+LBf[1], TO_INT(LBf[0]), 1, TCPClient.File);
			i:=Sysmemset(DBPtr+LBf[1]+LBf[0], 0, 1); (* Aggiungo codice tappo *)
		END_IF;
	END_IF;

    (* ---------------------------------------------------------------------- *)
    (* GESTIONE SEQUENZE                                                      *)
    (* ---------------------------------------------------------------------- *)
    (* Case gestione sequenze programma. *)

	CASE (CaseNr) OF

		(* ------------------------------------------------------------------ *)
		(* ATTESA CONNESSIONE A WEB SITE                                      *)
		(* ------------------------------------------------------------------ *)
		(* Abilito connessione al server HTTP ed attendo connessione. *)

		0:
		TCPClient.PeerAdd:=HostAddress; (* Peer IP *)
		TCPClient.PeerPort:=HostPort; (* Peer port *)
		TCPClient.LocalAdd:=ADR('0.0.0.0'); (* Local address *)
		TCPClient.LocalPort:=0; (* Local port *)
		TCPClient.LifeTm:=60; (* Tempo vita socket *)
		TCPClient.FlushTm:=50; (* Tempo flush dati *)
		TCPClient.RxSize:=DBSize; (* Dimensione buffer Rx *)
		TCPClient.TxSize:=DBSize; (* Dimensione buffer Tx *)
		TCPClient.Connect:=TRUE; (* Abilitazione connessione *)
		CaseNr:=CaseNr+1; (* Case gestione *)

		(* ------------------------------------------------------------------ *)
		(* Eseguo attesa connessione socket TCP, potrebbe non esserci spazio *)
		(* per l'allocazione dei buffers TCP. *)

		1:
		IF NOT(TCPClient.Connected) THEN RETURN; END_IF; (* Esco dal ciclo WHILE *)
		IF (TCPClient.File = NULL) THEN RETURN; END_IF; (* Esco dal ciclo WHILE *)
		i:=SysFIBfClear(TCPClient.File); (* Input buffer clear *)
		i:=SysFOBfClear(TCPClient.File); (* Output buffer clear *)
		CaseNr:=CaseNr+1; (* Case gestione *)

		(* ------------------------------------------------------------------ *)
		(* Allocazione buffer dati e inizializzazione variabili. *)

		2:
		IF NOT(SysRMAlloc(DBSize, ADR(DBPtr))) THEN RETURN; END_IF;
		i:=Sysmemset(DBPtr, 0, DBSize); (* Abblenco data buffer *)
		i:=Sysmemset(PBuffer, 0, PBLength); (* Abblenco buffer pagina programma utente *)
		i:=Sysmemset(ADR(HTTPStatus), 0, SIZEOF(HTTPStatus)); (* Abblenco buffer HTTPStatus *)
		TimeBf[1]:=SysGetSysTime(TRUE); (* Time buffer *)
		CaseNr:=10; (* Case gestione *)
		
		(* Eseguo cancellazione file da disco. *)

		IF (LEN(Filename) = 0) THEN RETURN; END_IF;
		i:=Sysremove(Filename); (* Cancellazione file *)

		(* ================================================================== *)
		(* CASES INVIO DATI A SERVER HTTP                                     *)
		(* ================================================================== *)
		(* Seguono i cases di gestione invio dati a server HTTP, nel buffer   *)
		(* dati c'è sempre spazio per almeno 128 bytes.                       *)
		(* ------------------------------------------------------------------ *)

		(* ------------------------------------------------------------------ *)
		(* INVIO RICHIESTA PAGINA                                             *)
		(* ------------------------------------------------------------------ *)
		(* Se non definita stringa richiesta eseguo richiesta GET. *)

		10:
		IF (Request = NULL) THEN
			i:=SysLWVarsnprintf(DBPtr, DBSize, 'GET /%s HTTP/1.1$r$n', STRING_TYPE, Page);
			IF (SBPtr <> NULL) THEN i:=SysSpyData(SPY_ASCII, 16#00000001, ADR('Tx'), DBPtr); END_IF;
			CaseNr:=20; (* Case gestione *)
			RETURN;
		END_IF;

		(* Definita stringa richiesta eseguo richiesta POST. *)

		i:=SysLWVarsnprintf(DBPtr, DBSize, 'POST /%s HTTP/1.1$r$n', STRING_TYPE, Page);
		IF (SBPtr <> NULL) THEN i:=SysSpyData(SPY_ASCII, 16#00000001, ADR('Tx'), DBPtr); END_IF;
		CaseNr:=30; (* Case gestione *)

		(* ------------------------------------------------------------------ *)
		(* CASES COMUNI DI INVIO DATI HEADER                                  *)
		(* ------------------------------------------------------------------ *)
		(* Invio URL host e dati header. *)

		20, 30: i:=SysLWVarsnprintf(DBPtr, DBSize, 'Host: %s$r$n', STRING_TYPE, HostName); CaseNr:=CaseNr+1;
		21, 31: i:=SysLWVarsnprintf(DBPtr, DBSize, '%s$r$n', STRING_TYPE, ADR('User-Agent: Elsist HTTPGetPage/SFR079A000')); CaseNr:=CaseNr+1;

		22, 32: i:=SysLWVarsnprintf(DBPtr, DBSize, '%s$r$n', STRING_TYPE, ADR('Accept-Language: it-IT')); CaseNr:=CaseNr+1;
		23, 33: i:=SysLWVarsnprintf(DBPtr, DBSize, '%s$r$n', STRING_TYPE, ADR('Accept: text/plain, text/html')); CaseNr:=CaseNr+1;
		
		(* A request without any Accept-Charset header field implies that the *)
		(* user agent will accept any charset in response. *)

		24, 34: i:=SysLWVarsnprintf(DBPtr, DBSize, '%s$r$n', STRING_TYPE, ADR('Accept-Charset: ascii')); CaseNr:=CaseNr+1;
		
		(* If no Accept-Encoding field is in the request, any content-coding *)
		(* is considered acceptable by the user agent. (Abbiamo dubbi). *)

		25, 35: i:=SysLWVarsnprintf(DBPtr, DBSize, '%s$r$n', STRING_TYPE, ADR('Accept-Encoding: *;q=0')); CaseNr:=CaseNr+1;

		(* Close, indicates that either the client or the server would like *)
		(* to close the connection. This is the default on HTTP/1.0 requests. *)

		26, 36: i:=SysLWVarsnprintf(DBPtr, DBSize, '%s$r$n', STRING_TYPE, ADR('Connection: Close')); CaseNr:=CaseNr+1;

		(* ------------------------------------------------------------------ *)
		(* PAGINA SENZA PARAMETRI RICHIESTA IN GET                            *)
		(* ------------------------------------------------------------------ *)
		(* Se richiesta GET (Senza parametri) invio fine header <CR><LF>. *)

		27:
		i:=SysLWVarsnprintf(DBPtr, DBSize, '%s', STRING_TYPE, ADR('$r$n'));
		CaseNr:=99; (* Case invio dati HTTP *)

		(* ------------------------------------------------------------------ *)
		(* PAGINA CON PARAMETRI RICHIESTA IN POST                             *)
		(* ------------------------------------------------------------------ *)
		(* Aggiungo definizione parametri in POST. I parametri devono essere *)
		(* codificati dal programma utente in accordo alle specifiche. *) 
		(* Vedi: https://it.wikipedia.org/wiki/Query_string *)

		37:
		Ptr:=Request; (* Pointer dati richiesta *)
		LBf[0]:=Sysstrlen(Ptr); (* Request length *)

		(* Invio definizione lunghezza dati richiesta. *)

		i:=SysLWVarsnprintf(DBPtr, DBSize, '%s$r$n', STRING_TYPE, ADR('Content-Type: application/x-www-form-urlencoded'));
		i:=SysLWVarsnprintf(DBPtr, DBSize, 'Content-Length: %d$r$n', UDINT_TYPE, ADR(LBf[0]));
		i:=SysLWVarsnprintf(DBPtr, DBSize, '%s', STRING_TYPE, ADR('$r$n')); (* Fine header <CR><LF> *)
		IF (SBPtr <> NULL) THEN i:=SysSpyData(SPY_ASCII, 16#00000004, ADR('Rq'), Request); END_IF;
		CaseNr:=CaseNr+1; (* Case gestione *)

		(* ------------------------------------------------------------------ *)
		(* Inserisco a seguire l'header i dati di richiesta. *)

		38:
		LBf[0]:=Sysstrlen(Ptr); (* Request length *)
		LBf[1]:=DBSize-Sysstrlen(DBPtr)-1; (* Spazio libero in buffer dati *)
		IF (LBf[0] = 0) THEN CaseNr:=99; RETURN; END_IF;

		(* Trasferisco richiesta in buffer dati. *)
		
		IF (LBf[1] < LBf[0]) THEN LBf[0]:=LBf[1]; END_IF;
		LBf[1]:=DBPtr+Sysstrlen(DBPtr); (* Indirizzo trasferimento dati *)
		i:=Sysmemmove(LBf[1], Ptr, LBf[0]); (* Sposto dati richiesta *)
		i:=Sysmemset(LBf[1]+LBf[0], 0, 1); (* Aggiungo codice tappo *)
		Ptr:=Ptr+LBf[0]; (* Pointer dati richiesta *)

		(* ------------------------------------------------------------------ *)
		(* Fine trasmissione dati attendo uscita di tutti i dati dal socket. *)

		99:
		i:=SysFOBfFlush(TCPClient.File); (* Eseguo flush *)
		IF (SysGetOSpace(TCPClient.File) <> TO_INT(SysGetTxBSize(TCPClient.File))) THEN RETURN; END_IF;
		i:=Sysmemset(DBPtr, 0, DBSize); (* Abblenco data buffer *)
		CaseNr:=100; (* Case gestione *)

		(* ================================================================== *)
		(* CASES RICEZIONE DATI DA SERVER HTTP                                *)
		(* ================================================================== *)
		(* Seguono i cases di gestione ricezione dati da server HTTP, nel     *)
		(* buffer dati c'è sempre spazio per almeno 128 bytes.                *)
		(* ------------------------------------------------------------------ *)

		(* ------------------------------------------------------------------ *)
		(* CASES RICEZIONE HEADER                                             *)
		(* ------------------------------------------------------------------ *)
		(* L'header è suddiviso in righe con <CR><LF>. Prima riga è status *)
		(* 'HTTP/1.1 200 OK' oppure 'HTTP/1.1 400 Bad Request'. *)

		100:
		Ptr:=SysStrFind(DBPtr, ADR('$r$n'), FIND_GET_END);
		IF (Ptr = NULL) THEN RETURN; END_IF;

		(* Controllo lunghezza status ricevuto e copio in HTTPStatus. *)
		
		LBf[0]:=Ptr-DBPtr; (* String length *)
		LBf[1]:=SIZEOF(HTTPStatus)-1; (* Dimensione buffer status *)
		IF (LBf[1] < LBf[0]) THEN LBf[0]:=LBf[1]; END_IF;
		i:=Sysmemmove(ADR(HTTPStatus), DBPtr, LBf[0]); (* Trasferisco HTTPStatus *)
		IF (SBPtr <> NULL) THEN i:=SysSpyData(SPY_ASCII, 16#00000002, ADR('Rx'), ADR(HTTPStatus)); END_IF;

		(* Eseguo rimozione dati ricevuti da buffer dati. *)

		i:=Sysmemmove(DBPtr, Ptr, (DBSize-LBf[0])); (* Rimuovo dati ricevuti *)
		
		(* Controllo se ricevuto HTTP 1.0 in tal caso potrei non ricevere la *)
		(* lunghezza pagina. Quindi devo ricevere la pagina fino a quando il *)
		(* server non chiude la connessione. *)

		LBf[4]:=CaseNr; (* Salvo case per gestione tipo ricezione *)
		Ptr:=SysStrFind(ADR(HTTPStatus), ADR('HTTP/1.0'), FIND_GET_END);
		IF (Ptr <> NULL) THEN LBf[4]:=110; END_IF;
		CaseNr:=CaseNr+1; (* Case gestione *)

		(* ------------------------------------------------------------------ *)
		(* Ricevo almeno una riga per cercare il tipo di trasferimento *)

		101:
		WHILE (TRUE) DO
			Ptr:=SysStrFind(DBPtr, ADR('$r$n'), FIND_GET_END);
			IF (Ptr = NULL) THEN RETURN; END_IF;

			(* Calcolo lunghezza riga ricevuta e controllo se riga vuota di *)
			(* fine header, ha solo due caratteri <CR><LF>. *)

			LBf[0]:=Ptr-DBPtr; (* String length *)
			IF (LBf[0] = 2) THEN
				i:=Sysmemmove(DBPtr, Ptr, (DBSize-LBf[0])); (* Rimuovo dati ricevuti *)

				(* Se non trovato tipo traferimento errore. Altrimenti salto *)
				(* alla gestione della ricezione pagina. *)			
				
				IF (LBf[4] = CaseNr) THEN ErrorNr:=10054200; RETURN; END_IF;
				CaseNr:=TO_USINT(LBf[4]); (* Case gestione *)
				RETURN;
			END_IF;

			(* Controllo se definita lunghezza pagina. In tal caso è pagina *)
			(* inviata in modo normale, ne acquisisco la lunghezza. *)

			IF (SysStrFind(DBPtr, ADR('Content-Length'), FIND_DEFAULT) <> NULL) THEN
				IF NOT(SysVarsscanf(SysStrFind(DBPtr, ADR('Content-Length:'), FIND_GET_END), '%d', UDINT_TYPE, ADR(LBf[3]))) THEN ErrorNr:=10054210; RETURN; END_IF;
				LBf[4]:=120; (* Salvo case per gestione tipo ricezione *)
			END_IF;

			(* Controllo se ricezione chunked, bypass dati di header e passo a *)
			(* gestione ricezione chunked. *)

			IF (SysStrFind(DBPtr, ADR('Transfer-Encoding: chunked$r$n'), FIND_DEFAULT) <> NULL) THEN
				LBf[4]:=150; (* Salvo case per gestione tipo ricezione *)
			END_IF;

			(* Eseguo rimozione dati ricevuti da buffer dati. *)

			i:=Sysmemmove(DBPtr, Ptr, (DBSize-LBf[0])); (* Rimuovo dati ricevuti *)
		END_WHILE;

		(* ------------------------------------------------------------------ *)
		(* RICEZIONE DATI PAGINA HTTP 1.0 NON DEFINITA LUNGHEZZA              *)
		(* ------------------------------------------------------------------ *)
		(* LBf[0]: Usato come appoggio (Anche in gestione ricezione)          *)
		(* LBf[1]: Usato come appoggio (Anche in gestione ricezione)          *)
		(* LBf[2]: Dimensione dati ricevuti                                   *)
		(* LBf[3]: Non utilizzato                                             *)
		(* LBf[4]: Non utilizzato                                             *)
		(* ------------------------------------------------------------------ *)
		(* Inizializzo ricezione dati pagina. *)

		110:
		PLength:=0; (* Received page length *)
		CaseNr:=CaseNr+1; (* Case gestione *)

		(* Eseguo spionaggio. *)

		IF (SBPtr <> NULL) THEN
			i:=SysSpyData(SPY_ASCII, 16#08000000, ADR('Lg'), ADR('Start Rx page, no length defined'));
		END_IF;

		(* ---------------------------[Case ripetitivo di ricezione pagina]-- *)
		(* Calcolo lunghezza dati ricevuti. *)

		111:
		LBf[2]:=Sysstrlen(DBPtr); (* Dimensione dati ricevuti *)
		IF (LBf[2] = 0) THEN RETURN; END_IF;
		CaseBk:=CaseNr+1; (* Case back *)
		CaseNr:=200; (* Trasferimento dati ricevuti *)

		(* Eseguo spionaggio. *)

		IF (SBPtr <> NULL) THEN
			i:=SysVarsnprintf(SBPtr, SBSize, 'Received [%d]', UDINT_TYPE, ADR(LBf[2]));
			i:=SysLWVarsnprintf(SBPtr, SBSize, ' "%.20s"', STRING_TYPE, DBPtr+LBf[2]-20);
			i:=SysSpyData(SPY_ASCII, 16#08000000, ADR('Lg'), SBPtr);
		END_IF;

		(* ------------------------------------------------------------------ *)
		(* Se server non chiude la connessione continuo ricezione. *)

		112:
		i:=Sysmemmove(DBPtr, DBPtr+LBf[2], (DBSize-LBf[2])); (* Rimuovo dati ricevuti *)
		IF (TCPClient.Connected) THEN CaseNr:=CaseNr-1; RETURN; END_IF;
		CaseNr:=250; (* Case fine ricezione pagina *)

		(* ------------------------------------------------------------------ *)
		(* RICEZIONE DATI PAGINA SE DEFINITA LUNGHEZZA                        *)
		(* ------------------------------------------------------------------ *)
		(* LBf[0]: Usato come appoggio (Anche in gestione ricezione)          *)
		(* LBf[1]: Usato come appoggio (Anche in gestione ricezione)          *)
		(* LBf[2]: Dimensione dati ricevuti                                   *)
		(* LBf[3]: Dimensione pagina acquisita da Rx                          *)
		(* LBf[4]: Non utilizzato                                             *)
		(* ------------------------------------------------------------------ *)
		(* Inizializzo ricezione dati pagina. *)

		120:
		PLength:=0; (* Received page length *)
		CaseNr:=CaseNr+1; (* Case gestione *)

		(* Eseguo spionaggio. *)

		IF (SBPtr <> NULL) THEN
			i:=SysVarsnprintf(SBPtr, SBSize, 'Start Rx page, length:%d', UDINT_TYPE, ADR(LBf[3]));
			i:=SysSpyData(SPY_ASCII, 16#08000000, ADR('Lg'), SBPtr);
		END_IF;

		(* ---------------------------[Case ripetitivo di ricezione pagina]-- *)
		(* Calcolo lunghezza dati ricevuti. *)

		121:
		LBf[2]:=Sysstrlen(DBPtr); (* Dimensione dati ricevuti *)
		IF (LBf[2] = 0) THEN RETURN; END_IF;
		CaseBk:=CaseNr+1; (* Case back *)
		CaseNr:=200; (* Trasferimento dati ricevuti *)

		(* Eseguo spionaggio. *)

		IF (SBPtr <> NULL) THEN
			i:=SysVarsnprintf(SBPtr, SBSize, 'Received [%d]', UDINT_TYPE, ADR(LBf[2]));
			i:=SysLWVarsnprintf(SBPtr, SBSize, ' "%.20s"', STRING_TYPE, DBPtr+LBf[2]-20);
			i:=SysSpyData(SPY_ASCII, 16#08000000, ADR('Lg'), SBPtr);
		END_IF;

		(* ------------------------------------------------------------------ *)
		(* Se non ricevuta intera pagina continuo ricezione. *)

		122:
		i:=Sysmemmove(DBPtr, DBPtr+LBf[2], (DBSize-LBf[2])); (* Rimuovo dati ricevuti *)
		IF (PLength < LBf[3]) THEN CaseNr:=CaseNr-1; RETURN; END_IF;
		
		(* Ricevuto intera pagina controllo lunghezza. *)
	
		IF (PLength <> LBf[3]) THEN ErrorNr:=10054220; RETURN; END_IF;
		CaseNr:=250; (* Case fine ricezione pagina *)

		(* ------------------------------------------------------------------ *)
		(* RICEZIONE DATI CHUNK                                               *)
		(* ------------------------------------------------------------------ *)
		(* LBf[0]: Usato come appoggio (Anche in gestione ricezione)          *)
		(* LBf[1]: Usato come appoggio (Anche in gestione ricezione)          *)
		(* LBf[2]: Dimensione dati ricevuti                                   *)
		(* LBf[3]: Dimensione chunk acquisito da Rx                           *)
		(* LBf[4]: Chunk RxD, incrementato su ricezione parti di un chunk     *)
		(* ------------------------------------------------------------------ *)
		(* Inizializzo ricezione dati chunked. *)

		150:
		LBf[3]:=0; (* Dimensione pagina o chunk acquisita da Rx *)
		LBf[4]:=0; (* Chunk RxD, incrementato su ricezione parti di un chunk *)
		PLength:=0; (* Received page length *)
		CaseNr:=CaseNr+1; (* Case fine ricezione pagina *)

		(* Eseguo spionaggio. *)

		IF (SBPtr <> NULL) THEN
			i:=SysSpyData(SPY_ASCII, 16#08000000, ADR('Lg'), ADR('Start Rx page, chunked page'));
		END_IF;

		(* ----------------------------------[Acquisizione lunghezza chunk]-- *)
		(* Se non è definita dimensione chunk (LBf[3] = 0), in testa ai dati *)
		(* vi è la dimensione del chunk. *)

		151:
		IF (LBf[3] <> 0) THEN CaseNr:=152; RETURN; END_IF;
		LBf[4]:=0; (* Chunk RxD, incrementato su ricezione parti di un chunk *)
		
		(* Controllo se ricevuti '<CR><LF>' delimitazione lunghezza chunk. *)
		
		Ptr:=SysStrFind(DBPtr, ADR('$r$n'), FIND_GET_END);
		IF (Ptr = NULL) THEN RETURN; END_IF;
		IF NOT(SysVarsscanf(DBPtr, '%x', UDINT_TYPE, ADR(LBf[3]))) THEN ErrorNr:=10054300; RETURN; END_IF;

		(* Eseguo rimozione dati ricevuti da buffer dati, dopo dimensione chunk *)
		(* vi è '<CR><LF>'. Dopo questo case non può che esserci un case con dati *)
		(* ormai ho letto lunghezza del chunk. *)

		LBf[0]:=Ptr-DBPtr; (* String length *)
		i:=Sysmemmove(DBPtr, Ptr, (DBSize-LBf[0])); (* Rimuovo dati ricevuti *)

		(* Se ultimo chunk, ricevuto intera pagina. *)

		IF (LBf[3] = 0) THEN CaseNr:=250; RETURN; END_IF;

		(* Eseguo spionaggio. *)

		IF (SBPtr <> NULL) THEN
			i:=SysVarsnprintf(SBPtr, SBSize, 'RxD chunk length:%d', UDINT_TYPE, ADR(LBf[3]));
			i:=SysSpyData(SPY_ASCII, 16#08000000, ADR('Lg'), SBPtr);
		END_IF;
		CaseNr:=CaseNr+1; (* Case fine ricezione pagina *)

		(* ------------------------[Ricezione pacchetto di soli dati chunk]-- *)
		(* Se lunghezza dati ricevuti minore o uguale a dimensione chunk, il *)
		(* pacchetto ricevuto contiene solo i dati di chunk. In questo caso *)
		(* continuo ad eseguire questo case per ricevere tutti i chunks. *)

		152:
		LBf[2]:=Sysstrlen(DBPtr); (* Dimensione dati ricevuti *)
		IF (LBf[2] > (LBf[3]-LBf[4])) THEN CaseNr:=155; RETURN; END_IF;
		CaseBk:=CaseNr+1; (* Case back *)
		CaseNr:=200; (* Trasferimento dati ricevuti *)

		(* Eseguo spionaggio. *)

		IF (SBPtr <> NULL) THEN
			i:=SysVarsnprintf(SBPtr, SBSize, 'RxD chunk [A:%d]', UDINT_TYPE, ADR(LBf[2]));
			i:=SysLWVarsnprintf(SBPtr, SBSize, ' "%.20s"', STRING_TYPE, DBPtr+LBf[2]-20);
			i:=SysSpyData(SPY_ASCII, 16#08000000, ADR('Lg'), SBPtr);
		END_IF;

		(* ------------------------------------------------------------------ *)
		(* Incremento variabili gestione, eseguo loop su case precedente. *)

		153:
		LBf[4]:=LBf[4]+LBf[2]; (* Chunk RxD *)
		i:=Sysmemmove(DBPtr, DBPtr+LBf[2], DBSize-LBf[2]); (* Sposto dati ricevuti *)
		CaseNr:=152; (* Trasferimento dati ricevuti *)

		(* ------------------[Ricezione pacchetto dati chunk e nuovo chunk]-- *)
		(* Se vi sono più dati di quanti ne servono per terminare ricezione *)
		(* del chunk, acquisisco dati di chunk e ne termino la ricezione. *)

		155:
		LBf[2]:=(LBf[3]-LBf[4]); (* Dati necessari a terminare chunk *)
		CaseBk:=CaseNr+1; (* Case back *)
		CaseNr:=200; (* Trasferimento dati ricevuti *)

		(* Eseguo spionaggio. *)

		IF (SBPtr <> NULL) THEN
			i:=SysVarsnprintf(SBPtr, SBSize, 'RxD chunk [B:%d]', UDINT_TYPE, ADR(LBf[2]));
			i:=SysLWVarsnprintf(SBPtr, SBSize, ' "%.20s"', STRING_TYPE, DBPtr+LBf[2]-20);
			i:=SysSpyData(SPY_ASCII, 16#08000000, ADR('Lg'), SBPtr);
		END_IF;

		(* ------------------------------------------------------------------ *)
		(* Eseguo incremento variabili gestione, eseguo loop su case precedente. *)

		156:
		i:=Sysmemmove(DBPtr, DBPtr+LBf[2], DBSize-LBf[2]); (* Sposto dati ricevuti *)
		CaseNr:=CaseNr+1; (* Case gestione *)
		
		(* ------------------------------------------------------------------ *)
		(* Attendo ricezione '<CR><LF>' di terminazione dati chunk. *)
		
		157:
		Ptr:=SysStrFind(DBPtr, ADR('$r$n'), FIND_GET_END);
		IF (Ptr = NULL) THEN RETURN; END_IF;

		(* Eseguo rimozione dati ricevuti da buffer dati e mi predispongo *)
		(* per ricevere una nuova dimensione di chunk. *)

		LBf[3]:=0; (* Dimensione pagina o chunk acquisita da Rx *)
		LBf[0]:=Ptr-DBPtr; (* String length *)
		i:=Sysmemmove(DBPtr, Ptr, (DBSize-LBf[0])); (* Rimuovo dati ricevuti *)
		CaseNr:=151; (* Case gestione *)

		(* ================================================================== *)
		(* CASES TRASFERIMENTO DATI RICEVUTI                                  *)
		(* ================================================================== *)
		(* Seguono i cases di gestione trasferimento dati ricevuti in buffer  *)
		(* e nel file definiti da utente. Arrivo con:                         *)
		(* LBf[0]: Lunghezza dati ricevuti da trasferire                      *)
		(* DBPtr: Buffer dati ricevuti da trasferire                          *)
		(* ------------------------------------------------------------------ *)
		(* Eseguo controllo se nel buffer di pagina definito da programma *)
		(* utente vi è spazio per contenere i dati ricevuti. Trasferisco i *)
		(* dati ricevuti nel buffer di pagina. *)

		200:
		PLength:=PLength+LBf[2]; (* Received page length *)
		i:=Sysstrlen(PBuffer); (* Lunghezza dati già in buffer pagina *)
		IF ((PBLength-i-1) >= LBf[2]) THEN i:=Sysmemmove(PBuffer+i, DBPtr, LBf[2]); END_IF;
		IF (LEN(Filename) = 0) THEN CaseNr:=CaseBk; RETURN; END_IF;

		(* Apertura file in append. Se non esiste, viene creato. *)

		Fp:=Sysfopen(Filename, 'a'); (* File pointer *)
		IF (Fp = NULL) THEN ErrorNr:=90054110; RETURN; END_IF;

		(* Imposto posizione in cui scrivere nel file. *)

		IF (Sysfseek(Fp, Sysfilelength(Filename), ID_SEEK_SET) = EOF) THEN
			i:=Sysfclose(Fp); (* Eseguo chiusura file *) 
			ErrorNr:=90054110; (* Error number *)
			RETURN;
		END_IF;

		(* Eseguo scrittura su file. *)

		IF (Sysfwrite(DBPtr, TO_INT(LBf[2]), 1, Fp) <> TO_INT(LBf[2])) THEN
			i:=Sysfclose(Fp); (* Eseguo chiusura file *) 
			ErrorNr:=90054110; (* Error number *)
			RETURN;
		END_IF;

		(* Eseguo chiusura file. *)

		i:=Sysfclose(Fp); (* Eseguo chiusura file *) 
		CaseNr:=CaseBk; (* Case gestione *)
	
		(* ================================================================== *)
		(* CASES FINE RICEZIONE PAGINA DA SERVER HTTP                         *)
		(* ================================================================== *)
		(* Seguono i cases di gestione fine ricezione pagina.                 *)
		(* ------------------------------------------------------------------ *)
		(* Fine ricezione pagina da server HTTP, su Spy visualizzo lunghezza, *)
		(* si usa un trigger specifico e si calcola il tempo di caricamento *)
		(* per non avere ritardi con spionaggio attivo e trigger corretto. *)

		250:
		IF (SBPtr <> NULL) THEN
			i:=SysVarsnprintf(SBPtr, SBSize, 'Page length: %lu', UDINT_TYPE, ADR(PLength));
			i:=SysSpyData(SPY_ASCII, 16#10000000, ADR('Pi'), SBPtr);
		END_IF;

		(* Calcolo tempo di caricamento, lo spionaggio con corretto trigger *)
		(* non perturba il calcolo del tempo. *)

		PLTime:=TO_REAL(SysGetSysTime(TRUE)-TimeBf[1])/1000000.0; (* Page load time (S) *)
		CaseNr:=CaseNr+1; (* Case gestione *)

		(* ------------------------------------------------------------------ *)
		(* Indipendentemente dal tipo di connessione "Close" o "Keep-Alive" *)
		(* ricevuta dal server (Non è controllata) chiudo connessione client *)
		(* sul done. *)

		251:
		Ok:=TRUE; (* Page loaded *)
		Done:=TRUE; (* Execution done *)

		(* Se attivo Spy ritorno tempo caricamento pagina. *)

		IF (SBPtr <> NULL) THEN
			i:=SysVarsnprintf(SBPtr, SBSize, 'Page load time: %.3f (S)', REAL_TYPE, ADR(PLTime));
			i:=SysSpyData(SPY_ASCII, 16#10000000, ADR('Pi'), SBPtr);
		END_IF;
	END_CASE;

(* [End of file] *)
]]>
						</sourceCode>
					</functionBlock>
					<functionBlock name="RESTSendFct" version="1.0.0">
						<descr>(eLLabRESTSvcLib_A500) Sends a packet to REST service</descr>
						<vars>
							<inputVars>
								<var name="Add" type="@BYTE">
									<descr>Variable address</descr>
								</var>
								<var name="RSvID" type="@_RESTSERVICEDATA">
									<descr>REST service ID</descr>
								</var>
							</inputVars>
							<outputVars>
								<var name="Fault" type="BOOL">
									<descr>Execution error</descr>
								</var>
							</outputVars>
							<externalVars>
								<var name="SysActTaskID" type="USINT">
									<descr>Actual Task ID</descr>
								</var>
							</externalVars>
							<localVars>
								<var name="i" type="INT">
									<descr>Auxiliary variable</descr>
								</var>
								<var name="USPtr" type="@USINT">
									<descr>Auxiliary pointer (USINT)</descr>
								</var>
								<var name="Fp" type="FILEP">
									<descr>File pointer</descr>
								</var>
								<var name="Length" type="UINT">
									<descr>Lunghezza record</descr>
								</var>
								<var name="UDPtr" type="@UDINT">
									<descr>Auxiliary pointer (UDINT)</descr>
								</var>
								<var name="RsBPtr" type="@RESTSERVICEBACKUP">
									<descr>REST service backup pointer</descr>
								</var>
								<var name="UTCTime" type="UDINT">
									<descr>UTC Date/Time</descr>
								</var>
							</localVars>
						</vars>
						<iecDeclaration valid="TRUE">
							<![CDATA[]]>
						</iecDeclaration>
						<interfaces/>
						<methods/>
						<sourceCode type="ST">
							<![CDATA[(* ************************************************************************** *)
(* FUNCTION BLOCK "RESTSendFct"                                               *)
(* ************************************************************************** *)
(* Questo FB può essere trattato come una funzione, eseguito in un loop.      *)
(* Il record FIFO è salvato in binario ed ha dimensione variabile.            *)
(* I dati sono in Big endian, MSB ... LSB.                                    *)
(*                                                                            *)
(* Parametri in ingresso:                                                     *)
(* Type: Tipo record (L:Log, D:Data)                                          *)
(* Add: Indirizzo stringa da inviare                                          *)
(* RSvID: REST service ID (Passare parametro in uscita dalla "RESTSvc")       *)
(* -------------------------------------------------------------------------- *)
(* Il record FIFO è salvato in binario ed ha dimensione variabile.            *)
(* I dati sono in Big endian, MSB ... LSB.                                    *)
(* +---+---+-+-+-+-+-+-+-+...+-+                                              *)
(* | Length|0|0| Epoch | Value |                                              *)
(* +---+---+-+-+-+-+-+-+-+...+-+                                              *)
(*                                                                            *)
(* Length: Lunghezza record (2 byte)                                          *)
(* Epoch: Epoch time (4 byte)                                                 *)
(* Value: Stringa con valore (Lunghezza variabile)                            *)
(* -------------------------------------------------------------------------- *)
(* Esempio di utilizzo pointer "RSvID"                                        *)
(* RsBPtr:=@RSvID.RESTSvBck; @RsBPtr.FIFOIn:=0; Punta al contenuto            *)
(* -------------------------------------------------------------------------- *)

	(* ---------------------------------------------------------------------- *)
	(* INIZIALIZZAZIONI                                                       *)
	(* ---------------------------------------------------------------------- *)
    (* Eseguo controllo se "RSvID" definito, deve essere passato indirizzo *)
    (* struttura "_RESTSERVICEDATA" in uscita da FB "RESTSvc". *) 

	Fault:=FALSE; (* Execution error *)
	IF (SysActTaskID = ID_TASK_FAST) THEN Fault:=TRUE; i:=SysSetLastError(10058020); RETURN; END_IF;
    IF (TO_UDINT(RSvID) = NULL) THEN Fault:=TRUE; i:=SysSetLastError(10058030); RETURN; END_IF;
    IF (@RSvID.UniqueID <> 1442275200) THEN Fault:=TRUE; i:=SysSetLastError(10058040); RETURN; END_IF;

	(* Se non definito indirizzo esco. viene usato per poter  effettuare *)
	(* una chiamata che imposta il valore di "RSvID". Il valore impostato è *)
	(* poi valido per tutte le successive esecuzioni della funzione. *)

	IF (Add = NULL) THEN RETURN; END_IF;

	(* ---------------------------------------------------------------------- *)
	(* MEMORIZZAZIONE STRINGA REST NEL FILE                                   *)
	(* ---------------------------------------------------------------------- *)
	(* Calcolo lunghezza record. *)

	USPtr:=Add; (* Auxiliary pointer *)
	FOR Length:=0 TO (@RSvID.BLength-8) DO IF (@USPtr = 0) THEN EXIT; END_IF; USPtr:=USPtr+1; END_FOR;
	IF (Length = (@RSvID.BLength-8)) THEN Fault:=TRUE; i:=SysSetLastError(10058100); END_IF;
	Length:=Length+8; (* Aggiungo lunghezza header *)

	(* Controllo se spazio in FIFO per contenere record. Occorre controllare *)
	(* uguaglianza per evitare che FIFOIn diventi uguale a FIFOOut. *)

	RsBPtr:=@RSvID.RESTSvBck; (* REST service backup pointer *)
	IF (Length >= _GetFIFOSpace(@RsBPtr.FIFOIn, @RsBPtr.FIFOOut, @RSvID.FIFOSize)) THEN Fault:=TRUE; i:=SysSetLastError(10058110); RETURN; END_IF;

	(* Apertura file in append. Se non esiste, viene creato. *)

	Fp:=Sysfopen(@RSvID.FIFOFile, 'a'); (* File pointer *)
	IF (Fp = NULL) THEN Fault:=TRUE; i:=SysSetLastError(10058200); RETURN; END_IF;

	(* Controllo se non c'è spazio nel file FIFO. Occorre controllare *)
	(* uguaglianza per evitare che FIFOIn diventi uguale a FIFOSize. *)
	(* Sommo 2 alla lunghezza per lo spazio del 16#FFFF. *)

	IF ((@RSvID.FIFOSize-@RsBPtr.FIFOIn) <= (Length+2)) THEN

		(* Occupo tutto lo spazio disponibile allocando un Length fittizio *)
		(* con valore 16#FFFF. Il valore indica roll over del FIFO. *)

		IF (Sysfseek(Fp, TO_DINT(@RsBPtr.FIFOIn), ID_SEEK_SET) = EOF) THEN Fault:=TRUE; i:=Sysfclose(Fp); i:=SysSetLastError(10058201); RETURN; END_IF;
		i:=Sysfputc(TO_INT(16#FF), Fp); (* MSB Length *)
		i:=Sysfputc(TO_INT(16#FF), Fp); (* LSB Length *)
		@RsBPtr.FIFOIn:=0; (* FIFO data In index *)
	END_IF;

	(* Controllo se spazio in FIFO per contenere record. Occorre controllare *)
	(* uguaglianza per evitare che FIFOIn diventi uguale a FIFOOut. *)
	
	IF (Length >= _GetFIFOSpace(@RsBPtr.FIFOIn, @RsBPtr.FIFOOut, @RSvID.FIFOSize)) THEN Fault:=TRUE; i:=Sysfclose(Fp); i:=SysSetLastError(10058202); RETURN; END_IF;

	(* Imposto posizione in cui scrivere nel file. *)

	IF (Sysfseek(Fp, TO_DINT(@RsBPtr.FIFOIn), ID_SEEK_SET) = EOF) THEN i:=Sysfclose(Fp); Fault:=TRUE; i:=SysSetLastError(10058203); RETURN; END_IF;

	(* Scrivo header record in file. *)

	i:=Sysfputc(TO_INT(Length/256), Fp); (* MSB Length *)
	i:=Sysfputc(TO_INT(Length AND 255), Fp); (* LSB Length *)

	i:=Sysfputc(TO_INT(0), Fp);
	i:=Sysfputc(TO_INT(0), Fp);
	
	UTCTime:=SysGetUTCDateTime(TRUE); (* UTC Date/Time *)
	i:=Sysfputc(TO_INT(UTCTime/16777216), Fp); (* MSB SysDateTime *)
	i:=Sysfputc(TO_INT(UTCTime/65536), Fp);
	i:=Sysfputc(TO_INT(UTCTime/256), Fp);
	i:=Sysfputc(TO_INT(UTCTime AND 255), Fp); (* LSB SysDateTime *)

	(* Scrivo valore record file. *)

	IF (Sysfwrite(Add, TO_INT(Length-8), 1, Fp) <> TO_INT(Length-8)) THEN Fault:=TRUE; i:=Sysfclose(Fp); i:=SysSetLastError(10058204); RETURN; END_IF;
	RsBPtr:=@RSvID.RESTSvBck; (* Indirizzo FIFO dati scritti *)
	@RsBPtr.FIFOIn:=@RsBPtr.FIFOIn+Length; (* Numero dati scritti *)
	i:=Sysfclose(Fp); (* Eseguo chiusura file *) 

(* [End of file] *)
]]>
						</sourceCode>
					</functionBlock>
					<functionBlock name="RESTWSvcClient" version="1.0.0">
						<descr>(eLLabRESTSvcLib_A500) Manages the REST web service client</descr>
						<vars>
							<inputVars>
								<var name="Enable" type="BOOL">
									<descr>FB Enable</descr>
								</var>
								<var name="SvcAck" type="BOOL">
									<descr>REST service acknowledge</descr>
								</var>
								<var name="SpyOn" type="BOOL">
									<descr>Spy On</descr>
								</var>
								<var name="RPAck" type="USINT">
									<descr>REST parameters acknowledge</descr>
								</var>
								<var name="HBitTime" type="UINT">
									<descr>Heartbeat time (S)</descr>
								</var>
								<var name="FIFOFile" type="STRING" length="32">
									<descr>Path and name of FIFO file</descr>
								</var>
								<var name="FIFOSize" type="UDINT">
									<descr>FIFO file size</descr>
								</var>
								<var name="RESTSvBck" type="@RESTSERVICEBACKUP">
									<descr>REST service backup pointer</descr>
								</var>
								<var name="HostAddress" type="@USINT">
									<descr>Host address</descr>
								</var>
								<var name="HostName" type="@USINT">
									<descr>Hostname</descr>
								</var>
								<var name="HostPort" type="UINT">
									<descr>Host port</descr>
								</var>
								<var name="BLength" type="UDINT">
									<descr>REST Request/Answer buffers length</descr>
								</var>
								<var name="Page" type="@USINT">
									<descr>Page to request</descr>
								</var>
							</inputVars>
							<outputVars>
								<var name="Enabled" type="BOOL">
									<descr>FB enabled</descr>
								</var>
								<var name="RSvcOn" type="BOOL">
									<descr>REST service active</descr>
								</var>
								<var name="SvcOk" type="BOOL">
									<descr>Ok answer from REST service</descr>
								</var>
								<var name="Fault" type="BOOL">
									<descr>Execution error</descr>
								</var>
								<var name="RPCount" type="USINT">
									<descr>REST parameters received</descr>
								</var>
								<var name="RSvID" type="@RESTSERVICEBACKUP">
									<descr>REST service ID</descr>
								</var>
								<var name="FSpace" type="UDINT">
									<descr>File free space</descr>
								</var>
								<var name="PBuffer" type="@USINT">
									<descr>Pointer buffer pagina REST ricevuta (RMAlloc)</descr>
								</var>
								<var name="PktsOk" type="UDINT">
									<descr>REST packets Ok</descr>
								</var>
								<var name="Resyncs" type="UDINT">
									<descr>REST resyncronizations</descr>
								</var>
								<var name="Errors" type="UDINT">
									<descr>Service errors</descr>
								</var>
							</outputVars>
							<externalVars>
								<var name="SysActTaskID" type="USINT">
									<descr>Task ID</descr>
								</var>
								<var name="SysUniqueID" type="UDINT">
									<descr>System unique ID</descr>
								</var>
							</externalVars>
							<localVars>
								<var name="ABuffer" type="@USINT">
									<descr>Pointer buffer ausiliario (RMAlloc)</descr>
								</var>
								<var name="CaseNr" type="USINT">
									<descr>Case gestione programma</descr>
								</var>
								<var name="ErrorNr" type="UDINT">
									<descr>Error number</descr>
								</var>
								<var name="FLength" type="DINT">
									<descr>File length</descr>
								</var>
								<var name="Fp" type="FILEP">
									<descr>File pointer</descr>
								</var>
								<var name="HTTPClient" type="_HTTPGetPage">
									<descr>HTTP client</descr>
								</var>
								<var name="i" type="INT">
									<descr>Auxiliary counter</descr>
								</var>
								<var name="j" type="UDINT">
									<descr>Auxiliary variable</descr>
								</var>
								<var name="Length" type="UINT">
									<descr>Lunghezza Record FIFO/Messaggio REST</descr>
								</var>
								<var name="MID" type="UINT" dim0="2">
									<descr>REST service message ID</descr>
								</var>
								<var name="MLength" type="UDINT">
									<descr>REST request message length</descr>
								</var>
								<var name="Ptr" type="@USINT" dim0="2">
									<descr>Auxiliary pointer</descr>
								</var>
								<var name="RBuffer" type="@USINT">
									<descr>Pointer buffer richiesta REST (RMAlloc)</descr>
								</var>
								<var name="RSv" type="_RESTSERVICEDATA">
									<descr>REST service data</descr>
								</var>
								<var name="TimeBf" type="UDINT" dim0="3">
									<descr>Time buffer (uS)</descr>
								</var>
								<var name="Type" type="USINT">
									<descr>Tipo variabile in record FIFO</descr>
								</var>
							</localVars>
							<localConsts>
								<const name="HexToAscii" type="BYTE" dim0="16">
									<descr>Hex to ascii conversion</descr>
									<initValue>[16#30,16#31,16#32,16#33,16#34,16#35,16#36,16#37,16#38,16#39,16#41,16#42,16#43,16#44,16#45,16#46]</initValue>
								</const>
							</localConsts>
						</vars>
						<iecDeclaration valid="TRUE">
							<![CDATA[]]>
						</iecDeclaration>
						<interfaces/>
						<methods/>
						<sourceCode type="ST">
							<![CDATA[(* ************************************************************************** *)
(* FUNCTION BLOCK "RESTWSvcClient"                                            *)
(* ************************************************************************** *)
(* Questa function block esegue la connessione al servizio REST sul web.      *)
(*                                                                            *)
(* Parametri in ingresso:                                                     *)
(* Enable: Abilitazione FB                                                    *)
(* SvcAck: Acknowledge ricezione da servizio REST                             *)
(* SpyOn: Attiva spionaggio dati                                              *)
(* RPAck: Numero parametri ricevuti                                           *)
(* HBitTime: Tempo invio heartbeat al server (S)                              *)
(* FIFOFile: Percorso e nome di file di appoggio FIFO                         *)
(* FIFOSize: Dimensione in byte del file di appoggio FIFO                     *)
(* RESTSvBck: Indirizzo allocazione struttura dati "RESTSERVICEBACKUP"        *)
(* HostAddress: Address/URL host a cui connettersi                            *)
(* HostName: Nome host a cui connettersi                                      *)
(* Port: Numero di porta a cui connettersi                                    *)
(* BLength: Dimensione buffers richiesta e risposta REST                      *)
(* Page: Pagina del servizio REST                                             *)
(*                                                                            *)
(* Parametri in uscita:                                                       *)
(* Enabled: Servizio abilitato                                                *)
(* RSvcOn: Servizio REST attivo                                               *)
(* SvcOk: Ok ricezione da servizio REST                                       *)
(* Fault: Errore esecuzione (One shot)                                        *)
(* RPCount: Numero parametri ricevuti                                         *)
(* RSvID: ID del servizio di gestione REST da passare alle FB connesse        *)
(* FSpace: Byte liberi nel file di appoggio FIFO                              *)
(* PBuffer: Pointer buffer pagina REST ricevuta (RMAlloc)                     *)
(* PktsOk: REST packets Ok                                                    *)
(* Resyncs: REST resyncronizations                                            *)
(* Errors: Service errors                                                     *)
(* -------------------------------------------------------------------------- *)
(* Il record FIFO è salvato in binario ed ha dimensione variabile.            *)
(* I dati sono in Big endian, MSB ... LSB.                                    *)
(* +---+---+-+-+-+-+-+-+-+...+-+                                              *)
(* | Length|0|0| Epoch | Value |                                              *)
(* +---+---+-+-+-+-+-+-+-+...+-+                                              *)
(*                                                                            *)
(* Length: Lunghezza record (2 byte)                                          *)
(* Epoch: Epoch time (4 byte)                                                 *)
(* Value: Stringa con valore (Lunghezza variabile)                            *)
(* -------------------------------------------------------------------------- *)
(* TimeBf[0]: Timeout esecuzione sequenze                                     *)
(* TimeBf[1]: Controllo servizio REST attivo                                  *)
(* TimeBf[2]: Pausa invio heartbeat servizio REST                             *)
(* -------------------------------------------------------------------------- *)
(* Esempio di utilizzo pointer "RESTSvBck"                                    *)
(* @RESTSvBck.FIFOOut:=0; Punta al contenuto                                  *)
(* -------------------------------------------------------------------------- *)

    (* ---------------------------------------------------------------------- *)
    (* INIZIALIZZAZIONE                                                       *)
    (* ---------------------------------------------------------------------- *)
    (* Definizione unique ID, funzioni connesse controllano identificativo. *)
    (* Epoch time 15/09/2015 00:00:00 (http://www.unixtimestamp.com/). *)

    RSv.UniqueID:=1442275200; (* Unique ID *)
    RSvID:=ADR(RSv); (* REST service ID *)
	Fault:=FALSE; (* Errore esecuzione *)

	(* Eseguo Spy per averlo attivo da Telnet. *)

	IF (SpyOn) THEN i:=SysSpyData(0, 0, 0, 0); END_IF;

	(* ---------------------------------------------------------------------- *)
	(* ESEGUO FB DIPENDENTI                                                   *)
	(* ---------------------------------------------------------------------- *)
	(* Eseguo richiesta HTTP, passo parametri prima della richiesta perchè *)
	(* possono cambiare On-fly. *)

	HTTPClient.SpyOn:=SpyOn; (* Spy On *)
	HTTPClient.Request:=RBuffer; (* Buffer richiesta *)
	HTTPClient.PBuffer:=PBuffer; (* Buffer pagina ricevuta *)
	HTTPClient.PBLength:=BLength; (* Lunghezza buffer pagina *)
	HTTPClient(); (* Esecuzione client HTTP *)

	(* Controllo se errore esecuzione richiesta HTTP. *)

	IF (HTTPClient.Fault) THEN ErrorNr:=10057050; END_IF;

	(* ---------------------------------------------------------------------- *)
	(* ESEGUO DISABILITAZIONE SERVIZIO                                        *)
	(* ---------------------------------------------------------------------- *)
	(* Eseguo disabilitazione servizio, libero risorse. *)

	IF NOT(Enable) THEN
		IF NOT(Enabled) THEN RETURN; END_IF;
		IF (TO_UDINT(ABuffer) <> NULL) THEN i:=SysRMFree(ADR(ABuffer)); END_IF;
		IF (TO_UDINT(RBuffer) <> NULL) THEN i:=SysRMFree(ADR(RBuffer)); END_IF;
		IF (TO_UDINT(PBuffer) <> NULL) THEN i:=SysRMFree(ADR(PBuffer)); END_IF;

		HTTPClient.Enable:=FALSE; (* Abilitazione richiesta HTTP *)
		SvcOk:=FALSE; (* Ok answer from REST service *)
		PktsOk:=0; (* REST packets Ok *)
		Resyncs:=0; (* REST resyncronizations *)
		Errors:=0; (* Service errors *)
		Enabled:=FALSE; (* FB enabled *)
		RETURN;
	END_IF;

	(* ---------------------------------------------------------------------- *)
	(* ESEGUO ABILITAZIONE SERVIZIO                                           *)
	(* ---------------------------------------------------------------------- *)
	(* Eseguo abilitazione servizio. *)

	IF NOT(Enabled) THEN
		IF (SysActTaskID <> ID_TASK_BACK) THEN Fault:=TRUE; i:=SysSetLastError(10057020); RETURN; END_IF;
		IF (TO_UDINT(RESTSvBck) = NULL) THEN Fault:=TRUE; i:=SysSetLastError(10057030); RETURN; END_IF;
		Enabled:=TRUE; (* FB enabled *)

		(* Eseguo configurazione protocollo HTTP. *)

		HTTPClient.HostAddress:=HostAddress; (* HTTP host address *)
		HTTPClient.HostName:=HostName; (* HTTP host name *)
		HTTPClient.HostPort:=HostPort; (* Porta a cui connettersi *)
		HTTPClient.Page:=Page; (* Page to request *)
		HTTPClient.Timeout:=30000; (* Timeout (mS) *)

		(* Verifico se puntatori compatibili con lunghezza file. *)

		FLength:=Sysfilelength(FIFOFile); (* File length *)
		IF (FLength <> -1) THEN
			IF (@RESTSvBck.FIFOIn >= TO_UDINT(FLength)) THEN i:=Sysremove(FIFOFile); FLength:=-1; END_IF;
			IF (@RESTSvBck.FIFOOut >= TO_UDINT(FLength)) THEN i:=Sysremove(FIFOFile); FLength:=-1; END_IF;
		END_IF;

		(* Se file non presente e/o errore indici azzero indici. *)

		IF (FLength = -1) THEN @RESTSvBck.FIFOIn:=0; @RESTSvBck.FIFOOut:=0; END_IF;

		(* Eseguo valorizzazione dati in struttura. *)

		RSv.FIFOFile:=FIFOFile; (* Path and name of file where to log *)
		RSv.FIFOSize:=FIFOSize; (* FIFO file size *)
		RSv.BLength:=BLength; (* REST Request/Answer buffers length *)
		RSv.RESTSvBck:=TO_UDINT(RESTSvBck); (* REST service backup pointer *)

		(* Inizializzo variabili. *)

		TimeBf[0]:=SysGetSysTime(TRUE); (* Time buffer (uS) *)
		TimeBf[1]:=SysGetSysTime(TRUE); (* Time buffer (uS) *)
		TimeBf[2]:=SysGetSysTime(TRUE); (* Time buffer (uS) *)
		CaseNr:=0; (* Case gestione programma *)
	END_IF;

	(* ---------------------------------------------------------------------- *)
	(* CONTROLLO ERRORE ESECUZIONE                                            *)
	(* ---------------------------------------------------------------------- *)
	(* Se errore esecuzione libero risorse. *)

	IF (ErrorNr <> 0) THEN
		IF (TO_UDINT(ABuffer) <> NULL) THEN i:=SysRMFree(ADR(ABuffer)); END_IF;
		IF (TO_UDINT(RBuffer) <> NULL) THEN i:=SysRMFree(ADR(RBuffer)); END_IF;
		IF (TO_UDINT(PBuffer) <> NULL) THEN i:=SysRMFree(ADR(PBuffer)); END_IF;
		HTTPClient.Enable:=FALSE; (* Abilitazione richiesta HTTP *)
		SvcOk:=FALSE; (* Ok answer from REST service *)

		(* Attendo Spy libero e lo eseguo. *)

		IF (SpyOn) THEN
			IF NOT(SysSpyData(0, 0, 0, 0)) THEN RETURN; END_IF;
			IF NOT(SysRMAlloc(64, ADR(ABuffer))) THEN RETURN; END_IF;
			i:=TO_UINT(SysVarsnprintf(ABuffer, 32, 'LastError:%08d', UDINT_TYPE, ADR(ErrorNr)));
			i:=SysSpyData(SPY_ASCII, 16#40000000, ADR('Er'), ABuffer);
			i:=SysRMFree(ADR(ABuffer)); (* Free buffer ausiliario *)
		END_IF;

		(* Set error code ed impulso di "Fault". *)

        i:=SysSetLastError(ErrorNr); (* Set error code *)
		Errors:=Errors+1; (* Service errors *)
		Fault:=TRUE; (* Execution fault*)
		ErrorNr:=0; (* Error number *)

		(* Utilizzo TimeBf[2] per temporizzazione random. *)

		TimeBf[2]:=SysGetSysTime(TRUE); (* Time buffer (uS) *)
		j:=TO_UDINT(SysGetRandom(TRUE)*TO_REAL(HBitTime*1000000)); (* Auxiliary variable *)
		CaseNr:=1; (* Case gestione programma *)
		RETURN;
	END_IF;

	(* ---------------------------------------------------------------------- *)
	(* GESTIONE FINE RICHIESTA                                                *)
	(* ---------------------------------------------------------------------- *)
	(* Se Ok ricezione da servizio REST, disabilito HTTP ed attendo Ack. *)

	IF (SvcOk) THEN
		HTTPClient.Enable:=FALSE; (* Abilitazione richiesta HTTP *)

		(* Su Ack disalloco memoria di pagina. *)

		IF NOT(SvcAck) THEN RETURN; END_IF;
		i:=SysRMFree(ADR(PBuffer)); (* Disalloco memoria di pagina *)
		SvcOk:=FALSE; (* Ok answer from REST service *)
		CaseNr:=0; (* Case gestione programma *)
	END_IF;

	(* ---------------------------------------------------------------------- *)
	(* CALCOLO SPAZIO IN FILE FIFO                                            *)
	(* ---------------------------------------------------------------------- *)
	(* Calcolo spazio libero (Dimensione-Dati scritti). *)

 	FSpace:=_GetFIFOSpace(@RESTSvBck.FIFOIn, @RESTSvBck.FIFOOut, FIFOSize); (* File free space *)

	(* ---------------------------------------------------------------------- *)
	(* GESTIONE TIMEOUT SEQUENZE                                              *)
	(* ---------------------------------------------------------------------- *)
	(* Eseguo controllo timeout sequenze, il tempo è predefinito. Controllo *)
	(* anche "Case=1" per inizializzare tempo su fault. *)

	IF ((CaseNr = 0) OR (CaseNr = 1)) THEN TimeBf[0]:=SysGetSysTime(TRUE); END_IF;
	IF ((SysGetSysTime(TRUE)-TimeBf[0]) > 30000000) THEN Fault:=TRUE; RETURN; END_IF;

	(* Controllo se servizio REST attivo, se non ho un heartbeat dopo 3 volte *)
	(* il tempo di "HBitTime" disattivo servizio attivo. *)

	IF ((SysGetSysTime(TRUE)-TimeBf[1]) > (TO_UDINT(HBitTime*3)*1000000)) THEN RSvcOn:=FALSE; END_IF;

	(* ---------------------------------------------------------------------- *)
	(* ESEGUO GESTIONE SEQUENZE PROGRAMMA                                     *)
	(* ---------------------------------------------------------------------- *)
	(* Gestione sequenze programma. *)

	CASE (CaseNr) OF

		(* ------------------------------------------------------------------ *)
		(* GESTIONE COMANDI                                                   *)
		(* ------------------------------------------------------------------ *)
		(* Controllo se records in file FIFO. *)	

		0:
		IF (@RESTSvBck.FIFOIn <> @RESTSvBck.FIFOOut) THEN CaseNr:=100; RETURN; END_IF;

		(* Su ogni comunicazione corretta si inizializza "TimeBf[2]". Se non vi *)
		(* sono comunicazioni ogni tempo stabilito invio heartbeat. *)

		IF ((SysGetSysTime(TRUE)-TimeBf[2]) > (TO_UDINT(HBitTime)*1000000)) THEN CaseNr:=110; END_IF;

		(* ------------------------------------------------------------------ *)
		(* TEMPORIZZAZIONE SU FAULT                                           *)
		(* ------------------------------------------------------------------ *)
		(* Per evitare di ripetere continuamente invio REST in caso di errore *)
		(* bloccandomi in errore magari su una allocazione di memoria eseguo *)
		(* una temporizzazione random di attesa. *)

		1:		
		IF ((SysGetSysTime(TRUE)-TimeBf[2]) < j) THEN RETURN; END_IF;
		TimeBf[2]:=SysGetSysTime(TRUE); (* Time buffer (uS) *)
		CaseNr:=0; (* Case gestione programma *)

		(* ------------------------------------------------------------------ *)
		(* ESEGUO LETTURA RECORD FIFO                                         *)
		(* ------------------------------------------------------------------ *)
		(* Eseguo apertura file FIFO. *)

		100:
		Fp:=Sysfopen(FIFOFile, 'r'); (* Apertura file in lettura *)
		IF (Fp = NULL) THEN ErrorNr:=10057100; RETURN; END_IF;

		(* Eseguo lettura "Length" da FIFO. *)

		IF (Sysfseek(Fp, TO_DINT(@RESTSvBck.FIFOOut), ID_SEEK_SET) = EOF) THEN i:=Sysfclose(Fp); ErrorNr:=10057101; RETURN; END_IF;
		IF (Sysfread(ADR(Length), 2, 1, Fp) <> 2) THEN i:=Sysfclose(Fp); ErrorNr:=10057102; RETURN; END_IF;

		(* Eseguo controllo se flag di roll over FIFO. *)

		IF (Length = 16#FFFF) THEN
			@RESTSvBck.FIFOOut:=0; (* FIFO data out index *)
			IF (Sysfseek(Fp, TO_DINT(@RESTSvBck.FIFOOut), ID_SEEK_SET) = EOF) THEN i:=Sysfclose(Fp); ErrorNr:=10057103; RETURN; END_IF;
			IF (Sysfread(ADR(Length), 2, 1, Fp) <> 2) THEN i:=Sysfclose(Fp); ErrorNr:=10057104; RETURN; END_IF;
		END_IF;

		(* Eseguo swap valore "Length" lunghezza record. *)

		i:=Sysfclose(Fp); (* Eseguo chiusura file *) 
		Length:=ROL(Length, 8); (* Lunghezza record FIFO *)
		CaseNr:=CaseNr+1; (* Case gestione programma *)

		(* Eseguo controllo lunghezza record se errore azzero indici FIFO. *)

		IF ((Length = 0) OR (Length > BLength)) THEN
			@RESTSvBck.FIFOIn:=0; (* FIFO data In index *)
			@RESTSvBck.FIFOOut:=0; (* FIFO data out index *)
		 	ErrorNr:=10057110; (* Error number *)
		 	RETURN;
		END_IF;

		(* ------------------------------------------------------------------ *)
		(* Eseguo allocazione buffer memoria per lettura record FIFO. *)

		101:
		IF NOT(SysRMAlloc(Length, ADR(ABuffer))) THEN RETURN; END_IF;
		Fp:=Sysfopen(FIFOFile, 'r'); (* Apertura file in lettura *)
		IF (Fp = NULL) THEN ErrorNr:=10057105; RETURN; END_IF;

		(* Eseguo lettura record FIFO. *)

		IF (Sysfseek(Fp, TO_DINT(@RESTSvBck.FIFOOut), ID_SEEK_SET) = EOF) THEN i:=Sysfclose(Fp); ErrorNr:=10057106; RETURN; END_IF;
		IF (Sysfread(ABuffer, TO_INT(Length), 1, Fp) <> TO_INT(Length)) THEN i:=Sysfclose(Fp); ErrorNr:=10057107; RETURN; END_IF;
		i:=Sysfclose(Fp); (* Eseguo chiusura file *)
		CaseNr:=CaseNr+1; (* Case gestione programma *)

		(* ------------------------------------------------------------------ *)
		(* ESEGUO COMPILAZIONE MESSAGGIO REST                                 *)
		(* ------------------------------------------------------------------ *)
		(* Il messaggio REST è così composto.                                 *)
		(* +-----------+------------+----------+----------+----------------+  *)
		(* |MID=(Max 5)|UID=(Max 10)|MV=(Max 3)|RP=(Max 3)|Data=(Variabile)|  *)
		(* +-----------+------------+----------+----------+----------------+  *)
		(*                                                                    *)
		(* MID: (Message ID) Identificativo messaggio                         *)
		(* UID: (Unit ID) Identificativo sistema                              *)
		(* MV: (Message version) Versione messaggio                           *)
		(* RP: (REST parameters) Numero parametri ricevuti con pagina REST    *)
		(* Data: Copia record FIFO (Header viene convertito in ascii)         *)
		(* ------------------------------------------------------------------ *)
		(* Lunghezza messaggio 9+14+6+(Header*2)+(Length-Header)+(Tappo) *)

		102:
		MLength:=9+(1+14)+(1+6)+(1+6)+(1+6)+(8*2)+(Length-8)+1; (* REST request message length *)
		IF (MLength > BLength) THEN
			@RESTSvBck.FIFOOut:=@RESTSvBck.FIFOOut+Length; (* FIFO data out index *)
			ErrorNr:=10057200; (* Error number *)
			RETURN;
		END_IF;

		(* Eseguo allocazione memoria. *)

		IF NOT(SysRMAlloc(MLength, ADR(RBuffer))) THEN RETURN; END_IF;
		@RBuffer:=0; (* Inizializzo buffer con codice tappo *)

		(* Compilazione messaggio, i campi sono uniti con '&' ($26). *)

		i:=SysLWVarsnprintf(RBuffer, MLength, 'MID=%d', UINT_TYPE, ADR(MID[0]));
		i:=SysLWVarsnprintf(RBuffer, MLength, '$26UID=%ld', UDINT_TYPE, ADR(SysUniqueID));
		i:=SysLWVarsnprintf(RBuffer, MLength, '$26MV=1.0$26RP=%d$26Data=', USINT_TYPE, ADR(RPAck));

		(* Eseguo conversione header record FIFO (8 bytes) in ascii. *)
		(* Il risultato della conversione sono tutti numeri quindi non è *)
		(* necessario eseguire URL encoding. *)

		Ptr[0]:=RBuffer; (* Auxiliary pointer *)
		Ptr[1]:=ABuffer; (* Auxiliary pointer *)
		FOR j:=0 TO MLength DO IF (@Ptr[0] = 0) THEN EXIT; END_IF; Ptr[0]:=Ptr[0]+1; END_FOR;
		FOR j:=0 TO (8-1) DO
			@Ptr[0]:=HexToAscii[@Ptr[1]/16]; Ptr[0]:=Ptr[0]+1; (* Carico MSB *)
			@Ptr[0]:=HexToAscii[@Ptr[1] AND 16#0F];	Ptr[0]:=Ptr[0]+1; (* Carico LSB *)
			Ptr[1]:=Ptr[1]+1; (* Auxiliary pointer *)
		END_FOR;

		(* Aggiungo stringa valore (Sottraggo 1 perchè parto da "0"). *)

		FOR j:=0 TO (Length-8-1) DO @Ptr[0]:=@Ptr[1]; Ptr[0]:=Ptr[0]+1; Ptr[1]:=Ptr[1]+1; END_FOR;
		@Ptr[0]:=0; (* Aggiungo codice tappo *)

		(* Libero buffer ausiliario. *)

		i:=SysRMFree(ADR(ABuffer)); (* Disalloco buffer ausiliario *)
		CaseNr:=240; (* Invio richiesta REST *)

		(* ------------------------------------------------------------------ *)
		(* ESEGUO COMPILAZIONE MESSAGGIO HEARTBEAT                            *)
		(* ------------------------------------------------------------------ *)
		(* Il messaggio heartbeat è così composto.                            *)
		(* +-----------+------------+----------+----------+                   *)
		(* |MID=(Max 5)|UID=(Max 10)|MV=(Max 3)|RP=(Max 3)|                   *)
		(* +-----------+------------+----------+----------+                   *)
		(* ------------------------------------------------------------------ *)
		(* Calcolo lunghezza messaggio, aggiungo 1 byte per tappo. *)

		110:
		MLength:=13+23+1; (* REST request message length *)
		IF (MLength > BLength) THEN ErrorNr:=10057210; RETURN; END_IF;

		(* Eseguo allocazione memoria. *)

		IF NOT(SysRMAlloc(MLength, ADR(RBuffer))) THEN RETURN; END_IF;
		@RBuffer:=0; (* Inizializzo buffer con codice tappo *)

		(* Eseguo compilazione messaggio. *)

		i:=SysLWVarsnprintf(RBuffer, MLength, 'MID=%d', UINT_TYPE, ADR(MID[0]));
		i:=SysLWVarsnprintf(RBuffer, MLength, '$26UID=%ld', UDINT_TYPE, ADR(SysUniqueID));
		i:=SysLWVarsnprintf(RBuffer, MLength, '$26MV=1.0$26RP=%d', USINT_TYPE, ADR(RPAck));
		CaseNr:=250; (* Invio richiesta REST *)

		(* ------------------------------------------------------------------ *)
		(* GESTIONE COMUNICAZIONE CON REST SERVICE                            *)
		(* ------------------------------------------------------------------ *)
		(* Eseguo allocazione buffer di pagina. *)

		240, 250:
		IF NOT(SysRMAlloc(BLength, ADR(PBuffer))) THEN RETURN; END_IF;
		CaseNr:=CaseNr+1; (* Case gestione programma *)

		(* ------------------------------------------------------------------ *)
		(* Invio richiesta ed attendo risposta da Web Site. *)

		241, 251:
		HTTPClient.Enable:=TRUE; (* Abilitazione richiesta HTTP *)
		IF NOT(HTTPClient.Done) THEN RETURN; END_IF;
		HTTPClient.Enable:=FALSE; (* Abilitazione richiesta HTTP *)
		i:=SysRMFree(ADR(RBuffer)); (* Disallocazione buffer pagina *)

		(* Controllo se risposta corretta. *)

		IF NOT(HTTPClient.Ok) THEN ErrorNr:=10057300; RETURN; END_IF;
		CaseNr:=CaseNr+1; (* Case gestione programma *)

		(* ------------------------------------------------------------------ *)
		(* CONTROLLO RISPOSTA RICEVUTA                                        *)
		(* ------------------------------------------------------------------ *)
		(* La risposta ricevuta è del tipo:                                   *)
		(* +-----------+----------+----------------+                          *)
		(* |MID=(Max 5)|RP=(Max 3)|Page=(Variabile)|                          *)
		(* +-----------+----------+----------------+                          *)
		(*                                                                    *)
		(* MID: (Message ID) Identificativo messaggio (Complementato)         *)
		(* RP: (REST parameters) Numero parametri ricevuti con pagina REST    *)
		(* Page: Pagina con parametri                                         *)
		(* ------------------------------------------------------------------ *)
		(* Risposta contiene "MID" complementato (In 1a posizione). *)

		242, 252:
		IF NOT(SysVarsscanf(PBuffer, 'MID=%d', UINT_TYPE, ADR(MID[1]))) THEN ErrorNr:=10057310; RETURN; END_IF;

		(* Controllo se MID ricevuto è (UID+MID trasmesso). Se diverso c'è *)
		(* una disincronizzazione con il server. In tal caso il server invia *)
		(* un numero random di resync che sarà utilizzato come prossimo MID. *)
		
		MID[1]:=TO_UINT(MID[1]-SysUniqueID); (* Message ID *)
		IF (MID[0] <> MID[1]) THEN Resyncs:=Resyncs+1; END_IF;
		MID[0]:=MID[1]+1; (* Message ID *)

		(* Eseguo lettura numero di parametri ricevuti. *)	

		IF NOT(SysVarsscanf(SysStrFind(PBuffer, ADR('RP='), FIND_GET_END), '%d', USINT_TYPE, ADR(RPCount))) THEN ErrorNr:=10057311; RETURN; END_IF;

		(* Il contenuto della pagina ritornata è presente dopo l'header. *)

		Ptr[1]:=SysStrFind(PBuffer, ADR('Page='), FIND_GET_END); (* Auxiliary counter *)
		IF (Ptr[1] = NULL) THEN ErrorNr:=10057312; RETURN; END_IF;

 		(* Risposta corretta sposto restante parte della pagina ricevuta. *)

		Ptr[0]:=PBuffer; (* Auxiliary pointer *)
		MLength:=BLength-(TO_UDINT(Ptr[1])-TO_UDINT(PBuffer)); (* REST request message length *)
		FOR j:=0 TO MLength DO @Ptr[0]:=@Ptr[1]; Ptr[0]:=Ptr[0]+1; Ptr[1]:=Ptr[1]+1; END_FOR;
		CaseNr:=CaseNr+1; (* Case gestione programma *)

		(* ------------------------------------------------------------------ *)
		(* Se ricezione risposta dopo invio dati svuoto FIFO. Siccome non *)
		(* scrivo records in FIFO se a cavallo del roll over non è possibile *)
		(* che la somma FIFOOut+Length vada in roll over. *) 

		243: 
		@RESTSvBck.FIFOOut:=@RESTSvBck.FIFOOut+Length; (* FIFO data out index *)
		CaseNr:=CaseNr+1; (* Case gestione programma *)

		(* ------------------------------------------------------------------ *)
		(* Attivazione heartbeat ed uscita Ok ricezione da servizio REST. *)

		244, 253: 
		TimeBf[1]:=SysGetSysTime(TRUE); (* Time buffer (uS) *)
		TimeBf[2]:=SysGetSysTime(TRUE); (* Time buffer (uS) *)
		PktsOk:=PktsOk+1; (* REST packets Ok *)
		RSvcOn:=TRUE; (* REST service active *)
		SvcOk:=TRUE; (* Ok ricezione da servizio REST *)
	END_CASE;

(* [End of file] *)
]]>
						</sourceCode>
					</functionBlock>
				</functionBlocks>
				<programs/>
				<macros/>
				<structs>
					<struct name="_RESTSERVICEDATA" version="1.0.0">
						<descr>(eLLabRESTSvcLib_A500) REST service data structure (Private)</descr>
						<vars>
							<var name="UniqueID" type="UDINT">
								<descr>Unique ID</descr>
							</var>
							<var name="RESTSvBck" type="@RESTSERVICEBACKUP">
								<descr>REST service backup pointer</descr>
							</var>
							<var name="FIFOFile" type="STRING" length="32">
								<descr>Path and name of file where to log</descr>
							</var>
							<var name="FIFOSize" type="UDINT">
								<descr>FIFO file size</descr>
							</var>
							<var name="BLength" type="UDINT">
								<descr>REST Request/Answer buffers length</descr>
							</var>
						</vars>
					</struct>
					<struct name="RESTSERVICEBACKUP" version="1.0.0">
						<descr>(eLLabRESTSvcLib_A500) Backup data to manage the REST service (Private)</descr>
						<vars>
							<var name="FIFOIn" type="UDINT">
								<descr>FIFO data In index</descr>
							</var>
							<var name="FIFOOut" type="UDINT">
								<descr>FIFO data out index</descr>
							</var>
						</vars>
					</struct>
				</structs>
				<typedefs/>
				<enums/>
				<subranges/>
				<interfaces/>
			</lib>
			<lib version="1.0.0" name="V:\Bertaser\Absolutely Useful\Libraries\eLLabMdbDevsLib_A200.plclib" fullXml="true" link="false">
				<descr/>
				<libWorkspace>
					<folder name="eLLabMdbDevsLib_A200">
						<Pou name="_ModbusMaster"/>
						<Pou name="EastronSDM120_v1"/>
						<Pou name="EastronSDM630_v1"/>
						<Pou name="ModbusMsCore"/>
						<Pou name="SAModbusCmd"/>
					</folder>
				</libWorkspace>
				<globalVars/>
				<retainVars/>
				<constantVars/>
				<functions/>
				<functionBlocks>
					<functionBlock name="_ModbusMaster" version="1.0.0">
						<descr>(eLLabMdbDevsLib_A200), Manages the modbus master communication (Private)</descr>
						<vars>
							<inputVars>
								<var name="Enable" type="BOOL">
									<descr>FB enable</descr>
								</var>
								<var name="SpyOn" type="BOOL">
									<descr>Spy active</descr>
								</var>
								<var name="File" type="FILEP">
									<descr>Terminal I/O pointer</descr>
								</var>
								<var name="Type" type="USINT">
									<descr>Modbus type</descr>
								</var>
								<var name="Node" type="USINT">
									<descr>Node number</descr>
								</var>
								<var name="FCode" type="USINT">
									<descr>Function code</descr>
								</var>
								<var name="Address" type="UINT">
									<descr>Start address</descr>
								</var>
								<var name="Points" type="UDINT">
									<descr>Number of points</descr>
								</var>
								<var name="Buffer" type="@USINT">
									<descr>Address of data buffer</descr>
								</var>
								<var name="IFTime" type="UDINT">
									<descr>Interframe time (uS)</descr>
								</var>
								<var name="Timeout" type="UINT">
									<descr>Timeout time (mS)</descr>
								</var>
								<var name="Delay" type="UINT">
									<descr>Delay time (mS)</descr>
								</var>
							</inputVars>
							<outputVars>
								<var name="Done" type="BOOL">
									<descr>Command done</descr>
								</var>
								<var name="Ok" type="BOOL">
									<descr>Execution Ok</descr>
									<initValue>FALSE</initValue>
								</var>
								<var name="Fault" type="BOOL">
									<descr>Command fault</descr>
								</var>
								<var name="Errors" type="UDINT">
									<descr>Error counter</descr>
								</var>
							</outputVars>
							<localVars>
								<var name="CaseBack" type="USINT">
									<descr>Case back</descr>
								</var>
								<var name="CaseNr" type="USINT">
									<descr>Case number</descr>
								</var>
								<var name="Ch" type="USINT">
									<descr>Character</descr>
								</var>
								<var name="DFrame" type="BYTE" dim0="256">
									<descr>Data frame</descr>
								</var>
								<var name="GetCRC" type="SysGetCrc">
									<descr>Get CRC</descr>
								</var>
								<var name="LclPtr" type="@USINT">
									<descr>Local pointer</descr>
								</var>
								<var name="RxDLgt" type="USINT">
									<descr>Rx data length</descr>
								</var>
								<var name="TimeBf" type="UDINT" dim0="2">
									<descr>Time buffer</descr>
								</var>
								<var name="TxDLgt" type="USINT">
									<descr>Tx data length</descr>
								</var>
								<var name="i" type="UINT">
									<descr>Aux counter</descr>
								</var>
								<var name="FFlop" type="BOOL">
									<descr>Flip/Flop</descr>
								</var>
								<var name="TrIDf" type="USINT">
									<descr>Transaction identifier</descr>
								</var>
								<var name="DFIDx" type="USINT">
									<descr>Data frame index</descr>
								</var>
							</localVars>
						</vars>
						<iecDeclaration valid="TRUE">
							<![CDATA[]]>
						</iecDeclaration>
						<interfaces/>
						<methods/>
						<sourceCode type="ST" encoded="true">
							<![CDATA[1iWZ8nFxLJyUAMhU28/XaZtT1ifp/4F77JBUDNhfu8G3ZotYsqaTZNcXPW5SkhpGYjX2J+n/
IXrskFQM2F+7wbdmi1iyppNk1xc9blKSGkZiNfYn6f8heuyQVAzYX7vBt2aLWLKmk2TXFz1u
UpIaRmI19ifp/yF67JBUDNhfu8G3ZotYsqaTZNcXPW5SkhpGYjX2J+n/IXrskFQM2F+7wbdm
i1iyppNk1xc9bvKTGkZyNfYlyf8hekyRFAKIUnvPx2jrVaKoI2oXGZ1v0p36SNI7hikZ8YF7
bJGEAmhT2803a9tTwq1DakcaTWUymUpK4jl2Jkn+gXtMkfQNeF4bwBdnK1kSpzNldxadb/KT
ukfCNFYmSf6Be0yR9A14XhvAF2crWRKnM2V3Fp1v8pO6R8I0ViZJ/oF7TJH0DXheG8AXZytZ
EqczZXcWnW/yk7pHYjXmJ+n9AXrskPQN2F+7wbdmi1iyppNk1xc9blKSGkZiNfYn6f8heuyQ
VAzYX7vBt2aLWLKmk2TXFz1uUpIaRmI19ifp/yF67JBUDNhfu8G3ZotYsqaTZNcXPW5SkhpG
YjX2J+n/IXrskFQM2F+7wbdmi1iyppNk1xc9blKSGkZiNfYn6f8heuyQVAzYX7vBt2aLWLKm
k2TXFz1uUpIaRsI09if5/yF4zJBUDHheK8/nbdtUwq3zb2cbnW/Sn/pK0jmGK5nzkXZMkRQA
iFR7zbdtm1QCqlNohxudbwKeak0yOcYrufRxdkyRtABIUhvAh2rbVMKt82/HG41ikp5KSsI0
liu588F2TJH0AFhTC83XbTtUwqojaDcb3WLinrpHsjlGK4nzoXe8myQHeF5rzSdr+1PSrcNo
Vxv9bvKTukfCNFYm6f8xeuySdAzYXxvAF2crWRKnM2V3Fp1v8pO6R8I0ViZJ/oF7TJH0DXhe
G8AXZytZEqczZXcWnW/yk7pHwjRWJkn+gXtMkfQNeF4bwBdnK1kSpzNldxadb/KTukfCNFYm
Sf6Be0yR9A14XhvAF2crWRKnM2V3Fp1v8pO6R8I0ViZJ/oF7TJH0DXheG8AXZytZEqczZXcW
nW/yk7pHwjRWJkn+IXr8kFQO+F+7wRdnK1YiqxNoRxrtYgKeek3iOeYrSf4xdiyc9A3IU3vN
h2oLVOKq42+nHI1iUp26R8I0ViZJ/oF7TJH0DXheG8AXZytZEqczZXcWnW/yk7pHwjRWJkn+
gXtMkfQNeF4bwBdnK1kSpzNldxadb/KTukfCNFYmSf6Be0yR9A14XhvAF2crWRKnM2V3Fp1v
8pO6R8I0ViZJ/oF77JBEDNhdm8G3ZitZ4qhTaEcavWOynkpKYjpWJnnwoXf8nLQAyFPbyidr
i1OiqiNoFxttYvKTWkjiOlYmSf6Be0yR9A14XhvAF2crWRKnM2V3Fp1v8pO6R8I0ViZJ/oF7
TJH0DXheG8AXZytZEqczZXcWnW/yk7pHwjRWJkn+gXtMkfQNeF4bwBdnK1kSpzNldxadb/KT
ukfCNFYmSf6Be0yRVAzIX7vDl2aLWBKn42l3Gy1l4pzaSmI6ViZ58EFxjJtEAJhUK8wXZ/tT
EqqDaGcb/WLCnypKUjnmK1nzgXuMnMQBuFSrzRdnK1kSpzNldxadb/KTukfCNFYmSf6Be0yR
9A14XhvAF2crWRKnM2V3Fp1v8pO6R8I0ViZJ/oF7TJH0DXheG8AXZytZEqczZXcWnW/yk7pH
wjRWJkn+gXtMkfQN2F+rwbdkq1iypjNllxktYrKeSkpiOlYmqfExdgycBAB4XhvNB2qbVHKq
82+HG71i8pO6R8I0ViZJ/oF7TJH0DXheG8AXZytZEqczZXcWnW/yk7pHwjRWJkn+gXtMkfQN
eF4bwBdnK1kSpzNldxadb/KTukfCNFYmSf6Be0yR9A14XhvAF2crWRKnM2V3Fp1v8pO6R8I0
ViZJ/oF7TJH0DXheu8GnZotakqaTZHcWXWNCmbpKMjn2KEn+QXf8nPQAaFMbwGdqO1TSqhNp
hxxNZfKTukZiOnYpifJxdwyQ9A1IX7vOJ2n7U8Kqg2jHG/1u8pOaRmI6liqZ8YF0TJH0DXhe
G8AXZytZEqczZXcWnW/yk7pHwjRWJkn+gXtMkfQNeF4bwBdnK1kSpzNldxadb/KTukfCNFYm
Sf6Be0yR9A14XhvAt2abWLKks2TXF51vkpyqSgI5pivp8IF7LJ4EBwhT6803ajtUEqfzaMcb
nW+SnqpKAjlGK0n+8XZcnDQAWFLrysdtK1kSpzNldxadb/KTukfCNFYmSf6Be0yR9A14XhvA
F2crWRKnM2V3Fp1v8pO6R8I0ViZJ/oF7TJH0DXheG8AXZytZEqczZXcWnW/yk7pHwjRWJkn+
gXtMkfQNeF4bwBdni1iippNm9xc9bvKTWkgSO0YrifNxduyf9A2oUQvN12qbVMKqw2h3Fn1i
ApnaSmI+5itZ8+F2vJz0DQhTC83XagtV4q3jb3cWnW/yk7pHwjRWJkn+gXtMkfQNeF4bwBdn
K1kSpzNldxadb/KTukfCNFYmSf6Be0yR9A14XhvAF2crWRKnM2V3Fp1v8pO6R8I0ViZJ/oF7
TJH0DXheG8AXZytZsqaDZNcVHW5SkrpH8jqWK4nzoXa8nCQHqFS7zhdnm1ZyqvNoxxu9YkKe
Gk1iPkYrSf7xdlycNABYUuvKx20rWRKnM2V3Fp1v8pO6R8I0ViZJ/oF7TJH0DXheG8AXZytZ
EqczZXcWnW/yk7pHwjRWJkn+gXtMkfQNeF4bwBdnK1kSpzNldxadb/KTukfCNFYmSf6Be0yR
9A14XhvAF2crWRKnk2THFz1scpIaRsI0VilZ8zF2LJw0B6hUu84XZ0tW4q1DaIcbvWLinrpH
wjmmLCnzQXH8nPQNeF4bwBdnK1kSpzNldxadb/KTukfCNFYmSf6Be0yR9A14XhvAF2crWRKn
M2V3Fp1v8pO6R8I0ViZJ/oF7TJH0DXheG8AXZytZEqczZXcWnW/yk7pHwjRWJkn+gXtMkfQN
eF4bwBdnK1kSpzNl1xctblKQOkZiNVYmafBxcaycFACIUzvNt2krWaKoU2i3Gy1i0p4KSmI+
9ixZ84F7bJ0EB5hT+83nagtUEqfzaEcaXWVCnrpHEj6mLEn+UXa8m0QAeF4LzRdq21QyqgNp
FxuNYvKTCkrCNIYrWfPxdnydlAC4U6vNF2dbVAKq82hXGm1lIpm6R8I0ViZJ/oF7TJH0DXhe
G8AXZytZEqczZXcWPW5CkhpEQjX2J0n+MXSsnjQByFNrzedqi1cSp/NphxvtYvKeqkrCNGYq
ifRBcbycJAdIUhvAx2obVTKqA2m3HF1lAp6aSjI5ViZJ/oF7TJH0DXheG8AXZytZEqczZXcW
nW/yk7pHwjRWJkn+gXtMkfQNeF4bwBdnK1kSpzNldxadb/KTukfCNFYmSf6Be0yR9A14XhvA
F2crWRKnM2V3Fp1vUpIKRmI31ifp/4F7jJ1EAAhT680HattT0q2Ta3cWXWMCnspKwjlGK0n+
QXH8nIQAiFMLzedt61MSpxNoxxtNZfKeqkoSPpYsefKBe8yQhACoUqvBF2crWRKnM2V3Fp1v
8pO6R8I0ViZJ/oF7TJH0DXheG8AXZytZEqczZXcWnW/yk7pHwjRWJkn+gXtMkfQNeF4bwBdn
K1kSpzNldxadb/KTGkZyNfYlyf8hekyRNAKIU1vNJ2ubU7KpM2W3Gm1igp66StI5ViZ58kFx
jJsEAKhUK8wXZ+tUAqozaGcbnW8inqpKsjlmKinzQXZcnPQN+F9rzcdrm1gSpzNldxadb/KT
ukfCNFYmSf6Be0yR9A14XhvAF2crWRKnM2V3Fp1v8pO6R8I0ViZJ/oF7TJH0DXheG8AXZytZ
EqczZXcWnW/yk7pHYjXmJ+n9AXrskPQNeF4bwBdnK1kSpzNldxadb/KTukfCNFYmSf6Be0yR
9A14XhvAF2crWRKnM2V3Fp1v8pO6R8I0ViZJ/oF7TJH0DXheG8AXZytZEqczZXcWnW/yk7pH
wjRWJkn+gXtMkfQNeF4bwBdnK1kSpzNldxadb/KTukfCNFYmSf6Be0yR9A14XhvAF2crWRKn
M2V3Fp1v8pO6R8I09if5/yF4zJBUDHheG88nawtUIqtDaIcbXWXSngpKwjTmKynzgXu8myQH
qFOrzddtG1WyqTNldxadb/KTukfCNFYmSf6Be0yR9A14XhvAF2crWRKnM2V3Fp1v8pO6R8I0
ViZJ/oF7TJH0DXheG8AXZytZEqczZXcWnW/yk7pHwjRWJkn+gXtMkfQNeF4bwBdnK1kSpzNl
dxadb/KTukfCNFYm6f8xeuySdAzYXxvA12g7VHKqw2jXGJ1vwp16TQI+5iup9JF2TJHEAThT
G8DXbdtUMqpDaMcb/WICnrpHMjmGLLnzUXa8m1QHyFMLzXdq21QSp+NoZxvtYsKf2koCOUYr
Sf7xdlycNABYUuvKx20rWRKnM2V3Fp1v8pO6R8I0ViZJ/oF7TJH0DXheG8AXZytZEqczZXcW
nW/yk7pHwjRWJkn+IXr8kFQO+F+7wRdnO1ZCqpNrdxatYTKZek1yObYsWfOBe0ycBABYUxvA
521LVBKnc2hnG41i8p66RxI+pixJ/lF2XJyEAEhSe83XajtUEqdDaGcbXWLSn0pNEj5WJmnz
MXa8myQHqFOrzddtO1QSpzNldxadb/KTukfCNFYmSf6Be0yR9A14XhvAF2crWRKnM2V3Fp1v
8pO6R8I0ViZJ/oF77JBEDNhdm8G3ZitZ8qgDaYcc3WIymRpJwjRmKIn0QXH8nBQHaFMbwBdq
21QyqjNlhxz9YvKT+krSOUYrSfOBe5ybBAd4XuvNN2oLVAKqE2iHG51vIp6qSrI5Ziop80F2
XJz0DQhTC83XagtV4q3jb3cWnW/yk7pHwjRWJkn+gXtMkfQNeF4bwBdnK1kSpzNldxadb/KT
ukfCNFYmSf6Be0yRVAzIX7vDl2aLWBKnw2pXG71i4p6aShI+9ihJ/uF0vJuEAIhTO80HaitZ
0qqDaHcWbWLSnppK0jl2K/nzgXtsnEQAqFTLzQdqS1TSrRNoRxpdZUKeukfCNFYmSf6Be0yR
9A14XhvAF2crWRKnM2V3Fp1v8pO6R8I0ViZJ/oF7TJH0DXheG8AXZytZEqczZXcWnW/yk7pH
wjRWJkn+gXtMkfQN2F+rwbdkq1iypjNlBxftboKSykayNSYnOf/xejyQhAwIX2vBZ2ZbWGKm
Q2QHF+1ugpLKRrI1Jic5//F6PJCEDAhfa8FnZltYYqZDZAcX7W6CkspGsjUmJzn/8Xo8kIQM
CF9rwWdmW1hipkNkBxftboKSykayNSYnOf/xejyQhAwIX2vBZ2ZbWGKmQ2QHF+1ugpLKRrI1
Jic5//F6PJCEDHheu8GnZotakqaTZHcWTWPyngpNwjSWKqnxwXZ8nWQAqFQbwBdnK1kSpzNl
dxadb/KTukfCNFYmSf6Be0yR9A14XhvAF2crWRKnM2V3Fp1v8pO6R8I0ViZJ/oF7TJH0DXhe
G8AXZytZEqczZXcWnW/yk7pHwjRWJkn+gXtMkfQNeF4bwBdnK1kSpzNldxadb/KTukfCNFYm
Sf6Be0yR9A14XhvAt2abWLKks2TXF51vwpJaSRI1VidJ/4F6TJD0DHhfG8EnZmtYEqejZLca
HWVikrpHcjs2K6n0MXZcnPQNmFM7zSdrW1TiqjNlpxuNYoKeikuiOZYrWfOBezyc5AC4UzvM
5237UxKnM2V3Fp1v8pO6R8I0ViZJ/oF7TJH0DXheG8AXZytZEqczZXcWnW/yk7pHwjRWJkn+
gXtMkfQNeF4bwBdni1iippNm9xc9bvKTikYiOoYnSf+BekyQ9Ax4XxvBF2YLWFKmM2XnF71g
cpkqRsI0din581F2vJxUB8hTC813attUEqfTaFcbrWOCnkpKwjR2K/nzUXFMnOQAqFTbyidr
K1nCqiNoBxutY5KeekrSOVYmOfORdoyc1AGIVMvKF2crWRKnM2V3Fp1v8pO6R8I0ViZJ/oF7
TJH0DXheG8AXZytZsqaDZNcVHW5SkrpH8jW2KJn/QXVMkPQMeF8bwRdmK1gSpnNkdxYNbgKc
mkpSNVYmufGhdmyc5ABYU6vNF2frVKKqM2WHG01lAp5qSjI+9iz585F2LJwEAHheG8AXZytZ
EqczZXcWnW/yk7pHwjRWJkn+gXtMkfQNeF4bwBdnK1kSpzNldxadb/KTukfCNFYmSf6Be0yR
9A14XhvAF2crWRKnk2THFz1scpIaRsI0Jic5//F6PJCEDAhfa8FnZltYYqZDZAcX7W6CkspG
sjUmJzn/8Xo8kIQMCF9rwWdmW1hipkNkBxftboKSykayNSYnOf/xejyQhAwIX2vBZ2ZbWGKm
Q2QHF+1ugpLKRrI1Jic5//F6PJCEDAhfa8FnZltYYqZDZAcX7W6CkspGsjUmJzn/8Xo8kIQM
CF9rwWdmW1hipjNl1xctblKQGkTCNFYmSf6Be8yQVAx4XmvBZ2ZbWGKmQ2QHF+1ugpLKRrI1
Jic5//F6PJCEDAhfa8FnZltYYqZDZAcX7W6CkspGsjUmJzn/8Xo8kIQMCF9rwWdmW1hipkNk
BxftboKSykayNSYnOf/xejyQhAwIX2vBZ2ZbWGKmQ2QHF+1ugpLKRrI1Jic5//F6PJCEDAhf
a8FnZltYYqZDZAcXnW9SkgpGYjdWJkn+gXtMkXQM2F8bwKdoS1aiqJNpxxmtYbKcCkhiOPYq
efAhd/ye5AIYUavPF2crWRKnM2V3Fp1v8pO6R8I0ViZJ/oF7TJH0DXheG8AXZytZEqczZXcW
nW/yk7pHwjRWJkn+gXtMkfQNeF4bwBdnK1kSpzNldxadb/KTukfCNFYmSf6Be0yR9A14XhvA
F2crWRKnM2V3Fp1v8pMaRnI19iVJ/oF7TJH0Dfhfu8EXZ1tYYqZDZAcX7W6CkspGsjUmJzn/
8Xo8kIQMCF9rwWdmW1hipkNkBxftboKSykayNSYnOf/xejyQhAwIX2vBZ2ZbWGKmQ2QHF+1u
gpLKRrI1Jic5//F6PJCEDAhfa8FnZltYYqZDZAcX7W6CkspGsjUmJzn/8Xo8kIQMCF9rwWdm
W1hipkNkBxftboKSukdiNeYn6f0xeMyQVAx4XuvPx23bVIKqw29nG51vIp+6SnI+ViZJ83F2
bJz0DUhS+8rnagtUUqojaHcWrWMymXpNcjm2LFnzgXuMnMQBeF7bzOdqa1RyqsNotxz9bvKT
GkZyNfYl6f0xePyeFAJ4XpvBx2srVKKtI2oXGy1u8pN6S0I7pikp8YF7/JxUAwhQy8ynbftT
wqszaMccXWDCn3pN8jjWJ0n/wXpMkfQMOF8bwBdma1gSpzNkxxfNYfKTSkiiO5YpWfIxdKye
pAPYXbvDF2crWRKnM2X3Fz1u8pNKSBI+pivZ83FxXJz0DehT683HbetToqojaBcbbWLyk1pN
8jh2K/nzsXdsnUQAOFOrzRdnO1RyqsNodxZNZXKeqkoCPjYnSf4hevyQVA7YXRvAF2crWRKn
I2onGz1hgp1aSPI6FimZ8nF0HJ/0Dfhfu8EXZ9tWkq3DaKcbbWUymQpK0jk2K0n+kXQcnPQN
2F+rwbdkK1kSpzNldxYtYBKcukdCNbYpefJxcQycNAfIXxvA12urVuKoU2p3Fn1gwp9KTYI5
lizp8PF1rJ7EAzhRy8znaHtXEqfzamcb/WICnhpJsjqWKmnxcXe8nqQDeF7rzzdqC1QCqhNo
pxw9YYKdSkjiOXYrWfOhdpybpAxIX0vOF2fbVnKo82pnGi1gEpzqSWI39iVJ/oF7TJH0Dfhf
u8EXZ1tYYqZDZAcX7W6CkspGsjUmJzn/8Xo8kIQMCF9rwWdmW1hipkNkBxftboKSykayNSYn
Of/xejyQhAwIX2vBZ2ZbWGKmQ2QHF+1ugpLKRrI1Jic5//F6PJCEDAhfa8FnZltYYqZDZAcX
7W6CkspGsjUmJzn/8Xo8kIQMCF9rwWdmW1hipkNkBxftboKSukdiNeYn6f2Be0yR9A14XpvB
t2YrWSKpE2vHGd1gQpx6S/I69ir58ZF0LJ4EAnheG8AXZytZEqczZXcWnW/yk7pHwjRWJkn+
gXtMkfQNeF4bwBdnK1kSpzNldxadb/KTukfCNFYmSf6Be0yR9A14XhvAF2crWRKnM2V3Fp1v
8pO6R8I0ViZJ/oF7TJH0DXheG8AXZytZEqczZXcWnW/yk7pHwjT2J/n/IXhMkfQNeF4bwJdm
i1gSp0NkBxftboKSykayNSYnOf/xejyQhAwIX2vBZ2ZbWGKmQ2QHF+1ugpLKRrI1Jic5//F6
PJCEDAhfa8FnZltYYqZDZAcX7W6CkspGsjUmJzn/8Xo8kIQMCF9rwWdmW1hipkNkBxftboKS
ykayNSYnOf/xejyQhAwIX2vBZ2ZbWGKmQ2QHF+1ugpLKRrI1Vibp/zF67JL0DXheG8AXZ6tY
sqYzZYcZTWUCnipKMj5GK0n+UXZcnJQAuFQ7zQdqa1RSqiNodxZNZQKeukciO3YoSf6xd2yd
RAA4U6vN120bVdKtA2kXF51vUpIKRmI39iVJ/oF7TJH0DchR+88XZ0tWAqjzafcXbWCSnopL
4jgWK7nzMXpMkTQB+FHrz3doK1nSqCNoFxttYlKdykkiO2YoCfFRd7yepAN4XsvPJ2v7U+Kq
U2pXGz1hgp26RpI6ViZp8XF0jJ0EAVhRe89HaStZ4qhTarcZjWNCnFpIkjr2Jen9gXtMkfQN
eF6bwbdmK1nCq8NodxZdZQKemkqyOeYrKfOxd4yb5AB4XivMx2obVOKtg2inHC1iUpkKStI5
Niu584F7vJwkB6hTC813ZitZAqjjaKcbjWLSnppKMjlWJonzMXacm8QBWFKrzVdqm1TSrQNp
VxttYvKTSkrCNFYrWfMxdkyRxAFYUqvNV2qbVNKtA2lXG21i8pMaRnI19iVJ/oF7TJH0Dfhf
u8EXZytU4qoTaHcWbWISnlpKMjmWLIn0cXF8ndQAiFMbwOdtS1QiqzNlFxttZeKeWk3yOFYm
ufNRcbycJACIVLvKp2o7VHKqw2h3Fk1i4p7KSvI4NiuJ85F2LJD0Ddhfq8G3ZItaEqczZXcW
nW9CnFpIwjTWJ4nxkXYsnAQAyF8bwNdrq1biqFNqdxa9YAKceksyOHYpKfHRdUyRBAIYUdvP
B2ubVvKoY2vXFT1s8pO6R8I0VibJ/yF6TJEEAqhU682HattTAqozZacbjWKSnnpN4jlGKwnz
wXZcnPQNqFTrzRdn61PiqhNoBxstYpKeikuCOVYm+fGRelye9A14UwvNp2pLVNKtw2hXG51v
Mp5KSiI55isp8zF2jJvkABhfG8C3ZptYsqSTZncWnW/yk7pHcju2KUn+AXqsnkQAOFPrzRdn
W1cSp1NqhxrdYLKcCkbCNJYqyfFxdCye9A2YUSvM521rVNKtk2sHGF1j0pxKSzI7BihJ/jF2
7J+EA6hSq8rHbftV4qrzbzcZrWMimXpNMjt2K2nzkXZsnHQMSF8bwRdmK1iCqTNkRxedbkKS
6knCNHYpufFBd7yd1AIYUUvOF2fbVnKo82pnGi1gEpzqSWI39iVJ/oF7TJH0Dfhfu8EXZ9tW
wq3DaOcbbWXinrpHEjlGKynzQXFsnOQAOFNbzQdqK1nCrcNodxZdZUKeukrSOVYmOfORdoyc
1AGIVMvKF2f7VAKqE2hXG21iMpl6TdI5NidJ/iF6/JBUDthdq8PHaBtXwqvDancWHW4ynwpN
wjmmK/n/gXtcnhQC2F0bwBdnK1kSp4Nmdxc9YfKTOkZiNVYmOf/xejyQhAwIX2vBZ2ZbWGKm
Q2QHF+1ugpLKRrI1Jic5//F6PJCEDAhfa8FnZltYYqZDZAcX7W6CkspGsjUmJzn/8Xo8kIQM
CF9rwWdmW1hipkNkBxftboKSykayNSYnOf/Rdzye5AC4UzvM5237UxKnE2q3Gm1jgp/KRrI1
Vibp/zF67JL0DXheG8AXZ5taIqaTa3cWHW5SkrpHsjUmJzn/8Xo8kIQMCF9rwWdmW1hipkNk
BxftboKSykayNSYnOf/xejyQhAwIX2vBZ2ZbWGKmQ2QHF+1ugpLKRrI1Jic5//F6PJCEDAhf
a8FnZltYYqZDZAcX7W6CkupLsjtGK4nzoXe8myQHeF4rzsdt+1SiqoNoBxrtboKSukdiNeYn
6f2Be0yR9A14XqvDN2aLVxKns2TXF51vgpLKRrI1Jic5//F6PJCEDAhfa8FnZltYYqZDZAcX
7W6CkspGsjUmJzn/8Xo8kIQMCF9rwWdmW1hipkNkBxftboKSykayNSYnOf/xejyQhAwIX2vB
Z2ZbWGKmQ2QHF+1ugpLqS7I7RiuJ86F3vJskB3he28zHaCtWYqtDZAcXnW9SkgpGYjfmJbnx
wXScnQQC2F2rw6dky1Yiq8NvNxtdZVKdykkCOHYpufJxdByf9A34X7vBF2f7VgKqQ2gHG61j
kp56SsI0tit58nFxDJw0B3heu8GnZotaoqSDZscbPWGCnWpLcj6GLJnycXaMm7QCSFLLytdt
21YyqhNoZxu9YnKSikbCNVYnSf8RdUyQdAN4X6vBR2krWZKmk2R3Fk1jAp56TcI0pitp86F2
XJzUAHhey80HautU4qozZdcXLW5SkApEcjd2KbnxQXe8ndQCGFFLzrdkm1riqFNqtxmNYyKc
ikkSOKYpGfAheOyS9A14XhvAF2erWLKmM2UHF+1ugpLKRrI1Jic5//F6PJCEDAhfa8FnZltY
YqZDZAcX7W6CkspGsjUmJzn/8Xo8kIQMCF9rwWdmW1hipkNkBxftboKSykayNSYnOf/xejyQ
hAwIX2vBZ2ZbWGKmQ2QHF+1ugpLKRrI1Jic5//F6PJCEDAhfa8FnZltYYqZDZAcX7W6CkspG
sjUmJ0n+IXr8kFQOeF4bwBdnK1mSppNkdxYNYAKcaksCOOYpWfHhdLye9A24UqvPZ2jbVgKo
w2m3Gp1vIp9KSPI7piq58eF07J3EA3heG8AXZytZEqczZXcWnW/yk7pHwjRWJkn+gXtMkfQN
eF4bwBdnK1kSpzNldxadb/KTukfCNFYmSf6Be0yR9A14XhvAF2crWRKnM2V3Fp1v8pO6R8I0
ViZJ/oF77JBEDNhdG8AXZytZEqezZNcXnW+CkspGsjUmJzn/8Xo8kIQMCF9rwWdmW1hipkNk
BxftboKSykayNSYnOf/xejyQhAwIX2vBZ2ZbWGKmQ2QHF+1ugpLKRrI1Jic5//F6PJCEDAhf
a8FnZltYYqZDZAcX7W6CkspGsjUmJzn/8Xo8kIQMCF9rwWdmW1hipkNkBxftboKSykayNSYn
Of/xekyRVAzIX7vDF2crWRKnM2X3Fz1u8pNaS3I5pisp83F2TJFkAIhTy8rXbZtU0q0jaHcW
XWVCnspKMjlGK7n0QXFMkSQAaFNrzedtS1SiquNoRxo9ZUKeqkqiOaYrCf+BewycZAzIU3vN
123bVDKqI2h3Fk1i4p7KSvI4NiuJ85F2TJE0AIhT+8rnaitZwqqzaMcbbWUynkpK4jmGLPnz
gXvskEQM2F0bwBdnK1kSp7Nk1xedb5KeSkqCOVYmifRxdjyc9ABoUxvA12rbVPKqg2gXGy1i
MpmqSqI1ViZ58BF23JxEAIhUe82HajtUEqcTZHcXnW+CnmpLwjRWK7nzoXZMkTQHiFNrzRdq
O1QyqoNo1xw9ZcKfGk1yOUYrKfNxdkyRNAdYUyvMF2ebVBKn42hnG+1iwp/aSgI55isp/4F7
7JBEDNhdu8OnZJtW8qgzZfcXTWDCn2pNMjk2KWnzgXs8n/QNeF+rwRdn61WSqMNqFxmdbzKf
CkqyOaYrafBhdhyd9AwIUrvOZ2n7VaKt42/nGW1iMplqS3I+hiyJ8jF2PJwEAPhf28w3aNtV
4qiDZCcYnW8CnNpIAjtGKvnxYXQcn1QOeF4bwBdnK1miqNNqdxYdbnKSaktyPoYs2fFxdoyb
JAHIVMvK12ubVGKqw2j3F11j0pxKSzI75ic5/0F3/JyEAIhTO873antVEqZDaccXnW+SncpJ
wjTWJ4nykXRcnQQBuFGrz3do61WSpvNpxxvtYgKeqkoyPpYsGf9BdLyctABIUqvKR2YLWBKm
g2TXF61u8pK6RsI15if5/4F7jJ10AohRe8+3ZJtaoqSDapcZnW9ykmpLwjnmLFnx4Xb8kPQN
uFKbz+doS1aipINo1xjtYSKfCk0SPoYqSfMxcYyexAG4VCvMl2b7VRKog2lnGq1hIp9qSHI7
5ikJ/4F7fJAUA6hf284XZitYEqYzZHcXnW7ykvpGwjRmKInxoXTMkGQMiFE7zYdmm1hSpjNl
RxhdYNKcOkZSNZYq+fPxdryc5ACIVNvKF2fbVDKqE2hnG71iYpIKRnI1BihJ/nF0LJ40AmhS
q8/3aHtXsqQzZXcWnW/yk7pHwjRWJkn+MXbsn4QDqFKrysdt+1XiqvNvNxmtYyKZek0yO3Yr
afORdmycdAxIXxvBF2YrWIKpM2SHGJ1uQpLqScI01ifp/4F7nJ0EALhUG8DnagtUMqojaFcb
nW8inqpKAjmmK0n+IXr8kFQOyF2rw/doG1XirXNotxw9YYKdekviO6YqufHRdUyRdAzYXxvA
x2g7VGKqQ2hHGv1iMp66RyI5Ziq59MF2jJv0Ddhfq8G3ZCtZEqczZXcWnW/yk7pHwjR2Kbnx
QXe8ndQCGFFLzrdkK1kSpzNldxZtYJKcekjSOOYpqfHRdeySVA54XhvAF2crWZKmk2R3Fu1u
gpLKRrI1Jic5//F6PJCEDAhfa8FnZltYYqZDZAcX7W6CkspGsjUmJzn/8Xo8kIQMCF9rwWdm
W1hipkNkBxftboKSykayNSYnOf/xejyQhAwIX2vBZ2ZbWGKmQ2QHF+1ugpLKRrI1Jic5//F6
PJCEDAhfa8FnZltYYqZDZAcX7W6CkspGsjUmJzn/gXvskEQM2F0bwBdnK1kSp7Nk1xedb2Kc
SkgSOJYq+fGRdCyeBAJ4XlvPB2g7VhKoM2V3Fp1v8pO6R8I0ViZJ/oF7TJH0DXheG8AXZytZ
EqczZXcWnW/yk7pHwjRWJkn+gXtMkfQNeF4bwBdnK1kSpzNldxadb/KTukfCNFYmSf6Be0yR
9A14XhvAF2crWRKnM2V3Fp1v8pO6R8I0ViZJ/oF7TJFUDMhfu8MXZytZEqczZfcXPW7yk8pG
sjUmJzn/8Xo8kIQMCF9rwWdmW1hipkNkBxftboKSykayNSYnOf/xejyQhAwIX2vBZ2ZbWGKm
Q2QHF+1ugpLKRrI1Jic5//F6PJCEDAhfa8FnZltYYqZDZAcX7W6CkspGsjUmJzn/8Xo8kIQM
CF9rwWdmW1hipkNkBxftboKSykayNSYnOf/xejyQ9A3YX6vBt2QrWRKnM2V3Fh1uUpK6RzI7
hiy58xF2vJvkAHheW80HajtUEqozZacbHWJCnkpNEj5GK0n+UXG8m/QN6FSbzadqa1TiqjNl
dxttYtKeukfCOaYrafPxdrycNAe4VOvNN2rbVBKng2g3G51v8p6KSxI+hix58hF23JxEAGhT
G8DXaptUEqfjaEcaTWUCnrpHEj6mKynzIXF8nfQN2F+rwbdkK1kSpzNldxYdblKSukcyPoYs
mfMxdmycBAB4XtvNJ2trVFKqA2l3Fn1iApnaShI5liz585F2LJz0DVhSW80HavtUQqpTZHcW
nWACnppKwjSmLJn0UXb8nNQAiFMbwNdqG1VSqnNoRxqdbxKcmknCNOYrCfOBe5ycxAGoVOvN
F2frVKKqM2XnG21iIpl6TXI5Risp83F2TJFUDMhfu8MXZytZEqczZfcXPW7yk3pKMjm2LLnz
gXuMmwQAWFNrzadqS1QiqxNohxudbyKeqkqiOVYmafFxdIydBAFYUXvPd2YrWbKmg2TXFT1s
8pO6R8I0VibZ8gF0/J60AohRG8CXZutVMqjDaYcZLW7yk3pI0jv2Jen9gXtMkfQNeF4bwBdn
K1kSp7Nk1xedb4KSykayNSYnOf/xejyQhAwIX2vBZ2ZbWGKmQ2QHF+1ugpLKRrI1Jic5//F6
PJCEDAhfa8FnZltYYqZDZAcX7W6CkspGsjUmJzn/8Xo8kIQMCF9rwWdmW1hipkNkBxftboKS
ykayNSYnOf/xejyQhAwIX2vBZ2ZbWGKmQ2QHF+1ugpLKRsI09if5/yF4TJH0DXheG8AXZytZ
EqczZfcXPW7ykypIMjuGKonyMXRcnpQCiFEbwHdo21ViqMNqVxmNYPKTekhyO1YmmfGxdZyd
BAJ4XhvAF2crWRKnM2V3Fp1v8pO6R8I0ViZJ/oF7TJH0DXheG8AXZytZEqczZXcWnW/yk7pH
wjRWJkn+gXtMkfQNeF4bwBdnK1kSpzNldxadb/KTukfCNFYm6f8xeuyS9A14XhvAF2crWRKn
M2V3Fh1uUpK6R7I1Jic5//F6PJCEDAhfa8FnZltYYqZDZAcX7W6CkspGsjUmJzn/8Xo8kIQM
CF9rwWdmW1hipkNkBxftboKSykayNSYnOf/xejyQhAwIX2vBZ2ZbWGKmQ2QHF+1ugpLKRrI1
Jic5//F6PJCEDAhfa8FnZltYYqZDZAcX7W6CkspGsjUmJ0n+IXr8kFQOeF4bwBdnK1kSpzNl
dxadb3KSGkbCNKYpmfRxdtycBAdoUxvAh2rbVMKt82/HG41ikp5KSsI0hivJ8zF2fJ2EAEhS
28rnaitZwq3Db1cavWLinkpNAj7mKynzcXacm/QNuFOrzRdn+1Qiq+Nvhxv9bvKTGkZyNfYl
Sf6Be0yR9A3YXRvAF2crWRKnM2V3Fp1v8pNqSPI6hiq58YF7zJAkAkhSy8rnaktWMqqDZHcW
jWASnBpEYjdWJkn+gXtMkfQNeF4bwBdnK1kSpzNldxYdblKSukcSNYYnmf9RepyQJAyoX8vB
x2b7WMKm42SnF01uIpJqRhI1hieZ/1F6nJAkDKhfy8HHZvtYwqbjZKcXTW4ikmpGEjWGJ5n/
UXqckCQMqF/Lwcdm+1jCpuNkpxdNbiKSakYSNYYnmf9RepyQJAyoX8vBx2b7WMKm42SnF01u
8pMaRnI19iVJ/oF7TJH0DXheG8AXZytZEqczZXcWnW9ykhpGwjSGKXnwUXe8niQBeF6Lz+do
+1XSq4NqZxn9YAKcukcSO0YpOfGxdSyeNALIURvAF2crWRKnM2V3Fp1v8pO6R8I0ViZJ/oF7
TJH0DXheG8AXZytZEqczZXcWnW/yk7pHwjRWJkn+gXtMkfQNeF4bwBdnK1kSpzNldxadb/KT
ukdiNeYn6f2Be0yR9A14XhvAF2crWRKnM2V3Fp1v8pM6RmI1ViaZ/1F6nJAkDKhfy8HHZvtY
wqbjZKcXTW4ikmpGEjWGJ5n/UXqckCQMqF/Lwcdm+1jCpuNkpxdNbiKSakYSNYYnmf9RepyQ
JAyoX8vBx2b7WMKm42SnF01uIpJqRhI1hieZ/1F6nJAkDKhfy8HHZvtYwqbjZKcXTW4ikmpG
wjT2J/n/IXjskvQNeF4bwBdnK1kSpzNldxadb/KTukfCNNYn6f+BezyQhAwIX2vBZ2ZbWGKm
Q2QHF+1ugpLKRrI1Jic5//F6PJCEDAhfa8FnZltYYqZDZAcX7W6CkspGsjUmJzn/8Xo8kIQM
CF9rwWdmW1hipkNkBxftboKSykayNSYnOf/xejyQhAwIX2vBZ2ZbWGKmQ2QHF+1ugpLKRrI1
JidJ/iF6/JBUDnheG8AXZytZEqczZXcWnW/yk7pHwjRWJsn/IXpMkWQCiFHLzNdrm1YCqFNq
hxmdbyKcqkiyO2YoKfFBdFye9A24USvOF2fbVsKrw2rnGW1jQpyaSDI7ViZJ/oF7TJH0DXhe
G8AXZytZEqczZXcWnW/yk7pHwjRWJkn+gXtMkfQNeF4bwBdnK1kSpzNldxadb/KTukfCNFYm
Sf6Be+yQRAzYXRvAF2crWRKnM2V3Fp1v8pO6R8I0ViZJ/gF67JD0DQhfa8FnZltYYqZDZAcX
7W6CkspGsjUmJzn/8Xo8kIQMCF9rwWdmW1hipkNkBxftboKSykayNSYnOf/xejyQhAwIX2vB
Z2ZbWGKmQ2QHF+1ugpLKRrI1Jic5//F6PJCEDAhfa8FnZltYYqZDZAcX7W6CkspGsjUmJzn/
8XpMkVQMyF+7wxdnK1kSpzNldxadb/KTukfCNFYmSf6Be8yQVAx4XhvPN2rbVBKqA2lXG41i
8pNaSuI5Zio583F2TJE0AMhTG8DHajtUYqoDaRcbXWLinvpGwjRWK2nzMXY8nMQBeF4bzSdr
C1TSrcNodxZdYgKe+krCNLYrafOxdzycBAB4XpvVF2fbU4Kqw29HGt1iAp66R8I5pitp84F7
7JBEDNhdG8AXZytZEqczZXcWnW/yk7pHwjRWJkn+AXrskPQNuFTrytdt61OiqjNlpxuNYoKe
ikuiOZYr+fPBekyRJAdoU9vK120LVCKro2jnG41i8pOKRsI0ZiqJ84F7/JyUALhTq803aptU
sq2Tb2cb3W7yk8pK0jmWK2nycXGcm/QNqFRbzSdry1PiqjNlpxyNYoKeykryOFYmef/hekyR
VAzIX7vDt2QrWRKnM2V3Fp1v8pO6R8I0ViZJ/oF7TJH0DNhQu8MXZytZEqczZXcWnW/yk7pH
wjRWJkn+gXv8nFQDCFArztdq61QyqsNopxxNZYKSikaSOlYmyf8hekyRxAOIVJvKF2f7VAKq
w28XG11lAp6aSsI09if5/yF4TJH0DXheG8AXZytZEqczZXcWnW/yk7pHgjuGKwnzgXSMm9QA
2FBrzjdp21PyqtNohxu9YqKdukdCNfYnSf7BdFycJABIUlvNF2crVAKqg2gXG11lAp6aSsI0
9if5/yF4TJH0DXheG8AXZytZEqczZXcWnW/yk7pHAju2KWnzsXc8nAQAKFIbwWdri1diqVNq
ZxtdYgKe6knCNNYn6f+Be5yexAFYU6vNx2o7VBKng2gXG11iQp6aSnI59izp9JF2TJE0AMhT
G8B3ajtU0qojaHcWPW5CkhpEwjRWJkn+gXtMkfQNeF4bwBdnK1kSpzNltxl9YNKeikuyOaYr
GfKxejydVAMIUPvPx2g7VNKqw2gnGJ1vcpIaRsI0hil58qF2/JwkAGhTG8DHajtU0qqDaKcb
bWLyk1pKMj42K+n0MXZcnJQAiFMbwLdmm1iypDNldxadb/KTukfCNFYmSf6Be0yR9A14XtvP
92gLVCKrQ2iHG81j0pLKS2I6JiiJ8pF0XJ0EAahSq893aOtVkqaDaGcXvW4CnVpJcjUGKEn+
AXrskPQNqFErzDdqm1TCqiNodxbtYCKfmknCNOYrKfNBdvyc1ADIU7vKt207VBKnk2THFz1s
8pO6R8I0ViZJ/oF7TJH0DXheG8AXZytZ0qjTalcbrWOCnkpKkjiGKDnyIXU8nzQBaFELzOdr
+1WiqFNqtxodbkKeWkbiNaYoufAxehyf9A34X7vBF2f7ViKrE2jHG01i4p66R4I7hipp8IF7
/JyUALhTq803aptUsq2Tb2cbnW9SkgpGYjdWJkn+gXtMkfQNeF4bwBdnK1kSpzNldxadb/KT
ukfCNFYmSf6Be0yR9A14XhvAF2eLWhKnM2V3Fp1v8pO6R8I0ViZJ/oF7TJH0Dfhfu8EXZ9tW
wq3DaOcbbWXinrpHEjlGKynzQXFsnOQAOFNbzQdqK1nyqsNvFxs9ZUKeqkqiOaYrSf5Bdnyd
9A2IU8vK52q7VOKtg2hXG21ikpK6R2I15ifp/YF7TJH0DXheG8AXZytZEqczZXcWnW/ykxpE
wjRWJkn+gXtMkfQNeF4bwBdnK1kSpzNlpxmtYSKfSkjCNNYnqfFRdFycNACIU6vBF2c7VvKo
k2Z3Fp1v8pO6R8I0ViZJ/oF7TJH0DXheG8AXZytZEqczZUcXfWEikrpG8jX2KEn+UXR8nSQH
iFN7zzdqi1diqQNkdxfNYfKTOkZiNVYmafFxdnydNAB4XsvNB2qbVFKqM2WnHF1lwp96TTI+
hixJ/iF6/JBUDnheG8AXZytZEqczZXcWnW/yk7pHwjRWJkn+gXtMkfQNSF/7zsdmK1gyppNr
dxZNYMKfak0yOTYpafMhdTyfxAx4X0vOF2erWLKmM2VXGW1iwp96SsI05isp84F2vJs0B3he
y8rXbRtV0q3Db6ccnW9SkgpGYjdWJkn+gXtMkfQNeF4bwBdnK1kSpzNldxadb/KTukfCNGYn
qfBRekyQJAPYUBvAx2gbVcKtw2gXGb1iUp3KSTI6VicZ8IF7zJBUDHheO8/nahtV0qozZfcb
jWKynnpKcjk2K9nzgXtsnAQA6FOrzcdt61PiqhNopxydb1KSCkZiN1YmSf6Be0yR9A14XhvA
F2crWRKnM2V3Fp1v8pO6R8I0Ziep8FF6TJA0A9hQG8DHaBtVwq3DaBcZvWJSncpJMjpWJxnw
gXvMkFQMeF47z+dqG1XSqjNlxxv9YvKeSk0CPlYmafNxdtycRACoVNvK52oLVMKtM2XXFy1u
UpC6R8I0ViZJ/oF7TJH0DXheG8AXZytZEqczZXcWnW/yk4pGIjqGJ0n/cXXsn/QNqFErzMdt
21RyqBNo1xjtYRKdukaSOlYmyf8hekyRFAJoUzvNx2rbVBKn42/HG/1iYp76SjI5ViaZ85F2
/Jy0AHheu8GnZotaEqczZXcWnW/yk7pHwjRWJkn+gXtMkfQNeF4bwBdnK1kiptNrpxedbhKd
GknCNIYpefJRcbyclAJYU7vOZ2m7VxKmY2t3Fh1uUpK6R8I7diu581FxvJw0B3hey8qnaktU
gqpzaIcbnW/SnkpKUjnmK5n0QXG8nNQAeF67wadmi1oSpzNldxadb/KTukfCNFYmSf6Be0yR
9A14XhvAF2crWSKm02unF51uEpwaScI0hil58lFxvJyUAlhTu85naRtYEqYzZCcYnW9ykhpG
wjS2KVnzoXacnAQAeF5rzedta1TSrYNodxvdYgKeukcSOUYr+fPBdpyb9A3YX6vBt2QrWRKn
M2V3Fp1v8pO6R8I0ViZJ/oF7TJH0DXheG8AXZxtY8qnjZEcXnW5SnbpHEjtmKpn0cXYsntQA
2FBrzidmG1gSpmNrdxYdblKSukfCO3YrufNRcbycNAd4XmvN521rVNKtg2h3G91iAp66R+I5
pivZ8zF2nJs0B4hTO83HbStZsqaDZNcVnW/yk7pHwjRWJkn+gXtMkfQNeF4bwBdnK1kSpzNl
dxatbhKdakYCOmYn6fCBe5yexAGoVOvNd2gLVLKpQ2tHF71u8pLqScI01ifp/4F7bJ4EAEhS
280XZ1tU4qpDaGcbvWJCmbpH4jjmLIn0cXacm/QN+F/rzMdt21QyqjNllxttZZKeakoCPuYr
WfPhdvyQ9A3YX6vBt2QrWRKnM2V3Fp1v8pO6R8I0ViZJ/oF7TJH0DXheG8AXZxtY8qnjZLcY
vW5SnbpHEjtmKpn0cXYsntQA2FBrzidm+1cSpmNrdxYdblKSukdSOHYr+fNBcbyc9A0IU+vN
Z2o7VDKqg293Fr1jQpl6TTI5hixJ/gF6vJ0kB4hTO80XZ8tU4q1TaKcbXWVCnqpKojnmJ0n+
IXr8kFQOeF4bwBdnK1kSpzNldxadb/KTukfCNFYmufHBdJydBALYXRvAF2crWRKnM2V3Fp1v
8pO6R8I0ViZJ/oF7TJH0DXheq823aVtXwquDb6ccTWMCnnpNgjtmKpn0QXG8ntQAWFMLzTdq
q1gipjNkdxedbmKdikbCNVYn+f/RdUyRdAzYXxvAx2vbVNKtM2WHG71i0p6qSuI5ViaZ85F2
jJwEAHheu8GnZotaEqczZXcWnW/yk7pHwjRWJkn+gXtMkfQNyF3Lzydr+1PiqlNqVxs9YYKd
ikZyOqYoGfCBe8yQVAx4XvvPB2oLVLKtI2h3Fk1iwp9qTTI5Via586F2bJzkAFhT680XZ/tU
AqpDaEca/WIynqpKwjT2J/n/IXhMkfQNeF4bwBdnK1kSpzNldxadb/KTukdyN3YpufFBd7yd
1AIYUUvOF2erWLKmM2WHGU1lIp6qSsI0lit58sF2TJEkAMhTy81XajtUEqejafcbLWKynkpK
wjT2J/n/IXhMkfQNeF4bwBdnK1kSpzNldxadb/KTukcyOzYpifGRd5yexAOoUuvPR2mLWrKk
M2V3Fp1v8pO6R8I0ViZJ/oF7TJH0DXhem8G3ZitZYqZDZAcX7W6CkspGsjUmJzn/8Xo8kIQM
CF9rwWdmW1hipkNkBxftboKSykayNSYnOf/xejyQhAwIX2vBZ2ZbWGKmQ2QHF+1ugpLKRrI1
Jic5//F6PJCEDAhfa8FnZltYYqZDZAcX7W6CkspGsjUmJzn/8Xo8kIQMCF9rwRdni1iippNm
dxadb/KTukfCNFYmSf6Be0yR9A14XhvAl2aLWBKnE2VXGW1iwp96SsI0hitZ8zF2DJz0DahU
28ona+tT4q3jb1cWnW9ykrpGQj5WJ3n/MXpMkfQNeF4bwBdnK1kSpzNldxadb/KTukfCNFYm
Sf6Be0yR9A14XhvAF2crWRKnM2V3Fp1v8pO6R8I0ViZJ/oF7TJH0DXheG8AXZytZsqaDZNcV
nW/yk7pHwjRWJkn+gXtMkfQNeF4bwBdnq1iypjNlVxa9YAKeiksCOVYm+fPhdkycBAe4VBvA
x23rUyKr82+HHE1l0pO6R0I1VifJ9IF6bJBEDHheG8AXZytZEqczZXcWnW/yk7pHwjRWJkn+
gXtMkfQNeF4bwBdnK1kSpzNldxadb/KTukfCNFYmSf6Be0yR9A14XhvAF2crWRKnk2THFz1s
8pO6R8I0ViZJ/oF7TJH0DXheG8AXZytZkqaTZHcW7W6CkspGsjUmJzn/8Xo8kIQMCF9rwWdm
W1hipkNkBxftboKSykayNSYnOf/xejyQhAwIX2vBZ2ZbWGKmQ2QHF+1ugpLKRrI1Jic5//F6
PJCEDAhfa8FnZltYYqZDZAcX7W6CkspGsjUmJzn/8Xo8kIQMCF9rwWdmW1hipjNl1xctblKQ
ukfCNFYmSf6Be0yR9A14XhvAF2crWRKns2TXF51vIpyqSrI5Jit58uF2jJz0DZhTO80na1tU
4qqTa3cWnW/yk7pHwjRWJkn+sXUsnCQH6FTrzTdqK1nyqhNoRxrtYgKeGknCNFYmSf6Be0yR
9A14XhvAF2crWRKnM2V3Fp1v8pO6R8I0ViZJ/oF7TJH0DXheG8AXZytZEqczZXcWPW5CkhpE
wjRWJkn+gXtMkfQNeF4bwBdnK1kSpzNl9xc9bvKT6kayNSYnGf/xejyQhAwIX2vBR2ZbWEKm
Q2QnF+1uopLKRpI1ViZJ/oF7HJCEDAhfS8FnZltYYqZDZAcXzW6CkspGkjUmJzn/0Xo8kIQM
eF5rwWdme1gSpzNldxadb/KTukfCNFYmSf6Be0yR9A14XhvAF2crWRKnM2V3Fp1vUpIKRmI3
ViZJ/oF7TJH0DXheG8AXZytZEqczZXcWHW5SkrpHgj42KYnzwXFMkMQMaF8bwTdma1MiqfNo
txvdZZKcSk2yORYsSf6Be0yRtAcYUdvNV20rWCKmI2R3F71uspmaSaI5FiyJ8bF6DJuUDBhf
G8B3ZktYUq0zZXcWnW/yk7pHwjRWJkn+gXtMkfQNeF4bwBdnK1kSpzNldxadb/KTGkZyNfYl
Sf6Be0yR9A14XhvAF2crWRKnM2V3Fp1vcpIaRsI0Bic5//F6HJCEDAhfa8FnZltYQqZDZCcX
7W6ikspGkjUmJxn/gXtMkfQNKF9rwWdme1hipkNkBxftboKS6kayNSYnGf/xejyQpAwIX2vB
F2dbWGKmY2R3Fp1v8pO6R8I0ViZJ/oF7TJH0DXheG8AXZytZEqczZXcWnW/yk7pHYjXmJ+n9
gXtMkfQNeF4bwBdnK1kSpzNldxadb/KTOkZiNVYmOf/xejyQhAwIX2vBZ2ZbWGKmQ2QHF+1u
gpLKRrI1Jic5//F6PJCEDAhfa8FnZltYYqZDZAcX7W6CkspGsjUmJzn/8Xo8kIQMCF9rwWdm
W1hipkNkBxftboKSykayNSYnOf/xejyQhAwIX2vBZ2ZbWGKmQ2QHF+1ugpLKRsI09if5/yF4
TJH0DXheG8AXZytZEqczZXcWnW/yk7pHQjX2J0n+kXTcnJQAyFMbwDdrm1PSrcNodxZdYkKe
ukcCOWYqifSRdkyRNACIU1vNV2obVRKnE2jHG01l8p6qShI+lix58oF7nJzkABhT28qnattU
cqrDaHcWfWXCn/pK0jl2K7nzgXuMnEQAeF6bzhdn+1QCqoNoNxtNZbKSukdiNeYn6f2Be0yR
9A14XhvAF2crWRKnM2V3Fp1v8pM6RmI1Via581FxvJxkAIhUC80XZ/tUAqpTaLccvWLinvpK
gjlGK0n+oXZ8nZQA6FPrzRdnS1TirUNohxu9YuKeukfCOaYsKfNBcfyc9A24UyvMF2drVOKq
o2jnG21i0p5KSqI1Vib58cF2TJEUAFhTK8xnattUEqfzaMcbnW9SkgpGYjdWJkn+gXtMkfQN
eF4bwBdnK1kSpzNldxYdblKSukfiOeYrmfSBdlycJAe4VCvMF2frVOKq02+HG51vAp5qTRI+
pitp83F2TJF0DPhfG88HaptUcqrzb6ccjW5ynQpGkjVmJ/n/0Xqcn6QMWF97wRdna1aiqkNo
xxtdZeKeukfyOFYmaf9xdUyQ9A14U+vKd2rrU6KqU2R3Fj1uQpIaRGI3ViZJ/oF7TJH0DXhe
G8AXZytZEqczZXcWrW7ykhpJYjdWJkn+gXtMkfQNeF4bwBdnK1kSpzNldxYtYBKcukdCNdYn
SfGRdvyclAC4VMvKF2dbVxKnM2THF51v4pyaSMI01idJ8ZF2/JyUALhUy8oXZ0tXEqcTZIcY
nW5CkgpGwjSWKsnxcXQsnvQNqFErzMdt21RyqBNo1xjtYdKSeknCNQYoSf6hdLyeNAGIUjvP
d2h7VxKnw2oXGV1g4p8KSCI7Bijp/SF4TJH0DXheG8AXZytZEqczZXcWnW/yk7pHQjX2J0n+
gXRsnAQAeFMrzDdqO1QSp9NoVxutY4KeSkrCNJYr+fOBe5yc5AAIUyvMd2rrVAKqU2R3Fj1u
QpIaRGI3ViZJ/oF7TJH0DXheG8AXZytZEqczZXcWXWASnJpK8jgmK7nz0XeMn4QB2FBrzhdm
e1cSp7Nk1xedbyKcikviOeYrmfORdkyRhAKoUjvOF2dLVOKtQ2iHG71i4p66R+I5pivZ8zF2
nJs0B1hTq80XZ4tYoqaTZncWnW/yk7pHwjRWJkn+gXtMkfQNeF4bwNdoy1YyqgNpBxttYqKf
SkmyOPYoOfBBd1ye5AGIUsvMp2hLVtKrs2R3GY1iQp7aSgI+hiz5/9F1TJF0DNhfG8DHaBtV
MqqDaKcbjWLyk/pIEjh2KEn+4Xa8m4QAiFM7zQdqK1kyqsNo5xstYiKZek3iOeYrSf4hevyQ
VA54XhvAF2crWRKnM2V3Fp1v8pO6R8I0ViaJ8gFxjJ60AuhT28q3aVtX8qlja3cWHW5SkrpH
AjjWLEn+QXZ8nTQHSFIbwFdq21RyqqNotxwdYvKTGkZyNfYlSf6Be0yR9A14XhvAF2crWRKn
M2V3Fp1v0pw6TQI7FinZ80Fx7J+EA7hSC88Ha9tVwquDahcZXWNykjpGQjVWKVnzMXYsnDQH
qFRrwSdmm1gCprNrxxfNbsKS6kYSOuYnGfCBe8yQVAx4XjvPl20rWdKqA2m3HK1j8pP6SjI5
NivZ80FxzJz0Ddhfq8G3ZCtZEqczZXcWnW/yk7pHwjRWJkn+gXtMkSQCSFLLyudqC1ciq+No
Jxs9YYKdakjyOIYsufPhdGycpAxIX0vOF2erWLKmM2WnGa1jIplKSsI0dip58lF2HJz0Ddhf
q8G3ZCtZEqczZXcWnW/yk7pHwjRWJkn+gXtMkSQCSFLLyudqS1YyqpNrBxi9bvKSukaSOlYm
yf8hekyRFAJoUzvNt207VBKn42hHGk1lAp66RwI+dit58lFxPJxEAKhUy8qnajtUcqrDaHcW
TWLinspK8jg2K4nzkXZMkVQMyF+7w7dkK1kSpzNldxadb/KTukfCNFYmSf6Be0yRdAzYXxvA
Z2ZbWGKmQ2QHF+1ugpLKRrI1Jic5//F6PJCEDAhfa8FnZltYYqZDZAcX7W6CkspGsjUmJzn/
8Xo8kIQMCF9rwWdmW1hipkNkBxftboKSykayNSYnOf/xejyQhAwIX2vBZ2ZbWGKmQ2QHF+1u
gpLKRrI1Jic5//F6PJCEDHheu8GnZotaEqczZXcWnW/yk7pHwjRWJkn+gXtMkfQN+F+7wRdn
61UyqgNppxx9YgKemkpyOSYrufPhdoyb5AB4XvvKJ2trVAKqE2iHG51vIp6qSnI5FiuZ9MF6
TJHkAOhTe82naitZMquDb7ccbWLyk3pK8jiWLFnzgXucnOQAGFPbyqdq21RyqsNodxYdYfKT
akrSOeYrCfNRcSyQ9A3YX6vBt2SLWhKnM2V3Fp1v8pO6R8I0ViZJ/oF7TJH0DUhfK8G3aYta
EqczZXcWnW/yk7pHwjRWJkn+gXtMkfQNmFELzzdoK1nSq7NvtxndYGKeek1iOiYomfCBe4yd
5AJ4XpvBN2irU9Koc2rnG11lgpKKRnI1ViZp8DF3TJHEDHhe288HaItaEqczZXcWnW/yk7pH
wjRWJkn+gXtMkfQNeF4bwBdnK1nyqCNqVxmdb0KeGkmyOlYnSf5Bd1ye9A3oUBvAN2mbVRKn
A2R3Fl1g4pwaRMI0ViZJ/oF7TJH0DXheG8AXZytZEqczZXcWnW/yk7pHwjRWJkn+gXtMn7QC
qFNbzRdo61MyqpNrBxhdYBKcmkryOCYrufPRd4yddAe4UVvPh2rrU2KrM2VHGP1gMpy6R/I1
tiiZ/4F6fJCkA9hdG8AXZytZEqczZXcWnW/yk7pHwjRWJkn+gXtMkfQNeF4bwBdnK1kSp3Nq
pxvdYvKcek3iOfYoOfDBdJyctAB4UdvKN2p7WCKmY2t3Fh1uUpK6R4I7RiuZ87F3DJz0DXhT
C82naktU0q3DaFcbnW9SkgpGYjdWJkn+gXtMkfQNeF4bwBdnK1kSpzNldxadb/KTukfCNFYm
Sf6Be0yRNAKYUTvNJ2tbVOKqY2m3Gh1lMpz6SFI5liw58iF1PJ8kAfhRO8+XZutW8qgTaEca
7WICnupLAjjWLInxwXTcnDQHCFJbwRdnG1iipmNr1xWdb/KTukfCNFYmSf6Be0yR9A14XhvA
F2crWRKnM2V3Fm1gkpx6SNI4tilZ8aF0HJ9UDnheG8AXZytZEqczZXcWnW/yk7pHwjRWJrnx
4XSMnuQBmFELzzdoe1eypJNmxxUtbEKQOkZiNVYm2fFxdpybNAfIUwvNd2rbVBKnw2+nHE1i
Qp56TfI4ViZZ8dF2TJEkAGhTa80na0tU0qojaHcWTWLintpKAj6mK5n0QXG8m8QBOFPrzRdn
+1QCqlNodxZNZSKemkpyOZYsifRxcWycxAF4XtvNJ2vrU6KqU2R3Fj1uQpIaRGI3ViZJ/oF7
TJH0DXheG8AXZytZEqczZXcWjWCinhpJsjqWKmnxcXe8nqQDeF6bwbdmK1niqLNvhxtNYgKZ
ek1yOUYrKfOBe1yepAB4XrvBp2aLWhKnM2V3Fp1v8pO6R8I0ViZJ/oF7TJH0DahRK8zHbdtU
cqgTaNcY7WHCkgpJwjUGKEn+AXrskPQNmFELzTdqi1MCqjNlpxutYyKZSkrCNLYr+fPhdryc
9A2oUwvNZ2obVXKq82hnG51vUpIKRmI39iVJ/oF7TJH0DXheG8AXZytZEqczZXcWnW9ykhpG
wjQmJzn/8Xo8kIQMCF9rwWdmW1hipkNkBxftboKSykayNSYnOf/xejyQhAwIX2vBZ2ZbWGKm
Q2QHF+1ugpLKRrI1Jic5//F6PJCEDAhfa8FnZltYYqZDZAcX7W6CkspGsjUmJzn/8Xo8kIQM
CF9rwWdmW1hipkNkBxftboKSukdiNeYn6f2Be0yR9A14XhvAF2crWRKnM2V3Fp1v8pM6RmI1
ViZp/qF0vJzEAbhTG8CXajtUUqrzaMcb/WJinrpH4jmmK9nzMXacmzQHiFM7zcdtC1kSp7Nk
dxcdZfKSaklyNVYmSf6Be0yR9A14XhvAF2crWRKnM2V3Fp1v8pO6R8I0ViZJ/oF7TJH0DXhe
G8AXZytZEqczZXcWnW/yk7pHwjT2J/n/IXhMkfQNeF4bwBdnK1kSpzNldxadb/KTukdCNfYn
Sf6he2yeBABIUtvNF2ebVHKqM2iHHF1l8pOaSjI5xiv581FxjJsEAFhTy8o3ZytZkqYzZPcc
nW4ynQpGwjRWJkn+gXtMkfQNeF4bwBdnK1kSpzNldxadb/KTukfCNFYmSf6Be0yR9A14XhvA
F2crWRKnM2V3Fp1v8pO6R8I0Vibp/zF67JL0DXheG8AXZytZEqczZXcWnW/yk7pHwjTWJ+n/
gXs8kIQMCF9rwWdmW1hipkNkBxftboKSykayNSYnOf/xejyQhAwIX2vBZ2ZbWGKmQ2QHF+1u
gpLKRrI1Jic5//F6PJCEDAhfa8FnZltYYqZDZAcX7W6CkspGsjUmJzn/8Xo8kIQMCF9rwWdm
W1hipkNkBxftboKSykayNSYnSf4hevyQVA54XhvAF2crWRKnM2V3Fp1v8pO6R8I0VibJ/yF6
TJEkAmhTa81nahtVcqrzaHcWfWLSnopLsjmmK+nwgXtMkfQNeF4bwBdnG1dyquNv5xxtYtKe
ukciOXYrefLxdrycVAN4XhvAF2crWRKnM2V3Fp1v8pO6R8I0ViZJ/oF7TJH0DXheG8AXZytZ
EqczZXcWnW/yk7pHwjRWJkn+gXvskEQM2F0bwBdnK1kSpzNldxadb/KTukfCNFYmSf4BeuyQ
9A0oX2vBZ2Z7WGKmQ2QHF+1ugpLqRrI1Bic5/9F6PJCkDAhfS8EXZytZQqZDZAcXzW6CkspG
sjUmJzn/0Xo8kIQMKF9rwWdme1hipkNkJxftboKSukeyNSYnGf+Be0yR9A14XhvAF2crWRKn
M2V3Fp1v8pO6R8I0ViZJ/oF7TJFUDMhfu8MXZytZEqczZXcWnW/yk7pHwjRWJkn+gXvMkFQM
eF5byndo61RSrTNkpxiNbvKSekmCPmYoifNBdgyblAKIVGvNV20rWRKnc28XGV1ispm6RhI6
RidJ/0F1DJvUAxhTW8rXaBtV0q0DaUcX3WWSktpGwjQ2Jyn/wXFMkfQNeF4bwBdnK1kSpzNl
dxadb/KTukfCNFYmSf6Be0yR9A3YX6vBt2QrWRKnM2V3Fp1v8pO6R8I0ViZJ/oF7TJF0DNhf
G8BHZltYYqZjZAcX7W6CkspGsjUGJzn/0Xo8kKQMCF9LwWdme1gSpzNlJxftboKS6kayNSYn
Of/xejyQpAwIX2vBR2ZbWGKmY2QHF+1uopLKRrI1ViY5//F6HJD0DXheG8AXZytZEqczZXcW
nW/yk7pHwjRWJkn+gXtMkfQNeF67wadmi1oSpzNldxadb/KTukfCNFYmSf6Be0yR9A34X7vB
F2dbWGKmQ2QHF+1ugpLKRrI1Jic5//F6PJCEDAhfa8FnZltYYqZDZAcX7W6CkspGsjUmJzn/
8Xo8kIQMCF9rwWdmW1hipkNkBxftboKSykayNSYnOf/xejyQhAwIX2vBZ2ZbWGKmQ2QHF+1u
gpLKRrI1Jic5//F6PJCEDAhfG8C3ZptYsqQzZXcWnW/yk7pHwjRWJkn+gXtMkfQNeF6bwbdm
K1niqONvhxsNYgKZqkrCNIYrWfPhdoyb1ABoU1vNV2o7VBKnE2hHGv1iYp5KSsI0Niu59PF2
vJzUAGhTG8AXattTcqrzb8cbnW8ynopLwjQWK7nzEXbcnAQAWFPrzXdmK1miqHNodxZ9YtKe
ikuyOaYrSf5Bdvyc9A3YX6vBt2QrWRKnM2V3Fp1v8pO6R8I0ViZJ/oF7TJF0DNhfG8A3aptU
wq0zaGcbTWUymYpLwjSWK7nzYXG8nPQNiFPLysdt21QyqsNodxYdbvKcqkpyOTYrifRRceyQ
1AzIX0vBx2l7WDKmU2R3Ft1gQp7KSnI5lixZ84F7fJ30DUhfO8HnaStZEqrDbxcbXWVCntpG
wjT2J/n/IXjskvQNeF4bwBdnK1kSpzNldxadb/KTukfCNKYoSf8hdeyS9A14XhvAF2crWRKn
M2V3Fp1v8pO6R8I05imp8YF7zJB0DHhRC82naktU0q3jb3cW7WHyk7pGcjVWJlnxoXRMkXQM
eFELzadqS1TSreNvdxb9YfKTikbiNaYo+f8xekyRNAH4UevPd2grWcKoA2mnHG1ikpyaSmI6
Jihp/0F1TJCkA3heO8/naOtV4qsTahcZzWHyk0pIojuWKVnyMXSsnqQD2F27wxdnK1kSpzNl
dxadb/KTukfCNFYmSf6Be8yQVAx4XhvPN2rbVBKqA2lXG41i8pNaSuI5Zio583F2TJE0AMhT
G8DHajtUYqoDaRcbXWLintpGwjT2J/n/IXjskvQNeF4bwBdnK1kSpzNldxadb/KTukfCNJYp
qfGhdnydhACIU0vM12lbVbKpQ2t3F81h8pM6RmI1ViaZ8bF3bJxEAKhTC80XZ1tWwqsTa3cW
/WICmcpKMjl2K1nzgXtsnAQA6FOrzcdt61MyqoNodxY9bkKSGkTCNFYmSf6Be0yR9A14XhvA
F2crWRKnM2W3GX1g0p6KS7I5pisZ8nF1PJ1UAwhQ28wHaDtV4qvjaccZ/WAynzpGwjtGK/nz
4XaMmyQHyF9Lzhdnq1iypjNlpxmtY9KeCkoSOUYrSf7BdJyd1AN4XnvN521bVOKqE2hnG51v
0p5KSlI55iuZ9EFxbJxEAHheu8GnZotaEqczZXcWnW/yk7pHwjRWJkn+gXtMkfQNuFKbytdo
a1aCqvNv1xjtYRKd6knCNNYn6f+Be4yddAd4XtvNJ2vrUyKrM2U3G21ikp4qSgI+1itJ/iF6
/JBUDnheG8AXZytZEqczZXcWnW/yk7pHwjRWJmnxAXGMnrQC6FPbyrdpW1fSqyNqZxptYyKf
CkiiO5Yqyf+BdFycRAAYU9vKx22LWDKmg2QnF01hop26R0I19idJ/qF0zJv0DbhTK8zXbRtV
EqdzaIcb/WJinnpNQjlWJun/MXrskvQNeF4bwBdnK1kSpzNldxadb/KTukfCNIYpefJRcbyc
1ANIUsvNR2qLV2Kp42pHGk1lAp7aSOI5Bid5/9F1TJF0DNhfG8DHaBtVwq3DaHcWvWPCn2pK
kjlWJun/MXrskvQNeF4bwBdnK1kSpzNldxadb/KTukfCNIYpefJRcbyclAJYU7vOZ2kLWBKm
M2QnGJ1vcpIaRsI0tilZ86F27JvkAHhey80na/tT4qozZbccvWLCn2pNsjnmK5n0UXH8nOQA
GFPrzRdn+1QCqkNoRxr9YjKeqkrCNPYn+f8heOyS9A14XhvAF2crWRKnM2V3Fp1v8pO6R8I0
1ifp/4F7PJCEDAhfa8FnZltYYqZDZAcX7W6CkspGsjUmJzn/8Xo8kIQMCF9rwWdmW1hipkNk
BxftboKSykayNSYnOf/xejyQhAwIX2vBZ2ZbWGKmQ2QHF+1ugpLKRrI1Jic5//F6PJCEDAhf
a8FnZltYYqZDZAcX7W6CkspGsjUmJ0n+IXr8kFQOeF4bwBdnK1kSpzNldxadb/KTukfCNFYm
yf8hekyRBAKoVOvNh2rbUwKqM2W3HL1iwp9qTSI5pitp8zF2PJwEABhT28oHaitZ8q0DaTcb
jWLSnkpKwjR2K7nzEXb8nCQHuFQ7zadqS1gSp5Nkxxc9bPKTukfCNFYmSf6Be0yR9A14XhvA
F2crWZKmk2R3Fi1gsp66R+I5pivZ8zF2nJs0B1hTC80XZ6tMEqeDaBcbnW8SnqpK4jkmK3ny
QXFcnPQNWFKrzYdqK1niqlNotxstYsKf2krCNIYrWfPhdqybBABYU9vKB2orWaKqU2h3Ft1i
Qp56TQI+Fiu584F7vJyUALhTq80na0tUcqYzZdcXLW7ykxpEYjdWJkn+gXtMkfQNeF4bwBdn
K1kSpzNldxZtYcKSGkliN1YmSf6Be0yR9A14XhvAF2crWRKnM2V3Fn1g4pyaSMI0lirJ9EF0
DJ5kALhUu85naftXEqfzaWcZnW9ykppIQj6WKQnxEXaMm4QMSF+rwRdnC1eiqzNlVxedbzKc
qkhiN1YmSf6Be0yR9A14XhvAF2crWRKnM2V3Fp1v8pO6R8I0VigJ8VF2DJz0ArhUO823aVtX
0qjTalcbrWOCnkpKkjiWKsn0QXQMnmQAuFRLwSdmW1VCqTNl9xc9bvKT+kgyOZYsifRxcWyc
xAF4XlvPx2sLVxKn029HGt1i4p6aSjI5Vibp/zF67JL0DXheG8AXZytZEqczZXcWnW/yk7pH
wjRWJkn+gXtMkbQCqFNbzRdo61MyqpNrBxjdYCKe+krCO5YsafPRenyQpAN4XpvBt2YrWVKo
I2inG61jsp66R8I5Riv58+F2jJsEAFhTG8C3ZptYsqQzZXcWnW/yk7pHwjRWJkn+gXtMkfQN
eF4bwBdnK1kSpzNrNxlNYrKeukgCPnYr6fDxdYyeFAJYUyvMZ2rbVEKr82n3HF1gspwqSgI+
JioZ8IF7zJBUDHheW8/nautT0q3Db1cbrWPyk8pIEjh2KEn+YXF8nbQAaFM7zedqK1mypoNk
1xWdb/KTukfCNFYmSf6Be0yR9A14XhvAF2crWRKnM2V3Ft1gIp76SsI7lixp8yF1PJ+0AqhT
W80XaOtTMqpjZEcXzWHykzpGYjVWJgnxkXacnMQBOFMbwBdqO1SiqlNotxxtYtKeukdiNeYn
6f2Be0yR9A14XhvAF2crWRKnM2V3Fp1v8pNKSKI7lilZ8mF0XJ7UAihQu8O3ZJtaoqSDZvcX
PW7ykypIMjmGLIn0MXZcnJQAiFMbwOdt+1PCqoNotxytY/KTqkiSOVYmmfORdjycxAEYU9vN
B2orWcKqI2gXG11lAp5qTQI+pix58sF2vJz0DahTC813aitZwq3jaFcbLWIymXpNMj52K3ny
gXuMnMQBuFSrzXdmK1mypoNk1xU9bPKTukfCNFYmSf6Be0yR9A14XhvAF2crWQKoY2jXGO1h
Mp+aSDI4pikZ8IF7zJBUDHhe68+XbdtUwqrDb7ccLWLintpKwjRGKRnzgXvskEQM2F0bwBdn
K1kSpzNldxadb/KTukfCNFYmSf5RdHydJAeIU3vPN2qLV2KpA2THGJ1uop26R0I19idJ/mF0
XJzUANhUC80XZ/tUIqvjb4cbnW8SngpKojmmK0n+UXZcnIQASFJ7zddqO1QSp5Nkxxc9bFKQ
ukfCNFYmSf6Be0yR9A14XhvAF2crWRKns2TXF51vgpLKRrI1Jic5//F6PJCEDAhfa8FnZltY
YqZDZAcX7W6CkspGsjUmJzn/8Xo8kIQMCF9rwWdmW1hipkNkBxftboKSykayNSYnOf/xejyQ
hAwIX2vBZ2ZbWGKmQ2QHF+1ugpLKRrI1Jic5//F6PJCEDAhfa8FnZltYYqZDZHcWPW5CkhpE
wjRWJkn+gXtMkfQNeF4bwBdnK1kSpzNl9xc9bvKTmkciO0YrafNRdryc9A2oVKvNd2q7VFKq
w2h3Fk1i4p4KSoI5diZJ/gF6TJB0B3hf686nZitZEqczZXcWnW/yk7pHwjRWJkn+gXtMkfQN
eF4bwBdnK1kSpzNldxadb/KTukfCNFYmSf6Be0yR9A14XhvAF2crWRKnM2V3Fp1vUpIKRmI3
ViZJ/oF7TJH0DXheG8AXZytZEqczZXcWHW5SkrpHsjUmJzn/8Xo8kIQMCF9rwWdmW1hipkNk
BxftboKSykayNSYnOf/xejyQhAwIX2vBZ2ZbWGKmQ2QHF+1ugpLKRrI1Jic5//F6PJCEDAhf
a8FnZltYYqZDZAcX7W6CkspGsjUmJzn/8Xo8kIQMCF9rwWdmW1hipkNkBxftbvKTGkZyNfYl
Sf6Be0yR9A14XhvAF2crWRKnM2V3Fp1vcpIaRsI0hilZ8/F2PJzEARhT280XZ8tUMqoDaQcb
bWJSnbpHwjRWJkn+gXtMkcQDGFPLyodt21QyqjNllxu9YsKfykoyOfYoSf6Be0yR9A14XhvA
F2crWRKnM2V3Fp1v8pO6R8I0ViZJ/oF7TJH0DXheG8AXZytZEqczZXcWnW/yk7pHYjXmJ+n9
gXtMkfQNeF4bwBdnK1kSpzNldxadb/KTOkZiNVYmGf/xejyQpAwIX2vBR2ZbWEKmQ2QnF+1u
opLKRpI1ViZJ/tF6PJCEDChfa8FnZntYYqZjZAcXzW6CkupGsjUGJ0n+gXtMkfQNeF4bwBdn
K1kSpzNldxadb/KTukfCNFYmSf6Be0yR9A14XhvAF2crWRKnM2V3Fp1v8pO6R8I09if5/yF4
TJH0DXheG8AXZytZEqczZXcWnW/yk7pHQjX2J0n+wXEsnjQAOFQbwedpa1MiqfNotxvdZTKc
ek3yOBYsSf6BewyblAK4U1vKF2bbV1KtA2u3G11ispl6SAI+ZioJ9IF7TJH0DXheG8AXZytZ
EqczZXcWnW/yk7pHwjRWJkn+gXtMkfQNeF4bwBdnK1kSpzNldxadb/KTukfCNFYm6f8xeuyS
9A14XhvAF2crWRKnM2V3Fp1v8pO6R8I01ifp/4F7HJCEDAhfS8FnZltYQqZDZCcX7W6ikspG
kjUmJxn/gXtMkaQMCF9rwUdmW1hipmNkBxfNboKS6kayNQYnOf/RekyR9A14XhvAF2crWRKn
M2V3Fp1v8pO6R8I0ViZJ/oF7TJH0DXheG8AXZytZEqczZXcWnW/yk7pHwjRWJkn+IXr8kFQO
eF4bwBdnK1kSpzNldxadb/KTukfCNFYmyf8hekyRhAwIX2vBZ2ZbWGKmQ2QHF+1ugpLKRrI1
Jic5//F6PJCEDAhfa8FnZltYYqZDZAcX7W6CkspGsjUmJzn/8Xo8kIQMCF9rwWdmW1hipkNk
BxftboKSykayNSYnOf/xejyQhAwIX2vBZ2ZbWGKmQ2QHF+1ugpLKRrI1Jic5/4F77JBEDNhd
G8AXZytZEqczZXcWnW/yk7pHwjRWJkn+AXrskPQNuFErzNdtO1RSpjNlRxd9YSKSWkgiO1Yn
Sf/xdXyfNAe4VKvN920bVRKnE2nHG11lspK6R/I1tiiZ/4F6TJD0DHhfa87XaJtUwq0Dabcc
XWVCnlpN8jhWJmnyMXaMm5QMeF67wadmi1qypDNldxadb/KTukfCNFYmSf6Be0yR9A14XvvO
F2aLV7KkM2V3Fp1v8pO6R8I0ViZJ/oF7TJH0DXheq8/3aCtZcqgjarcaHW4yn6pI0jh2KFnx
kXQMnnQMeFBbz8dqa1QSqPNvVxstbkKSukcCONYpufHhdEyRNAKYUTvNJ2tbVOKqY2m3GO1j
Up3KSfI1tiiZ/4F6TJCkA3he689XaPtV4qgzZbcZfWDSnopLsjmmKxnyQXU8nVQDCFArwfdp
+1jyqNNqJxidbwKc2kgCO0Yq+fFhdByfVA54XhvAF2crWRKnM2V3Fp1v8pO6R8I0ViaJ8WF0
bJzEAQhT681Ha9tXYquTawcYnW6inbpHQjX2J0n+UXR8ndQAyFPLzQdqK1lSqONpVxidbxKZ
ikuCOUYrafNxdkyRVAzIX7vDF2crWRKnM2V3Fp1v8pO6R8I0ViZJ/oF7jJ10B7hRW8+HautT
sqlDa5cYzWHykzpGYjVWJonyAXFMkTQASFLbyidrK1lSqsNoFxsNYjKZOkrCNPYn+f8heEyR
9A14XhvAF2crWRKnM2V3Fp1v8pO6R+I71iyJ8cF03Jw0B9hQa873aXtXEqezZNcXnW/SnDpN
wjSWK3nyQXF8nfQNOFPrzXdqu1TSrbNodxY9bkKSGkTCNFYmSf6Be0yR9A14XhvAF2crWRKn
M2WnGa1jIplKSuI6ZiqZ89F27J+EA6hRK8zHbdtUcqgTaCcXrW6inbpHQjX2J0n+UXR8nSQH
iFMbwDdrG1XCqmNodxY9bkKSGkTCNFYmSf6Be0yR9A14XhvAF2crWRKnM2WnGa1jIplKSqI7
divp8PF1bJD0DHhfS84XZ6tYsqYzZZcZjWLSnhpN0jlWJpnzsXecmwQAeF7byjdqG1XCrUNo
xxtNZSKZCkrSOTYrufOBe5yc5AAIUyvMd2rrVAKqM2XXFy1uUpAaRMI0ViZJ/oF7TJH0DXhe
G8AXZytZEqczZfcXPW7yk8pGsjUmJzn/8Xo8kIQMCF9rwWdmW1hipkNkBxftboKSykayNSYn
Of/xejyQhAwIX2vBZ2ZbWGKmQ2QHF+1ugpLKRrI1Jic5//F6PJCEDAhfa8FnZltYYqZDZAcX
7W6CkspGsjUmJzn/8Xo8kIQMCF9rwWdmW1hipkNkBxedb1KSCkZiN1YmSf6Be0yR9A14XhvA
F2crWRKnM2V3Fh1uUpK6RzI7hiy58xF2vJvkAHhey80HaktU0q0TaGcb3WKynqpKwjSGLLnz
gXusnNQASFJrzedqK1kyqoNopxttYhKZSk0CPkYrSf5Rdlyc1ABYU+vN123rUwKqU2R3Fj1u
QpIaRGI3ViZJ/oF7TJH0DXheG8AXZytZEqczZXcWfWHCkhpJYjdWJkn+gXtMkfQNeF4bwBdn
K1kSpzNldxYtYBKcukdCNdYnyf8BeoyeFAJYUyvMZ2rbVEKrE2QHGj1u0pJKSSI65icZ/0F0
rJ7UAEhSa83nantVwqlDaScXrW5CklpG8jW2KJn/gXpMkPQMeF/7z/doy1byqINkdxbdYZKd
ukfyOpYrifOhdrycJAeoVKvBF2frVZKow2oXGZ1vIpyKSxI+pisp8aF27J+EA1hf684nZntX
EqcTaocZXWMCn5pIojsGKEn+cXQsnjQCaFKrz/doe1eypJNmdxadb/KTukfCNFYmSf6Be0yR
9A14XhvAp2jLVhKnU2pnGV1jcpJ6S9I7Ripp8JF0XJ60AvhfG85XaPtUUqozarccvWJCkgpG
wjSWKsnxcXQsnvQNyFH7zxdnq1jSqNNqVxutY4KeSkqSOJYoOfKBewyflAN4XhvBp2YrWdKr
s2qHGf1g8pNqSPI4hiy58+F0bJxUAwhQO8HnaRtYQqkzZVcZbWAyn0pL4js2KRnwgXu8npQC
uFELzKdoy1ZCqTNlhxn9YDKcqktyO7YpGfAheEyR9A14XhvAF2crWRKnM2V3Fp1v8pO6R3I7
tilJ/kF3XJ7kAVhQC88HaGtWkqYzazcZTWKynrpIAj52K/n/gXuMnXQCiFF7zxdnm1byqDNl
9xddYBKcmkryOCYrufPRd4yfhAF4XlvOd2krWSKm02unF31gEpwKRsI0lirJ8XF0LJ70DahR
K8zHbdtUcqgTaNcY7WHSkkpJ8jUGKEn+oXS8njQBiFI7z3doe1cSp8NqFxldYOKfCkgiOwYo
Sf5xdCyeNAJoUqvP92h7V7KkM2V3Fp1v8pO6R8I0ViZJ/oF7TJH0DXheu8MXZytZEqczZXcW
nW/yk7pHwjRWJkn+gXv8nhQCeF6bwddoy1YyqgNpBxttYqKfSkmyOFYmCfDhdUyR9AzIXxvA
12urVuKoU2p3Fk1gwp9qTTI5Nilp8yF1PJ/UDIhQK8FHaStZMqjDarcabWPSnNpIkjpWJrnx
4XSMnuQByFH7z0dpi1qypINmxxUtbHKSGkbCNMYpufNRcYybRABoU3vN52orWeKt42+nGy1i
MpmKS8I0RikZ84F7nJzkAAhTK8x3autUAqpTZHcWPW5CkhpEYjdWJkn+gXtMkfQNeF4bwBdn
K1kSpzNldxaNYKKeGkmyOpYqafFxd7yepAN4XpvBt2YrWeKos2+HG01iApl6TXI5Risp84F7
XJ6kAHheu8GnZotaEqczZXcWnW/yk7pHwjRWJkn+gXtMkfQNqFErzMdt21RyqBNo1xjtYcKS
CknCNQYoSf4BeuyQ9A2YUQvNN2qLUwKqM2WnG61jIplKSsI0tiv58+F2vJz0DahTC81nahtV
cqrzaGcbnW9SkgpGYjf2JUn+gXtMkfQNeF4bwBdnK1kSpzNldxadb3KSGkbCNCYnOf/xejyQ
hAwIX2vBZ2ZbWGKmQ2QHF+1ugpLKRrI1Jic5//F6PJCEDAhfa8FnZltYYqZDZAcX7W6CkspG
sjUmJzn/8Xo8kIQMCF9rwWdmW1hipkNkBxftboKSykayNSYnOf/xejyQhAwIX2vBZ2ZbWGKm
Q2QHF+1ugpK6R2I15ifp/YF7TJH0DXheG8AXZytZEqczZXcWnW/ykzpGYjVWJmn+gXRsnAQA
qFTrzddtK1nCrYNoFxsNYrKeSkrCNHYrufMRdvycJAe4VOvNN2oLWRKns2R3Fx1l8pJaSXI1
ViZJ/oF7TJH0DXheG8AXZytZEqczZXcWnW/yk7pHwjRWJkn+gXtMkfQNeF4bwBdnK1kSpzNl
dxadb/KTukfCNPYn+f8heEyR9A14XhvAF2crWRKnM2V3Fp1v8pO6R0I19idJ/vF6PJCEDAhf
a8FnZltYYqZDZAcX7W6CkspGsjUmJzn/8Xo8kIQMCF9rwWdmW1hipkNkBxftboKSykayNSYn
Of/xejyQhAwIX2vBZ2ZbWGKmQ2QHF+1ugpLKRrI1Jic5//F6PJCEDAhfa8FnZltYYqZDZAcX
7W6CkspGsjVWJun/MXrskvQNeF4bwBdnK1kSpzNldxadb/KTukfCNNYn6f+Be5ye5AAIU2vN
J2tLVNKqM2WXG71iwp/KSjI59ihJ/oF7TJHEAxhTy8qHbdtUMqozZZcbvWLCn8pKMjn2KEn+
gXtMkfQNeF4bwBdnK1kSpzNldxadb/KTukfCNFYmSf6Be0yR9A14XhvAF2crWRKnM2V3Fp1v
8pO6R8I0ViZJ/iF6/JBUDnheG8AXZytZEqczZXcWnW/yk7pHwjRWJsn/IXpMkaQMCF9rwUdm
W1hipmNkBxfNboKS6kayNQYnOf/RekyR9A0oX2vBZ2Z7WGKmQ2QnF+1uopLKRpI1JicZ//F6
HJD0DXheG8AXZytZEqczZXcWnW/yk7pHwjRWJkn+gXtMkfQNeF4bwBdnK1kSpzNldxadb/KT
ukfCNFYmSf6Be+yQRAzYXRvAF2crWRKnM2V3Fp1v8pO6R8I0ViZJ/gF67JD0DThUe8/XamtT
EqbTazccrWEynnpKgj6WKYn0sXcMm/QNeF5byndo61RSrTNklxjdZcKdekoCORYsifFBcXyd
tAd4XhvAF2crWRKnM2V3Fp1v8pO6R8I0ViZJ/oF7TJH0DXheG8AXZytZEqczZXcWnW/yk7pH
wjRWJkn+gXtMkVQMyF+7wxdnK1kSpzNldxadb/KTukfCNFYmSf6Be8yQVAx4XkvBZ2ZbWEKm
Q2QHF81ugpLqRrI1Bic5/9F6PJCkDHheG8BHZltYYqZjZAcX7W6ikspGkjUmJxn/8XockIQM
KF8bwBdnK1kSpzNldxadb/KTukfCNFYmSf6Be0yR9A14XhvAF2crWRKnM2V3Fp1v8pO6R8I0
ViZJ/oF7TJH0Ddhfq8G3ZCtZEqczZXcWnW/yk7pHwjRWJkn+gXtMkXQM2F8bwGdmW1hipkNk
BxftboKSykayNSYnOf/xejyQhAwIX2vBZ2ZbWGKmQ2QHF+1ugpLKRrI1Jic5//F6PJCEDAhf
a8FnZltYYqZDZAcX7W6CkspGsjUmJzn/8Xo8kIQMCF9rwWdmW1hipkNkBxftboKSykayNSYn
Of/xejyQhAx4XrvBp2aLWhKnM2V3Fp1v8pO6R8I0ViZJ/oF7TJH0Dfhfu8EXZytWMqrDaHcb
rWPSnqpKwjS2K2nzsXc8nAQAeF7bzadqK1nCqiNoBxutY5KeekrSOTYnSf4hevyQVA7YXRvA
F2crWRKnM2V3Fp1v8pO6R8I0ViZJ/hF1TJBUA9hdG8AXZytZEqczZXcWnW/yk7pHwjRWJkn+
QXSsntQASFJrzedqe1XiqUNp1xjtYfKd+kgSORYrSfFBcWycpAN4XpvBt2YrWcKoA2lXGy1i
Ip6qSsI0FimZ8qF1TJEUB0hSW80HagtU4qozZdcXLW5SkLpHwjRWJkn+gXtMkfQNeF4bwBdn
K1kSp3NqpxvdYvKcek3iOfYoOfDBdJyctAB4UdvKN2p7WCKmY2t3Fh1uUpK6R4I7RiuZ87F3
DJz0DXhTC82naktU0q3DaFcbnW9SkgpGYjdWJkn+gXtMkfQNeF4bwBdnK1kSpzNldxZdYBKc
mkryOCYrufPRd4yfhAHYUGvOF2lrVsKqc2h3GV1l0p7qScI01ifp/4F7nJ7EAVhTq83HajtU
EqdDaqcavWHyk1pN8jgWK1nzoXa8nPQN2F+rwbdkK1kSpzNldxadb/KTukfCNFYmSf6Be0yR
NAH4VNvPV2i7VNKtk2sHGH1hop26R0I19idJ/kF3zJv0DbhTK8zXbRtVEqdzaIcb/WJinnpN
QjlWJun/MXrskvQNeF4bwBdnK1kSpzNldxadb/KTukfCNHYpyfRBdAyeZAC4VLvOZ2nLV0Kp
M2X3Fz1u8pOaSEI+ViaJ87F3jJvEAXheW83naktUgqrzb/cbnW9SkgpGYjdWJkn+gXtMkfQN
eF4bwBdnK1kSpzNldxZNYMKfak0yOXYoefJRdhycVAMIUMvPJ2v7U+KqU2pXG81uwpLqScI0
1ifp/4F7nJ7EAahU680XZwtVIqvjaCcbnW9SkgpGYjdWJkn+gXtMkfQNeF4bwBdnK1kSpzNl
dxZNYMKfak0yOTYpafMhdTyf1Ax4XxvBR2krWZKmk2R3Fn1g4p6aSmI+RitJ/lF2fJ0kB4hT
G8DXbQtUIqvjbwcbLWIimWpNcjlGKynzcXZMkSQAaFNrzSdrS1TSqiNodxY9bkKSGkRiN1Ym
Sf6Be0yR9A14XhvAF2crWRKnM2V3Fh1uUpK6R7I1Jic5//F6PJCEDAhfa8FnZltYYqZDZAcX
7W6CkspGsjUmJzn/8Xo8kIQMCF9rwWdmW1hipkNkBxftboKSykayNSYnOf/xejyQhAwIX2vB
Z2ZbWGKmQ2QHF+1ugpLKRrI1Jic5//F6PJCEDAhfa8FnZltYYqZDZAcX7W7ykxpGcjX2JUn+
gXtMkfQNeF4bwBdnK1kSpzNldxadb3KSGkbCNKYpmfRxdtycBAdoUxvAx2o7VHKq829XG41i
sp76StI5ViaZ9HF2TJEUAFhTK8xnattUEqcTaMcbTWICnlpNMj6WLFnzgXucnOQAWFM7zedq
61PSrSNoFxedb1KSCkZiN/YlSf6Be0yR9A14XhvAF2crWRKnM2V3Fp1vYp2KRmI69iVJ/oF7
TJH0DXheG8AXZytZEqczZXcWnW9CnFpIwjTWJ8n/AXrMkDQCmFE7zSdrW1TiqmNpVxftY1KS
mkYyOrYo+f/ReoyeFAJYUyvMZ2rbVEKr42sHGs1uwpIKRiI1Ziep8FF6TJD0DHhfG8H3aMtW
8qjTascXnW+yndpJwjRmKInzQXZsnAQAqFTLyqdmK1nSq7Nqhxn9YPKTakjyOIYsufPhdGyc
VAMIUDvB52kbWEKpM2VXGW1gMp9KS+I7NikZ8IF7vJ6UArhRC8ynaMtWQqmTZncWnW/yk7pH
wjRWJkn+gXtMkfQNeF4bwKdoy1YSp7Nktxl9YNKeikuyOaYrGfJBdTyd9A04UHvOF2crV1Ko
42g3G51gMpmaSnI1ViaJ8gF0vJ6UAnhey88na/tT4qpTalcbPWGCnZpGMjpmJxnwgXtsngQC
uFLrzDdoS1ZCqTNlhxn9YDKcqktyO7YpGfAheEyR9A14XhvAF2crWRKnM2V3Fp1v8pO6R4I7
hisJ84F0jJvUANhQa85XaPtUUqozarccvWKCkopGkjpWJsn/IXpMkbQCaFPLzSdra1QSpzNo
ZxstYpKeek0yOXYrSf4hevyQVA54XhvAF2crWRKnM2V3Fp1v8pO6R8I0Vib58WF0TJF0DLhR
+883ahtVYqrDaCcabWGCn7pHgjo2KEn+gXUMniQAOFMbz9dtC1SipjNltxodYAKc2kjCNIYp
efJRcbyclAJYU7vOZ2kLWOKpA2QnGJ1v0pxKSAI4pipp8eF0HJ/0DYhRe8/XaDtVoqjTaicY
PWxSkApEcjfmJcn/IXpMkWQCiFPLytdtm1QCqlNohxudbwKZak0SOeYrifSxd0yR5AIoUxvA
x2o7VGKqA2kXG11i4p7aRsI09if5/yF47JL0DXheG8AXZytZEqczZXcWnW/yk7pHwjRGKRnz
IXU8nzQBWFHrzOdoe1cSp7Nk1xedbwKcOk0yOYYrufRBcfyc5AAYUxvAB2h7VBKnk2THFz1s
8pO6R8I0ViZJ/oF7TJH0DXheG8AXZytZwqgDaaccbWKSnJpKYjomKHn/MXVMkKQDeF6bwbdm
K1nyqCNoVxs9ZeKeukcSOWYqmfRxdkyRFADIU3vN52orWcKqI2gHG61jkp56StI5Vibp/zF6
7JJUDnheG8AXZytZEqczZXcWnW/yk7pHwjRWJsn/IXpMkYQMCF9rwWdmW1hipkNkBxftboKS
ykayNSYnOf/xejyQhAwIX2vBZ2ZbWGKmQ2QHF+1ugpLKRrI1Jic5//F6PJCEDAhfa8FnZltY
YqZDZAcX7W6CkspGsjUmJzn/8Xo8kIQMCF9rwWdmW1hipkNkBxftboKSykayNSYnOf+Be+yQ
RAzYXRvAF2crWRKnM2V3Fp1v8pO6R8I0ViZJ/gF67JD0DVhe+88HagtUwqrDaHcW7WICmfpK
Aj7mK0nzwXa8nPQNqFMLzadqa1TCrRNldxYdbvKSOk3CNbYp+f+Be0yR9A14XhvAF2crWRKn
M2V3Fp1v8pO6R8I0ViZJ/oF7TJH0DXheG8AXZytZEqczZXcWnW/yk7pHwjRWJkn+gXtMkVQM
yF+7wxdnK1kSpzNldxadb/KTukfCNFYmSf6Be8yQVAx4XmvBZ2ZbWGKmQ2QHF+1ugpLKRrI1
Jic5//F6PJCEDAhfa8FnZltYYqZDZAcX7W6CkspGsjUmJzn/8Xo8kIQMCF9rwWdmW1hipkNk
BxftboKSykayNSYnOf/xejyQhAwIX2vBZ2ZbWGKmQ2QHF+1ugpLKRrI1Jic5//F6PJD0Ddhf
q8G3ZCtZEqczZXcWnW/yk7pHwjRWJkn+gXtMkXQM2F8bwMdoO1RiqkNoRxr9YjKeukciOXYr
efLxdrycVAN4XhvAF2crWRKnM2V3Fp1v8pO6R8I0ViZJ/oF7TJHEAxhTy8qHbdtUMqozZZcb
vWLCn8pKMjn2KEn+gXtMkfQNeF4bwBdnK1kSpzNldxadb/KTukfCNFYmSf6Be0yR9A14XrvB
p2aLWhKnM2V3Fp1v8pO6R8I0ViZJ/oF7TJH0Dfhfu8EXZ3tYYqZDZCcX7W6CkupGsjUGJzn/
0Xo8kKQMCF9LwWdmW1hCpkNkBxfNboKSykbCNCYnOf/RekyR9A0oX2vBZ2Z7WGKmQ2QnF+1u
opLKRpI1JicZ//F6HJD0DXheG8AXZytZEqczZXcWnW/yk7pHwjRWJkn+gXtMkfQNeF4bwLdm
m1iypDNldxadb/KTukfCNFYmSf6Be0yR9A14XpvBt2YrWVKtU2q3G91l8pJaSII+ZiiJ80F2
DJuUAohUa81XbQtXcqpzb7cZrW6ymdpGojVWJin/4XoMm/QNeF5byndo61RSrTNklxndZcKd
ekoCORYsKfFxcTyctAd4XhvAF2crWRKnM2V3Fp1v8pO6R8I0ViZJ/oF7TJH0DXheG8AXZ4tY
oqaTZncWnW/yk7pHwjRWJkn+gXtMkfQNeF4bwJdmi1gSp2NkBxftbqKSykayNQYnOf/RejyQ
pAwIX0vBZ2Z7WGKmQ2QnF+1ugpLqRrI1JidJ/vF6PJCkDHheG8BHZltYYqZjZAcX7W6ikspG
kjUmJxn/8XockIQMKF8bwBdnK1kSpzNldxadb/KTukfCNFYmSf6Be0yR9A14XhvAF2crWbKm
g2TXFZ1v8pO6R8I0ViZJ/oF7TJH0DXheG8AXZ6tYsqYzZQcX7W6CkspGsjUmJzn/8Xo8kIQM
CF9rwWdmW1hipkNkBxftboKSykayNSYnOf/xejyQhAwIX2vBZ2ZbWGKmQ2QHF+1ugpLKRrI1
Jic5//F6PJCEDAhfa8FnZltYYqZDZAcX7W6CkspGsjUmJzn/8Xo8kIQMCF9rwWdmW1gSp5Nk
xxc9bPKTukfCNFYmSf6Be0yR9A14XhvAF2crWZKmk2R3Fm1gIplKSlI5pixZ84F7nJzkABhT
28o3ajtUUqpzaGcbnW/SnopLojnGK7nzgXssnAQHCFPrzTdqO1QSp+NoZxstYrKeak3CNJYr
efKBe5ybJABYU6vN923bVDKqw2gXF51vQpz6SsI0titp87F3PJwEAHhe282naitZsqaDZNcV
nW/yk7pHwjRWJkn+gXtMkfQNeF4bwBdnq1iypjNlpxuNYoKeikuiOZYrWfOBe4ycBACYVOvN
F2fbVMKt42+HG71iAp66R0I11idJ8ZF2/JyUALhUy8oHZqtXoqZjZEcXLW6ikipJkjV2Jyn/
gXsMnkQACFOrzddtO1QSpwNpdxa9bgKdukbCNFYrufThdoybRAAYXxvAt2abWLKkk2Z3Fp1v
8pO6R8I0ViZJ/oF7TJH0DXheG8AnZitYEqaTa9cVnW/yk7pHwjRWJkn+gXtMkfQNeF4bwBdn
m1byqDNl9xcdbvKcqkpyOTYrifRRcUyRhAN4XhvBp2YrWQKoE2p3Fh1u8pyqSnI5NiuJ9FFx
TJGUA3heO8HnadtXoqaDZHcWXWNynEpIojtWJpnxsXecmwQAGFE7zbdpW1cypvNrdxfNYfKT
mkgyO5YqufKhdCyepAN4XuvPd2jrVgKrg2qXGc1hUpAaRMI0ViZJ/oF7TJH0DXheG8AXZytZ
EqczZfcXPW7yk7pI4jmmK0nzsXdsnOQAeF77zTdqG1ViqsNodxZdYkKeukcSOUYrOfOxdyyc
NABoU1vBF2c7VIKqU2jHG51v0p8KTQI+pitJ/kF2fJ00B2hTG8DHajtUcqrzb8cbbWKSnkpK
wjTWKEn+UXZcnEQAOFPLyndmK1mypoNk1xU9bPKTukfCNFYmSf6Be0yR9A14XhvAF2crWdKo
02pXG61jgp5KSpI4lig58iF1PJ/0DChQG8CXZotYEqfjakcavWJCnmpK0jlWJjnxUXdsn/QN
GFPrymdq21QyqiNodxZNYuKeCkqCOYYsSf4hevyQVA54XhvAF2crWRKnM2V3Fp1v8pO6R8I0
ViaJ8WF0bJzEAQhT681Ha9tXYquTawcYXWPinKpLMjiGKvnx4XSMnXQMeFELzadqS1TSreNv
xxfNYfKTOkZiNVYmmfGxd2ycRACoUwvNF2drVsKrE2t3Fv1iApnKSjI5ditZ84F7nJzkAMhT
W83HbStZsqaDZNcVnW/yk7pHwjRWJkn+gXtMkfQNeF4bwBdn61byqBNoRxrtYgKe6ksiOiYq
6fDxdYyd5AJoUuvMx2ubVnKo82n3Fx1u8pyqSnI5NiuJ9FFxPJDEDMhfC8GXaZtYQqYDZCcY
nW9ykhpGwjSGKXnyoXb8nCQAaFMbwHdq21NiqsNoVxuNYvKTmktyPpYsufNRcUyRNABIUtvK
p2orWbKmg2TXFT1s8pO6R8I0ViZJ/oF7TJH0DXheG8AXZytZ8qgjalcZnW8ynFpIcjuWKcn0
IXU8n2QDeF7bzAdoK1mSpvNqlxm9YsKfykoyOQYqqfDxdxyQZAMIXyvBp2YrWTKpg2l3Fq1u
8pN6SNI79iVJ/oF7TJH0DXheG8AXZytZEqczZXcWnW/yk7pHwjRWJqnxkXRsnvQNyFO7zmdp
K1gSp/NpZxmdb2KdukfiOuYqSf6xekyRNAJoUbvDF2crWRKnM2V3Fp1v8pO6R8I0ViZJ/oF7
TJH0DXheG8AXZytZEqczZbcZfWDSnopLsjmmKxnyQXSsnkQCuFGbymdri1diqeNp9xm9YHKS
ekgiO3YrefLxdrycpAG4UfvPp2jrVpKtQ2k3F51vwpIKRpI69iVJ/oF7TJH0DXheG8AXZytZ
EqczZXcWnW/yk7pHwjRWJkn+gXtMkfQNyFH7zxdnq1gSqXNqpxvdYvKcek3iOVYmCfDhdUyR
9AzIXxvA12urVuKoU2p3Fl1gEpyaSvI4Jiu589F3jJ4UAshR28+XbVtVsqlDa7cZfWDSnopL
sjmmKxnyQXSsnkQCuFGbymdrK1kCqBNqdxatbhKdakZCOlYnGfCBe7yelAK4UQvMp2jLVkKp
k2Z3Fp1v8pO6R8I0ViZJ/oF7TJH0DXheG8AXZytZEqczZXcWnW/yk7pHgjuGKwnzgXSMm9QA
2FBrzldo+1RSqjNqtxy9YqKSikaSOlYmyf8hekyRtAJoU8vNJ2trVBKnM2hnGy1ikp56TTI5
ditJ/iF6/JBUDnheG8AXZytZEqczZXcWnW/yk7pHwjRWJkn+gXtMkfQNiFF7z9doO1XyqCNq
VxnNYVKQukfCNFYmSf6Be0yR9A14XhvAF2crWRKnw2oXGV1g4p9aSNI7dikZ8CF4TJH0DXhe
G8AXZytZEqczZXcWnW/yk7pHYjdWJkn+gXtMkfQNeF4bwBdnK1kSpzNldxZdY3KZekiCO8Yr
ifQhdTyfNAKYUavP12irU0KpM2X3Fz1u8pN6S0I+ViaJ87F3jJvEAXheW83naktUgqrzb/cb
nW9SkgpGYjdWJkn+gXtMkfQNeF4bwBdnK1kSpzNldxa9YHKZekiCO8YrifQhdTyfFAMoUBvA
l2aLWBKnE2r3HJ1vMp6KSwI+ZipJ/sF2vJyUAOhT28qXaitZsqaDZNcVnW/yk7pHwjRWJkn+
gXtMkfQNeF4bwBdn+1Yiq+Nvhxu9YcKfakqSOfYoOfBRdHydJAeIU3vPN2p7WCKmY2t3Fh1u
UpK6RxI7ZiqZ9HF2TJHUAUhSy81HaitZsqaDZNcVnW/yk7pHwjRWJkn+gXtMkfQNeF4bwBdn
+1Yiq+Nvhxv9YNKeGkmyOnYnSf+Behyf9A34X7vBF2fLVgKqE2jXHI1i8pNqSvI4hiy584F7
jJvUAEhSy8pnaptUwq3jb8cbjWKSnkpKwjSGK1nz8XZ8nZQAuFMLzRdni1iippNm1xWdb/KT
ukfCNFYmSf6Be0yR9A14XhvAF2erWLKmM2UHF+1ugpLKRrI1Jic5//F6PJCEDAhfa8FnZltY
YqZDZAcX7W6CkspGsjUmJzn/8Xo8kIQMCF9rwWdmW1hipkNkBxftboKSykayNSYnOf/xejyQ
hAwIX2vBZ2ZbWGKmQ2QHF+1ugpLKRrI1Jic5//F6PJCEDAhfa8FnZltYEqeTZMcXPWzyk7pH
wjRWJkn+gXtMkfQNeF4bwBdnK1mSppNkdxZtYCKZSkpSOaYsWfOBe5yc5AAYU9vKN2o7VFKq
c2hnG51vIplKSsI0titp87F3PJwEAHheO82navtU4qrTb4ccXWXinrpHEjlGK2nzoXa8nDQH
uFQLzXdmK1mypoNk1xU9bPKTukfCNFYmSf6Be0yR9A14XhvAF2crWSKmM2RHFz1hUpC6R8I0
ViZJ/oF7TJH0DXheG8AXZytZEqeDapcZnW9ykjpGQjXWJ4nxYXRsnMQBCFPrzUdrC1hiq5Nk
VxdtYRKdCkaSNZYpqfGhdnydhACIU0vMx2lbVUKmA2THF31uwpJaSRI1VidJ/4F6TJAUAphR
+8/3aJtYEqdzaxcYnW/CnXpKAjl2K7nzUXGcm0QMeF7bzJdo21ZyqDNlpxmtYyKZSkqiO3Yr
6fDxdWyQBANIX0vOF2cLVuKo82mHGr1gkpzqScI0pikp8UF0XJ1EAphRS863ZCtZEqczZXcW
nW/yk7pHwjRWJkn+gXtMkUQCmFEbwJdmq1iSpvNqlxm9YsKfykoyOQYqifDxd+yQ1AyIUPvO
p2Z7WNKo02pXG61jgp5KSpI4pig58jF6TJG0AxhQG8AXaDtUoqpTaLccTWVCkrpHAjjWKbnx
4XRMkSQCSFLLyudqS1YyqpNrBxi9bgKdikaSOlYmafFxdIydBAFYUXvPR2krWeKoU2q3GY1j
QpxaSJI69iXp/TF4/JJEDvhfu8EXZ7tW4qrjb7ccLWLintpKMjlWJrn0UXGcnEQAuFQrzBdn
O1ZCqjNlpxuNYoKeikuiOZYrWfPhekyRVAzIX7vDt2QrWRKnM2V3Fp1v8pO6R8I0ViZJ/oF7
TJHkAihTu85naetVMqjDaYcZzWHwYVQb/unykzpGYjVWJrnxAXG8nCQAiFTbyqdqO1RyqjNl
ZxnNYvKTGkZyNfYlSf6Be0yR9A14XhvAF2crWRKnM2V3Fp1vIpyKSxI+pisp8aF27J+EA0hf
q84XZntXEqezZNcXnW8SnKpK4jn2LFnzgXucnMQBqFTrzRdny1SiqlNohxudbyKeqkqyOWYq
KfNBdlyc9A3YX6vBt2SLWhKnM2V3Fp1v8pO6R8I0ViZJ/oF7TJH0Dfhfu8EXZ1tYYqZDZAcX
7W6CkspGsjUmJzn/8Xo8kIQMCF9rwWdmW1hipkNkBxftboKSykayNSYnOf/xejyQhAwIX2vB
Z2ZbWGKmQ2QHF+1ugpLKRrI1Jic5//F6PJCEDAhfa8FnZltYYqZDZAcX7W6CkspGsjUmJzn/
8Xo8kIQMCF8bwLdmm1iypDNldxadb/KTukfCNFYmSf6Be0yR9A14XpvBt2YrWTKnM2pXG21i
IplKSgI+ViY583FxDJw0B8hTG81XattUEqcTaIcbDWJCnmpNAj6mK2nzUXFskfQN+F8bwZdt
G1gSpoNkdxadb/KTukfCNFYmSf6Be0yR9A14XhvAF2crWRKnM2V3Fp1v8pO6R8I0ViZJ/oF7
TJH0DXheG8AXZ4tYoqaTZncWnW/yk7pHwjRWJkn+gXtMkfQNeF4bwJdmi1gSp0NkBxftboKS
ykayNSYnOf/xejyQhAwIX2vBZ2ZbWGKmQ2QHF+1ugpLKRrI1Jic5//F6PJCEDAhfa8FnZltY
YqZDZAcX7W6CkspGsjUmJzn/8Xo8kIQMCF9rwWdmW1hipkNkBxftboKSykayNSYnOf/xejyQ
hAwIX2vBZ2YrWbKmg2TXFZ1v8pO6R8I0ViZJ/oF7TJH0DXheG8AXZ6tYsqYzZacZjWKCnspK
8jg2K4nzgXusnNQASFJrzedqi1cSpzNldxadb/KTukfCNFYmSf6Be0yR9A14XhvAF2crWRKn
M2VHGP1iIpkqTTI5ditJ/mF2bJzEAQhT6823aStZEqczZXcWnW/yk7pHwjRWJkn+gXtMkfQN
eF4bwBdnK1kSp5Nkxxc9bPKTukfCNFYmSf6Be0yR9A14XhvAF2crWZKmk2R3Fs1ugpLKRpI1
Jic5/9F6PJCkDAhfS8FnZntYYqZjZAcX7W6ikspGsjUGJzn/8XockIQMCF8bwGdmW1hCpjNl
dxbNboKSykaSNSYnOf/RejyQpAwIX0vBZ2Z7WGKmY2R3Fp1v8pO6R8I0ViZJ/oF7TJH0DXhe
G8AXZytZEqczZdcXLW5SkLpHwjRWJkn+gXtMkfQNeF4bwBdnK1kSp7Nk1xedb7KZ2kgCORYs
ef+BegybxAO4U9vNV21LVuKtQ2g3HL1hkp76TQI7ZiqJ9LF3fJC0Bxhfe8EXZ0tYcqZzb3cW
nW+ymdpIAjkWLHn/gXoMm8QDuFPbzVdtS1birUNoNxydb/KTukfCNFYmSf6Be0yR9A14XhvA
F2crWRKnM2V3Fj1uQpIaRMI0ViZJ/oF7TJH0DXheG8AXZytZEqczZfcXPW7yk+pGsjUmJxn/
8Xo8kKQMCF9LwWdme1hipmNkBxfNboKSykaSNSYnOf/RejyQhAwoX2vBZ2YrWWKmQ2QnF51v
8pPqRrI1JicZ//F6PJCkDAhfS8FnZntYYqZjZAcXzW7yk7pHwjRWJkn+gXtMkfQNeF4bwBdn
K1kSpzNldxadb1KSCkZiN1YmSf6Be0yR9A14XhvAF2crWRKnM2V3Fh1uUpK6R7I1Jic5//F6
PJCEDAhfa8FnZltYYqZDZAcX7W6CkspGsjUmJzn/8Xo8kIQMCF9rwWdmW1hipkNkBxftboKS
ykayNSYnOf/xejyQhAwIX2vBZ2ZbWGKmQ2QHF+1ugpLKRrI1Jic5//F6PJCEDAhfa8FnZltY
YqZDZAcX7W7ykxpGcjX2JUn+gXtMkfQNeF4bwBdnK1kSpzNldxadb3KSGkbCNKYpmfRxdtyc
BAdoUxvAx2o7VHKq829XG41isp76StI5ViZp87F3LJxkAIhTG8B3attTYqrDaFcbjWLyk5pK
MjnGK/nzUXGMm9QAyFMbwNdqG1USp+Nvpxu9YkKeWk0yOXYrufPhekyRRAI4UxvA92oLVCKr
Q2iHG51vUpIKRmI3ViZJ/oF7TJH0DXheG8AXZytZEqczZXcWHW5SkrpHAjnmK0n+UXZcnIQA
SFJ7zddqO1QSp/Nohxt9ZQKeukcyOYYsmfRxdmycBAB4XpvBF2g7VKKqU2i3HE1lUpKaRnI1
BifZ8NF6bJCUDHheW8+naltUoqrzb2cbnW/Cn7pH8jV2J7nwgXtMnAQHGFPbyqdqS1gSp5Nk
xxc9bFKQukfCNFYmSf6Be0yR9A14XhvAF2crWRKnA2RHF51uUp0aRMI0ViZJ/oF7TJH0DXhe
G8AXZytZEqczZccZfWDykzpGQjVWKVnzMXYsnDQHqFQbwGdpK1kSpoNkdxaNYNKcukdCNVYp
WfMxdiycNAeoVBvAd2krWSKmE2SHGC1uQpK6RwI41im58eF0TJEkAkhSy8rnaktWMqqTawcY
vW4ynbpGkjpWJmnxcXSMnQQBWFF7z0dpK1niqFNqtxmNY0KcWkiSOvYl6f2Be0yR9A14XhvA
F2crWRKnM2V3Fp1v8pM6RmI1ViZJ8aF2vJz0AEhSO80HaitZ8qoTaEca7WICnrpHAjnmK0n+
UXZcnIQASFJ7zddqO1RypjNl1xctblKQGkTCNFYmSf6Be0yR9A14XhvAF2crWRKnM2W3GX1g
0p6KS7I5pisZ8kF1PJ1UAwhQG8FHaStZkqaTZHcWTWDCn5pKcjmGK1nzgXs8niQBWFAbwHdq
21NiqsNoVxuNYvKTmkoyOcYr+fNRcYyb1ADIUxvAt2abWLKkM2V3Fp1v8pO6R8I0ViZJ/oF7
TJH0DXhe28/3aAtUIqtDaIcbzWMCncpLYjomKInykXRcnQQBqFKrz3do61WSpjNqZxstYpKe
ek0SPuYnGfCBe8yQVAx4XsvPJ2sLVKKq42hnG51vspxqS+I6ViYp83FxPJwEAFhTC80XZwtU
4qqjaMcbTWUymZpKcjlWJun/MXrskvQNeF4bwBdnK1kSpzNldxadb/KTukfCNJYpqfGhdnyd
hACIU0vM92lbVbKpQ2u3Go1g4p9KSxI45ikp8UF3zJD0AmhTq813autTwq2TZFcXLW6inbpH
QjX2J0n+UXR8ndQAyFPLzQdqK1lyqsNvBxttYtKeqkrCNHYq+fRBcbycJAd4XrvBp2aLWrKk
M2V3Fp1v8pO6R8I0ViZJ/oF7TJH0DXhem8G3ZitZ4qjjb4cbDWICmapKwjSWLGnzsXecmxQA
iFM7zadqW1TiqlNotxyNYvKTWk3yOBYrWfOhdvyc9A24UyvMF2f7U8KqE2jHG31lAp6aSjI5
NidJ/iF6/JBUDnheG8AXZytZEqczZXcWnW/yk7pHwjRWJsn/IXpMkUQCeF7bzSdr61OiqjNl
pxyNYpKeqkrCNOYrKfOBe6yc5ABYU2vNJ2vrUwKqM2U3Gy1iMpl6TYI5pitJ/nF2LJw0AMhT
K8x3amtYEqfjaGcb/WISmUpK4jmWLFnzgXv8nJQAeF47zKdqu1QSp8NoFxtdYkKeikuiOTYn
Sf4hevyQ9A3YXbvDF2crWRKnM2V3Fp1v8pO6R8I0ViZJ/oF7rJ7kAlhRG8DXaMtWoqjzavcc
PWGCnSpJwjSWKlnxgXvMkDQCmFE7zSdrW1TiqmNplxjtY6KSKkmyNWYn+f+Be2yfRAF4XjvB
F2frVgKok2Z3Fp1v8pO6R8I0ViZJ/oF7TJH0DXheG8AXZytZEqczZbcZfWDSnopLsjmmKxny
QXSsnkQCuFGbykdmG1hiq5NrBxidYbKcakqCOVYpifShdhyf9A34X7vBF2f7ViKrE2jHG01i
4p66R4I7hipp8IF7rJvEAThTC803attUEqeTZMcXPWzyk7pHwjRWJkn+gXtMkfQNeF4bwBdn
K1kSpzNldxadb7KcakqCOVYpifShduyfhAM4UcvNV2orVtKtE2gnF61uop26R0I19idJ/sF0
XJwkAEhSW80XZytUAqqDaBcbXWUCnppKwjT2J/n/IXhMkfQNeF4bwBdnK1kSpzNldxadb/KT
ukfCNFYmSf6Be4yeFAJYUyvMZ2rbVEKr82qXGS1gMpw6TbI49ig58IF1DJ4kADhTG8/XbQtU
QqkzZfcXPW7yk2pI8jh2K/nzUXZcnPQNCFHLzDdpK1nyrQNpNxuNYtKeSkrCNPYn+f8heEyR
9A14XhvAF2crWRKnM2V3Fp1v8pO6R8I0ViZJ/oF7DJ4kADhTG8/XbQtUsqlDazcZTWKynrpI
Aj52Kxn/sXocn/QN+F+7wRdna1YCquNoRxrdYvKTukrSOeYrKfNBcbyc1AB4XrvBp2aLWhKn
M2V3Fp1v8pO6R8I0ViZJ/oF7TJH0DYhRe8/XaDtV8qgjalcZzWFSkBpEwjRWJkn+gXtMkfQN
eF4bwBdnK1kSpzNltxodZTKc+khSOZYs6fDxdYyeFALIUdvPl217VxKns2TXF51vMp86TcI0
lit58kFxfJ30DThT6813artU0q2zaHcWPW5CkhpEwjRWJkn+gXtMkfQNeF4bwBdnK1kSpzNl
VxkdZTKc+khSOZYs6fDxdayfpAN4XpvBt2YrWTKos293Fl1iwp96TfI4ViYJ83F2LJxkALhU
m80XZ4tYoqaTZncWnW/yk7pHwjRWJkn+gXtMkfQNeF4bwMdoG1XCrcNoVxitYyKe6kpiOiYo
mfGxd5ybBAAYUTvNR2YbWEKpM2X3Fz1u8pNqSPI4hiy584F7bJ3EAahTS80XZ4tYoqaTZncW
nW/yk7pHwjRWJkn+gXtMkfQNeF4bwMdoG1XCrcNoFxm9YlKdykniNVYnSf/RdUyRdAzYXxvA
92g7VDKqk29nG51vIp6KSxI+pitJ/kFxbJzEAahUa82navtTwq2DaGcb/WICnrpHEjlGKznz
sXcsnDQAaFMbwLdmm1iypJNmdxadb/KTukfCNFYmSf6Be0yR9A14XhvAl2aLWBKnQ2QHF+1u
gpLKRrI1Jic5//F6PJCEDAhfa8FnZltYYqZDZAcX7W6CkspGsjUmJzn/8Xo8kIQMCF9rwWdm
W1hipkNkBxftboKSykayNSYnOf/xejyQhAwIX2vBZ2ZbWGKmQ2QHF+1ugpLKRrI1Jic5//F6
PJCEDAhfa8FnZitZsqaDZNcVnW/yk7pHwjRWJkn+gXtMkfQNeF4bwBdnq1iypjNlhxlNZQKe
KkoyPkYrSf5RdlyclAC4VDvNB2prVFKqI2h3Fk1lAp66RyI5dit58vF2vJz0DVhTq83HattU
8q3Db7ccjWLyk2pK0jl2K2nzcXaMmzQHaFN7wRdni1iippNm1xWdb/KTukfCNFYmSf6Be0yR
9A14XhvAF2cbWCKmA2TXGD1s8pO6R8I0ViZJ/oF7TJH0DXheG8AXZytZoqjTancWHW5ykjpG
QjWWKanxoXZ8nYQAiFNLzDdmW1WyphNkhxh9YUKS6kYCO7YpafOxdzycBAAoUsvOZ2t7WCKm
g2SXF61uEp1qRsI1VidJ/4F6rJ4UAphR+8+nZitZUqlTa3cWrWEynnpK4jmmK5n0UXH8kPQN
uFKbz+doS1YSp+NqRxpNZQKe2kjiOfYoOfCheryfxAwoUBvAN2jbVtKrw2lXGf1gop26RzI7
NimJ8ZF3/J4UAihQu8MXZytZEqczZXcWnW/yk7pHwjRWJkn+gXv8nhQCeF6bwZdmq1jSqNNq
VxutY4KeSkqSOJYoOfIhemyQBAOYUKvBR2brVvKoE2hHGu1iAp7qSzI6Jir5/4F7DJ+UA3he
G88HaptUcqrzb6ccLW7yk3pLQjumKSnxgXucnsQBqFTrzXdoC1SyqUNrVxdtYcKS6knCNHYp
ufFBd7yd1AIYUUvOF2fbVnKo82pnGi1gEpzqSWI39iX5/TF4/JJ0DNhfG8CHaNtUwq3zb8cb
jWKSnkpKwjSmLJn0UXb8nDQHSFIbwAdoe1QSp+NoZxvtYsKf2koCOUYrKf+Be+yQRAzYXbvD
F2crWRKnM2V3Fp1v8pO6R8I0ViZJ/oF7XJ6kANhQa87XawtW4qvDaicYnW9ykhpGwjSmKcn0
cXacnAQHuFSrzQdqS1QSpyNqJxudb1KSCkZiN1YmSf6Be0yR9A14XhvAF2crWRKnM2V3Fk1g
wp9qTTI5Nilp8yF1PJ/EDMhQG8FHaStZkqaTZHcWfWDinppKYj5GK0n+UXZ8nSQHiFMbwPdq
m1RyqsNodxZNYuKeykryODYrifORdkyRVAzIX7vDt2QrWRKnM2V3Fp1v8pO6R8I0ViZJ/oF7
TJF0DNhfG8BnZltYYqZDZAcX7W6CkspGsjUmJzn/8Xo8kIQMCF9rwWdmW1hipkNkBxftboKS
ykayNSYnOf/xejyQhAwIX2vBZ2ZbWGKmQ2QHF+1ugpLKRrI1Jic5//F6PJCEDAhfa8FnZltY
YqZDZAcX7W6CkspGsjUmJzn/8Xo8kIQMeF67wadmi1oSpzNldxadb/KTukfCNFYmSf6Be0yR
9A34X7vBF2cLWTKow2hHGl1i8pPKSjI5JitZ86F2/Jv0DVhSq8rXbdtUwq0zZfcXbWMimUpK
4jlWJqnzcXEsnCQAuFSrzQdqS1SiphNldxYdbvKSOk0COmYn+f+Be0yR9A14XhvAF2crWRKn
M2V3Fp1v8pO6R8I0ViZJ/oF7TJH0DXheG8C3ZptYsqQzZXcWnW/yk7pHwjRWJkn+gXtMkfQN
eF6bwbdmK1lipkNkBxftboKSykayNSYnOf/xejyQhAwIX2vBZ2ZbWGKmQ2QHF+1ugpLKRrI1
Jic5//F6PJCEDAhfa8FnZltYYqZDZAcX7W6CkspGsjUmJzn/8Xo8kIQMCF9rwWdmW1hipkNk
BxftboKSykayNSYnOf/xejyQhAwIX2vBF2eLWKKmk2Z3Fp1v8pO6R8I0ViZJ/oF7TJH0DXhe
G8CXZotYEqfjamcb7WKCnopLojmWK0n+YXZsnMQBCFPrzbdpK1kSpwNrFxtNZWKZSkriOVYm
qfOhdnydhACIU7vOF2crWRKnM2V3Fp1v8pO6R8I0ViZJ/oF7TJH0DXheG8AXZytZEqczZXcW
nW/yk7pHwjRWJkn+gXtMkfQNeF4bwBdnK1mypoNk1xWdb/KTukfCNFYmSf6Be0yR9A14XhvA
F2erWLKmM2UnF+1ugpLqRrI1JicZ//F6HJCEDChfa8FnZntYEqczZScX7W6CkupGsjUmJxn/
8Xo8kKQMCF9rwUdmW1hipjNlBxftbqKSukfCNFYmSf6Be0yR9A14XhvAF2crWRKnM2V3Fp1v
8pO6R8I0ViZJ/oF7TJH0DXheG8AXZytZEqeTZMcXPWzyk7pHwjRWJkn+gXtMkfQNeF4bwBdn
K1mSppNkdxbdZZKcekqCPpYoef/BcXyfNAC4U1vKd2gLVFKtM2V3Ft1lkpx6SoI+lih5/8Fx
LJ7UADhU28/XbWtTcqZTZHcW/W6SkvpNwjRWJkn+gXtMkfQNeF4bwBdnK1kSpzNldxadb/KT
ukfCNFYmSf6Be0yR9A14XhvAF2crWRKnM2XXFy1uUpC6R8I0ViZJ/oF7TJH0DXheG8AXZytZ
EqezZNcXnW+ikspGsjUGJzn/8XockIQMKF9rwUdmW1hipmNkdxadb6KSykayNQYnOf/xehyQ
hAwIX0vBZ2ZbWEKmQ2QHF51vgpLKRpI1ViZJ/oF7TJH0DXheG8AXZytZEqczZXcWnW/yk7pH
wjRWJkn+gXtMkfQNeF4bwBdnK1kSpzNldxY9bkKSGkTCNFYmSf6Be0yR9A14XhvAF2crWRKn
M2X3Fz1u8pPKRrI1Jic5//F6PJCEDAhfa8FnZltYYqZDZAcX7W6CkspGsjUmJzn/8Xo8kIQM
CF9rwWdmW1hipkNkBxftboKSykayNSYnOf/xejyQhAwIX2vBZ2ZbWGKmQ2QHF+1ugpLKRrI1
Jic5//F6PJCEDAhfa8FnZltYYqZDZAcXnW9SkgpGYjdWJkn+gXtMkfQNeF4bwBdnK1kSpzNl
dxYdblKSukcyO4YsufMRdryb5AB4XsvNB2pLVNKtE2hnG91isp6qSsI0dit58uF23JwEAHhe
e83nbVtU4qoTaGcbnW/ynkpNojmWLPnzgXuMnMQBeF5bzedqu1SCqsNoVxttYpKSukdyOxYr
Sf5hdmycxAEIU+vNF2frVKKqM2XXFy1uUpC6R8I0ViZJ/oF7TJH0DXheG8AXZytZEqezZNcX
nW/SngpKEj5WK1nzUXGMm8QBeF7bzedqy1PiqjNlhxtNZSKZSkriOaYrSf6BdFycRAAYU9vK
x217WMKpY2RXF/1u8pP6SHI5Jiv580FxXJz0DUhSG8A3ZttXEqYzZXcbbWWSnnpNcjk2J0n+
IXr8kFQO2F0bwBdnK1kSpzNldxadb/KTukfCNFYmSf6xemyQ9AzYULvDF2crWRKnM2V3Fp1v
8pO6R8I0ViZJ/oF7/J4UAnhem8GXZitWAqqDaBcbXWUimbpHsjpWJkn/MXpMkeQCWFEbwJdm
K1YCqoNoFxtdZSKZukeiOlYmaf9xdUyQRAzIXxvA12urVuKoU2p3Fk1gwp9qTTI5Nilp8yF1
PJ/UDLhQG8FHaStZMqjDarcabWPSnNpIkjpWJrnx4XSMnuQByFH7z0dpi1qypDNldxadb/KT
ukfCNFYmSf6Be0yR9A14XpvBt2YrWRKoE2iHG51iwp+aStI5Viap86F2fJ2EAIhTG8DXaptU
EqfjaGcb7WLCn9pKAjlGKyn/gXvskEQM2F27wxdnK1kSpzNldxadb/KTukfCNFYmSf6Be4ye
FAJYUyvMZ2rbVEKr82sHGj1hgp16S9I7Riq58lF3/J6UArhSm8EXaDtUoqpTaLccTWVCkupJ
wjTWJ+n/gXucnsQBWFOrzcdqO1QSp1NohxztYgKemkrSOVYmafIxcYybBACoVBvAt2abWLKk
M2V3Fp1v8pO6R8I0ViZJ/oF7TJH0DXhe28yXbetWUqijaLccPWGCnUpJkjpWJsn/IXpMkTQB
+FQbwNdqG1XSrQNpdxbdYgKe2kpSOZYsyfOBe+yQRAzYXRvAF2crWRKnM2V3Fp1v8pO6R8I0
ViZJ/qF0zJs0AjhRi83XbYtXYqnzaWcZjWMCn2pLcjs2KYnyAXpMnuQAyFN7zddt+1OipmNk
pxjNYfKTOkZiNVYmafEBcUyRNABIUtvKJ2srWVKqw2gXGw1iMpk6SsI09if5/yF4TJH0DXhe
G8AXZytZEqczZXcWnW/yk7pHEjtmKpn0cXZsn8QBqFNLzbdpW1fCqANppxxtYpKcmkqSNWYn
GfCBe8yQVAx4XsvPJ2v7U+KqM2VXGq1jIp7qSsI09if5/yF4TJH0DXheG8AXZytZEqczZXcW
nW/yk7pHEjtmKpn0cXYsntQA2FBrzjdmK1gSpmNrdxYdblKSukciO0YrafMhcVyc9A2oUyvM
x23bVBKn829XG61jIpnKSnI5hiyZ9DF2XJyUAIhTG8DHajtUYqoDaRcbXWLinrpHYjXmJ+n9
IXhMkfQNeF4bwBdnK1kSpzNldxadb/KTukdCNfYnSf7xejyQhAwIX2vBZ2ZbWGKmQ2QHF+1u
gpLKRrI1Jic5//F6PJCEDAhfa8FnZltYYqZDZAcX7W6CkspGsjUmJzn/8Xo8kIQMCF9rwWdm
W1hipkNkBxftboKSykayNSYnOf/xejyQhAwIX2vBZ2ZbWGKmQ2QHF+1ugpLKRrI1Vibp/zF6
7JL0DXheG8AXZytZEqczZXcWnW/yk7pHwjTWJ+n/gXu8niQHiFOLzedtO1QSp+NoZxv9YjKZ
mkrSORYrCfORdkyRJAeIUxvA92oLVCKrQ2iHG51v0p4KShI5piup9HFxjJvkAHhey80HagtU
MqrDaLccXWXintpGwjT2J/n/IXjskvQNeF4bwBdnK1kSpzNldxadb/KTukfCNGYnaf+xeuyf
VA54XhvAF2crWRKnM2V3Fp1v8pO6R8I0Vib58WF0TJF0DLhR+883ahtVYqrDaCcavW6Cn7pH
gjo2KEn+gXRcnEQAGFPbysdtm1gSp/Np9xltYJKcukcSO2YqmfRxdiye1ADYUGvON2bbVyKm
Y2t3Fr1gApx6SzI4dikp8dF1TJEEAhhR288Ha5tW8qhja9cVPWzyk7pHwjRWJkn+gXtMkfQN
eF4bwBdnK1mSppNkdxZtYCKZSkpSOaYsWfOBe4yb1ABIUsvK92rbVDKqg2gHG21ikp56TdI5
Viap9LF3DJzkAFhT680XZwtVoq3zb4cbTWWSkrpHYjXmJ+n9IXhMkfQNeF4bwBdnK1kSpzNl
dxadb/KTukciO0YpafGBe4yddAe4UVvPh2rrU7KpQ2unGJ1vMp+qSMI01idp8QFxjJ60AuhT
28pnZhtYoqYzZbcZjWBSkLpHwjRWJkn+gXtMkfQNeF4bwBdnK1kSpzNldxadb/KTukmCO4Yr
CfOBdIyb1ADYUGvO12jLVjKqA2kHG21iop96S0I+likJ8RF2jJuEAShQG8CXZotYEqdzaocb
XWUymUpN4jlmKkn+8XScndQDeF77yidra1QCqhNohxudb1KSCkZiN1YmSf6Be0yR9A14XhvA
F2crWRKnM2V3Fp1v8pO6R8I0FimZ88F2TJ40B1hTu85naWtWwqpzaHcZXWXSnupG8jUGKEn+
AXrskPQNOFELzcdqG1VSqjNldxuNYkKe2koCPqYrafOBe+yQRAzYXRvAF2crWRKnM2V3Fp1v
8pO6R8I0ViZJ/nF0LJ40AmhS+88HaAtWQqmTZtcVLWxCkApEQjX2J0n+EXS8nCQHuFSrzQdq
S1TiqjNlhxxNZSKeCkoCPmYqSf6RdByc9A2oUwvNZ2obVXKq82hnG51vIp6qSqI5liy581Fx
jJsEB0hSW83naitZwqojaBcbnW8imWpK4jnmK4n0QXG8m9QASFIbwNdqG1XSrYNoFxedb1KS
CkZiN/YlSf6Be0yR9A14XhvAF2crWRKnM2V3Fp1v4pzqSmI6JiiJ8qF0vJ0EAihQG8CXZotY
EqfDavccbWIinkpNAj7mK1nz4XZMkeQCKFMbwLdmm1iypDNldxadb/KTukfCNFYmSf6Be0yR
9A14XsvPJ2v7U+KqU2pXGz1hgp2KRnI6VicZ8IF7zJBUDHhe+88HagtUsq0jaHcWTWLCn2pN
MjlWJqnzMXYsnAQAeF7LzQdqW1Qiq1NotxuNYvKTGkZyNfYl6f2Be0yR9A14XhvAF2crWRKn
M2V3Fp1v8pM6RmI1ViY5//F6PJCEDAhfa8FnZltYYqZDZAcX7W6CkspGsjUmJzn/8Xo8kIQM
CF9rwWdmW1hipkNkBxftboKSykayNSYnOf/xejyQhAwIX2vBZ2ZbWGKmQ2QHF+1ugpLKRrI1
Jic5//F6PJCEDAhfa8FnZltYYqZDZAcX7W6CkspGwjT2J/n/IXhMkfQNeF4bwBdnK1kSpzNl
dxadb/KTukdCNfYnSf6he9yd1ADIU9vK52orWWKqw2gHG41i0p4KTcI0dir59EFxvJwkB3he
m8Hna/tT4qoTaHcWfWICmdpKEjmWLPnzkXYsnEQMWF4bwJdmK1iSrfNrVxctbvKTukfCNFYm
Sf6Be0yR9A14XhvAF2crWRKnM2V3Fp1v8pO6R8I0Vibp/zF67JL0DXheG8AXZytZEqczZXcW
nW/yk7pHwjTWJ+n/gXs8kIQMCF9rwWdmW1hipkNkBxftboKSykayNSYnOf/xejyQhAwIX2vB
Z2ZbWGKmQ2QHF+1ugpLKRrI1Jic5//F6PJCEDAhfa8FnZltYYqZDZAcX7W6CkspGsjUmJzn/
8Xo8kIQMCF9rwWdmW1hipkNkBxftboKSykayNSYnSf4hevyQVA54XhvAF2crWRKnM2V3Fp1v
8pO6R8I0VibJ/yF6TJEkAmhTa81nahtVcqrzaHcWfWLSnopLsjmmK+nwgXtMkfQNeF4bwBdn
K1kSpwNrFxtNZWKZSkriOVYmqfOhdnydhACIU7vOF2crWRKnM2V3Fp1v8pO6R8I0ViZJ/oF7
TJH0DXheG8AXZytZEqczZXcWnW/yk7pHwjRWJkn+gXvskEQM2F0bwBdnK1kSpzNldxadb/KT
ukfCNFYmSf4BeuyQ9A0oX2vBZ2Z7WGKmQ2QnF+1uopLKRpI1Jic5/9F6PJCEDHhea8FnZntY
EqczZScX7W6CkupGsjUmJxn/8XockIQMKF9rwWdme1gSpzNldxadb/KTukfCNFYmSf6Be0yR
9A14XhvAF2crWRKnM2V3Fp1v8pO6R8I0ViZJ/oF7TJFUDMhfu8MXZytZEqczZXcWnW/yk7pH
wjRWJkn+gXvMkFQMeF5byndo61RSrfNrVxfdZcKdekoCORYsKfGhdgyblAwYXxvAd2ZLWFKt
M2V3Ft1lkpx6SoI+lihp/8FxfJ80ALhTW8p3aAtUUq0zZXcWnW/yk7pHwjRWJkn+gXtMkfQN
eF4bwBdnK1kSpzNldxadb/KTukfCNFYmSf6Be0yR9A3YX6vBt2QrWRKnM2V3Fp1v8pO6R8I0
ViZJ/oF7TJF0DNhfG8BHZltYYqZjZAcX7W6ikspGkjUmJxn/8Xo8kKQMCF9rwRdnW1hipmNk
dxadb6KSykayNQYnOf/xehyQhAwoX2vBR2ZbWGKmY2R3Fp1v8pO6R8I0ViZJ/oF7TJH0DXhe
G8AXZytZEqczZXcWnW/yk7pHwjRWJkn+gXtMkfQNeF67wadmi1oSpzNldxadb/KTukfCNFYm
Sf6Be0yR9A34X7vBF2dbWGKmQ2QHF+1ugpLKRrI1Jic5//F6PJCEDAhfa8FnZltYYqZDZAcX
7W6CkspGsjUmJzn/8Xo8kIQMCF9rwWdmW1hipkNkBxftboKSykayNSYnOf/xejyQhAwIX2vB
Z2ZbWGKmQ2QHF+1ugpLKRrI1Jic5//F6PJCEDAhfG8C3ZptYsqQzZXcWnW/yk7pHwjRWJkn+
gXtMkfQNeF6bwbdmK1niqONvhxsNYgKZqkrCNIYrWfPhdoyb1ABoU1vNV2o7VBKnE2hHGv1i
Yp5KSsI0Niu59PF2vJzUAGhTG8A3a5tT0q3DaKccnW8ynopLwjSGLJnzoXb8nBQHiFM7zedq
S1gSp4NqNxudbxKemkryOCYrufOBe+yQRAzYXRvAF2crWRKnM2V3Fp1v8pO6R8I0ViZJ/gF6
7JD0DbhTq80XZ/tUAqpDaEca/WIynqpKwjSWK7nzYXG8nPQNiFPLysdt21QyqsNodxadYOKe
CkqiOZYsmfTReryfpAxYX3vBF2drVqKqQ2jHG11l4p66R/I4ViZp/3F1TJD0DXhT68p3autT
oqpTZHcWPW5CkhpEYjdWJkn+gXtMkfQNeF4bwBdnK1kSpzNldxatbiKdukZiOvYlSf6Be0yR
9A14XhvAF2crWRKnM2V3Fp1vQpxaSMI01ifJ/4F0XJxEABhT28rHbStZYqkzZXcXLW7yk6pI
4jtWJsn/gXRcnEQAGFPbysdtK1lyqTNlVxdtYfKSCkZyNVYmifIBdLyelAJ4XsvPJ2v7U+Kq
U2pXGz1hgp2aRgI6VicZ8IF7bJ4EArhS68w3aEtWQqkzZYcZ/WAynKpLcju2KRnwIXjskvQN
eF4bwBdnK1kSpzNldxadb/KTukfCNNYn6f+Be0ye1ACIUxvNJ2sLVAKqM2WXG71iwp/KSjI5
ViaJ8zF2TJEkAGhTa80na0tU0qojaBcXnW9SkgpGYjf2JUn+gXtMkfQNeF4bwBdnK1kSpzNl
dxadbzKcWkjiOWYqOfNxdhydNAMIUrvOZ2nrVQKoI2mHGk1jQpzaSAI41idJ8ZF2/JyUALhU
y8qnZntXEqezZNcXnW8inIpL4jnmK5nzkXZMkZQAiFRrzedqC1QCqjNlVxotZTKZSkoSPlYm
6f8xeuySVA54XhvAF2crWRKnM2V3Fp1v8pO6R8I0VibJ/yF6TJEEAqhU682HattTAqozZbcc
vWLCn2pNIjmmK2nzMXY8nAQAGFPbygdqK1nyrQNpNxuNYtKeCkrCNJYrefKBe5ybJABYU6vN
923bVDKqw2gXF51vUpIKRmI39iVJ/oF7TJH0DXheG8AXZytZEqczZXcWnW8SnKpI4jtWJonx
YXT8njQC+FS7zmdp21cSp/NpZxmdb3KSekgiO3YrefLxdrycpAG4UGvMR2bbV2KmA2THF51v
MpyqSGI3ViZJ/oF7TJH0DXheG8AXZytZEqczZXcWnW/yk7pHwjSWKanxoXZ8nYQAiFNLzNdo
y1aiqPNq9xztY1KdyknCOhYpmfPBdkyeNAdYU0vOF2erWLKmM2WnGa1j0p4KShI5RitJ/vF0
nJ3UA3he+8ona2tUAqoTaIcbnW9SkgpGYjdWJkn+gXtMkfQNeF4bwBdnK1kSpzNldxadb/KT
ukfCNBYpmfPBdkyeNAdYU7vOZ2lrVsKqc2h3GV1l0p7qRvI1BihJ/gF67JD0DThRC83HahtV
UqozZXcbjWJCntpKAj6mK2nzgXvskEQM2F0bwBdnK1kSpzNldxadb/KTukfCNFYmSf5xdCye
NAJoUvvPB2gLVkKpk2bXFZ1v8pO6R8I0ViZJ/oF7TJH0DXheG8AXZ+tVkq3zajcZDWIymRpJ
sjqWKanxMXSMnnQHKFAbwJdmi1gSp/Np9xydbzKeiksCPmYqSf7BdryclADoU9vKl2orWbKm
g2TXFZ1v8pO6R8I0ViZJ/oF7TJH0DXheG8AXZwtWkq3zajcZDWIymRpJsjqGKBnwgXvMkFQM
eF47z5dtK1nSqgNptxytY/KT+koyOTYr2fNBccyc9A3YX6vBt2QrWRKnM2V3Fp1v8pO6R8I0
ViZJ/oF7TJEkAkhSy8rnagtXIqvjaCcbPWGCnWpI8jiGLLnz4XRsnKQMSF9Lzhdnq1iypjNl
pxmtYyKZSkrCNHYqefJRdhyc9A3YX6vBt2QrWRKnM2V3Fp1v8pO6R8I0ViZJ/oF7TJEkAkhS
y8rnaktWMqqTawcYvW7ykrpGkjpWJsn/IXpMkRQCaFM7zbdtO1QSp+NoRxpNZQKeukcCPnYr
efJRcTycRACoVMvKp2o7VHKqw2h3Fk1i4p7KSvI4NiuJ85F2TJFUDMhfu8O3ZCtZEqczZXcW
nW/yk7pHwjRWJkn+gXtMkXQM2F8bwGdmW1hipkNkBxftboKSykayNSYnOf/xejyQhAwIX2vB
Z2ZbWGKmQ2QHF+1ugpLKRrI1Jic5//F6PJCEDAhfa8FnZltYYqZDZAcX7W6CkspGsjUmJzn/
8Xo8kIQMCF9rwWdmW1hipkNkBxftboKSykayNSYnOf/xejyQhAx4XrvBp2aLWhKnM2V3Fp1v
8pO6R8I0ViZJ/oF7TJH0Dfhfu8EXZ9tWwq3DaOcbbWXinrpHEjlGKynzQXFsnOQAOFNbzQdq
K1nCrcNodxZ9YtKeikuyOaYrSf6hdvycJACIU/vK523rUwKqM2WnG41i0p6aSjI5liyJ9JF2
LJD0Ddhfq8G3ZItaEqczZXcWnW/yk7pHwjRWJkn+gXtMkfQNSF/Lzidmi1eypDNldxadb/KT
ukfCNFYmSf6Be0yR9A14XqvP92grWZKms2T3Fx1uMpxaSOI5Zio583F2HJ3UDAhSu8E3ZttX
8qmDZCcXXWASnJpK8jgmK7nz0Xecn4QBKF8rwadmy1giptNrpxedbvKSukbCNbYpqfFhdKye
RAx4XlvOd2krWSKp82i3G71iAp5qTRI+5idJ/kF3zJ4EAhhRG8DHaBtVwq3DaBcZvWJSncpJ
4jWmKHn/0XVMkdQCiFHbzOdrC1ZyqGNrdxZtYJKcekjSOOYpqfHRdeyS9A14XhvAF2crWRKn
M2V3Fp1v8pO6R8I05imp8YF7zJA0AphRO80na1tU4qpjabcY7WPyk/pJojpWJknxkXb8nJQA
uFTLyqdmK1nSq7Nqhxn9YPKTakjyOIYsufPhdGycVAMIUDvB52kbWEKpM2VXGW1gMp9KS+I7
NikZ8IF7vJ6UArhRC8ynaMtWQqmTZtcVLWxCkApEQjX2J0n+EXS8nCQHuFSrzQdqS1TiqjNl
hxxNZSKeCkoCPmYqSf6RdByc9A2oUwvNZ2obVXKq82hnG/1u8pMaRnI19iXp/YF7TJH0DXhe
G8AXZytZEqczZXcWnW/yk6pIkjn2KDnwQXdsngQBiFFLzhdnq1iypjNlhxkdZQKeakoyPpYs
+fORdiyc9A1oUUvNF2eLWKKmk2Z3Fp1v8pO6R8I0ViZJ/oF7TJH0DXheG8DHaBtVwq3DaBcZ
vWJSncpJ8jXmKEn/0XVMkXQM2F8bwPdoO1QyqpNvZxudbyKeiksSPqYrSf5hdvyclACIUxvA
x2o7VGKqA2kXG11i4p66R2I15ifp/SF4TJH0DXheG8AXZytZEqczZXcWnW/yk7pHQjX2J0n+
UXqckCQMqF/Lwcdm+1jCpuNkpxdNbiKSakYSNYYnmf9RepyQJAyoX8vBx2b7WMKm42SnF01u
IpJqRhI1hieZ/1F6nJAkDKhfy8HHZvtYwqbjZKcXTW4ikmpGEjWGJ5n/UXqckCQMqF/Lwcdm
+1jCpuNkpxdNbiKSakYSNVYm6f8xeuyS9A14XhvAF2crWRKnM2V3Fp1v8pO6R8I01ifp/4F7
nJ7EA6hS68/HaytZ0qvDagcZnWDinJpIcjv2KunysXXsnUQCaFF7z+doK1nyqINqFxltYPKT
akjSOyYpefDhdIye5AJ4XhvAF2crWRKnM2V3Fp1v8pO6R8I0ViZJ/oF7TJH0DXheG8AXZytZ
EqczZXcWnW/yk7pHwjRWJkn+IXr8kFQOeF4bwBdnK1kSpzNldxadb/KTukfCNFYmyf8hekyR
JAyoX8vBx2b7WMKm42SnF01uIpJqRhI1hieZ/1F6nJAkDKhfy8HHZvtYwqbjZKcXTW4ikmpG
EjWGJ5n/UXqckCQMqF/Lwcdm+1jCpuNkpxdNbiKSakYSNYYnmf9RepyQJAyoX8vBx2b7WMKm
42SnF01uIpJqRhI1hieZ/4F77JBEDNhdG8AXZytZEqczZXcWnW/yk7pHwjRWJkn+AXrskPQN
qFLryldqK1nyqoNoFxttYvKTakrSOSYrefLhdoyc5AB4XvvKp2rbVHKqw2h3Fg1iAp5qTQI+
5iuJ9LF3TJEEBxhTK8wXZ+tT4qpDaHcbjWLSngpKYj72LHnyIXH8nOQAGFPrzRdn61MyqgNp
dxZNYuKeykryODYrifMxdkyRVAzIX7vDF2crWRKnM2V3Fp1v8pO6R8I0ViZJ/oF7zJBUDHhe
y80HaltUIqtTaLcbLWLyk2pK0jk2K5n0cXacnAQHuFSrzfdtm1QSp+Nvhxydb8Kf+koSOaYs
KfMxdkyRNADIU8vKF2o7VMKtg2i3HC1iEpkKSsI0tiy58+F23JzkABhTC80XZytU4qoTaKcc
LWKykrpHcjkWK0n+gXtMkfQN2F+rwbdkK1kSpzNldxadb/KTukfCNFYmSf6Be0yRdAzYXxvA
12qbVMKtM2hnG01lQp56TXI5tixZ84F7LJzkABhTG8A3aptUwq0zaGcb/WIynkpKojVWJrnx
EXpMkUQAGFMLzVdq61MyqsNodxadYtKeSkoiPuYrmfRBcVyc9A14UwvN123bVDKqM2W3G21i
Ep4KSqI55itp83F2TJH0DXheu8GnZotaEqczZXcWnW/yk7pHwjRWJkn+gXtMkfQN+F+7wRdn
21NyqjNltxxtYoKeukrSOVYmifMxdkyR9ABIUuvKx20bVRKn42hnG+1iwp/aSgI5Risp/4F7
TJH0DXheG8AXZytZEqczZXcWnW/yk7pHwjRWJkn+gXtMkfQNeF4bwBdnK1kSpzNldxadb/KT
ukfCNFYmSf6Be0yR9A14XhvAt2abWLKkM2V3Fp1v8pO6R8I0ViZJ/oF7TJH0DXhem8G3ZitZ
YqZDZAcX7W6CkspGsjUmJzn/8Xo8kIQMCF9rwWdmW1hipkNkBxftboKSykayNSYnOf/xejyQ
hAwIX2vBZ2ZbWGKmQ2QHF+1ugpLKRrI1Jic5//F6PJCEDAhfa8FnZltYYqZDZAcX7W6CkspG
sjUmJzn/8Xo8kIQMCF9rwRdni1iippNmdxadb/KTukfCNFYmSf6Be0yR9A14XhvAl2aLWBKn
w2qnHG1iYp5KTdI5ViY583F2PJzkAFhTq823bYtTIquTb8cbjWKSnkpKwjSWLLnz8XZMnOQA
GF8bwNdr21RiqjNoZxu9YkKeGk1iPmYq6fQxdlyclACIUxvA12qbVBKnA2R3F51vgp5qS8I0
Jiv58+F2/JyEAEhSe8EXZ4tYoqaTZtcVnW/yk7pHwjRWJkn+gXtMkfQNeF4bwBdnG1iiqTNk
Nxedb8KSCkkyOvYo6f0xePySRA64UqvNZ2rbVDKp02gnGq1ugp8aSbI6hir59FFx3J4EALhU
y8ynbftT0quDaAcbbWJyknpL4jumKrnxMXocn/QN+F+7wRdn61WiqkNohxudb9KfSk0iObYr
ufOhdkyRVAzIX7vDp2SbWqKkg2qXGZ1vcpJ6SDI5Fit58jFxTJG0A3heK8EXZptYEqfzafcZ
bWCSnLpHcjn2KDnwsXpMkKQDeF7rz1do+1XiqDNlxxs9YYKdekgyORYrefIxcRyf9A2IUXvP
12g7VaKo02onGD1s8pO6R8I0ViZJ/oF7TJH0DXheG8AXZytZwqgDaaccbWKSnJpKYjomKJnx
sXecmwQAGFE7zUdmG1hCqTNl9xc9bvKTakjyOIYsufOBeyycBAcIUzvM52oLVBKnk2THFz1s
UpC6R8I0ViZJ/oF7TJH0DXheG8AXZytZEqezZNcXnW+CkspGsjUmJzn/8Xo8kIQMCF9rwWdm
W1hipkNkBxftboKSykayNSYnOf/xejyQhAwIX2vBZ2ZbWGKmQ2QHF+1ugpLKRrI1Jic5//F6
PJCEDAhfa8FnZltYYqZDZAcX7W6CkspGsjUmJzn/8Xo8kIQMCF9rwWdmW1hipkNkdxY9bkKS
GkTCNFYmSf6Be0yR9A14XhvAF2crWRKnM2X3Fz1u8pNKSBI+pivZ83FxXJz0DbhU681naitU
AqoTaMcbPWXCnxpNcjlGKynzcXZMkfQASFLrysdtG1USp/NvVxutY/KTakrSOSYrefLhdoyc
RAB4XpvB52v7U8Kqg2i3HK1j8pO6SjI5ditJ/pF0HJxEDBhfG8C3ZptYsqSTZncWnW/yk7pH
wjRWJkn+gXtMkfQNeF4bwCdmm1cippNr1xWdb/KTukfCNFYmSf6Be0yR9A14XhvAF2ebVvKo
M2X3Fx1uIp8KTRI+xim580FxnJ1EB6hU28ynaltU4qqzZLcavWACn0pIcjUmJ4nyMXY8nAQA
WFD7zUdrG1hiq4NkdxbdYfKTOkYCOEYpWfJxd4yeRAIYUdvMl2abVKKmk2RHF51u8pK6RnI1
5idJ/kF3zJ4EAhhRG8A3aNtW0qvDaVcZ/WCinbpHMjs2KYnxkXf8nhQCKFC7wxdnK1kSpzNl
dxadb/KTukfCNFYmSf6Be4ye5AAYU+vNt2lbV9KrE2qHGm1gop26R0I19idJ/lF0XJyEAAhT
K8x3autUEqfzaGcb/WICnrpHYjXmJ+n9gXtMkfQNeF4bwBdnK1kSpzNldxadb/KTmkgyO5Yq
ufKhdCyepAN4XpvBt2YrWeKo42+nG41i8pN6SvI4FitJ/lF2/JwkADhTC80XZ7tVkqqDaDcb
bWLykxpGcjX2Jen9gXtMkfQNeF4bwBdnK1kSpzNldxadb/KTOkZiNVYmOf/xejyQhAwIX2vB
Z2ZbWGKmQ2QHF+1ugpLKRrI1Jic5//F6PJCEDAhfa8FnZltYYqZDZAcX7W6CkspGsjUmJzn/
8Xo8kIQMCF9rwWdmW1hipkNkBxftboKSykayNSYnOf/xejyQhAwIX2vBZ2ZbWGKmQ2QHF+1u
gpLKRsI09if5/yF4TJH0DXheG8AXZytZEqczZXcWnW/yk7pHQjX2J0n+cXScmwQA6FPrygdq
K1nSrcNoBxudYuKemkpyOfYs6fSxd+ybRABoU3vN52orWRKqA2mHHE1lwp+6RwI+dit58oF7
nJzkAAhTK8x3autUoqozZfcXbWMimWpKcjmWLHnygXtMnAQAWFMbwPdoG1XirXNotxwtbpKS
ukdiNeYn6f0heEyR9A14XhvAF2crWRKnM2V3Fp1v8pO6R/I15iip8CF17JL0DXheG8AXZytZ
EqczZXcWnW/yk7pHwjTmKanxgXvMkHQMqFKrysdtu1biqvNvpxotZSKZektyOSYrufMBeoyd
1AKIUuvPp2ZbWNKrg2gHG21i0p1aSpI4Zic58jF6TJG0A3hem8HXaztWAqvDabcZLWCSnHpL
QjXmK/n/IXp8kPQMeF8bwadmm1gSp/Np9xltYJKcukfiO6YpifJxd2yelAIoUBvA52hLVtKo
I2nHGX1gop0aRMI0ViZJ/oF7/JJEDphRK8znbWtU0q2TawcYXWPSnEpLMjsGKEn+AXrskPQN
qFELzWdqW1Qiq1NotxudbxKeiksyPhYrifSBe+yQRAzYXRvAF2crWRKnM2V3Fp1v8pO6R8I0
ViZJ/qF0vJ40AYhSO893aHtXEqezZNcXnW8CnGpNEjlGK0n+QXZ8nbQAeF7Lzadq+1RSqiNo
dxYNY3KeCkqCOaYrSf4hevyQVA7YXRvAF2crWRKnM2V3Fp1v8pO6R8I0ViZJ/gF67JD0Dahf
y8HHZvtYwqbjZKcXTW4ikmpGEjWGJ5n/UXqckCQMqF/Lwcdm+1jCpuNkpxdNbiKSakYSNYYn
mf9RepyQJAyoX8vBx2b7WMKm42SnF01uIpJqRhI1hieZ/1F6nJAkDKhfy8HHZvtYwqbjZKcX
TW4ikmpGEjWGJ5n/UXpMkVQMyF+7wxdnK1kSpzNldxadb/KTukfCNFYmSf6Be8yQVAx4XsvP
J2n7VeKo42l3Fl1jcp+qRuI71ipJ/mF0bJ7EAwhR688XZytZEqczZXcWnW/yk7pHwjRWJkn+
gXtMkfQNeF4bwBdnK1kSpzNldxadb/KTukfCNFYmSf6Be0yR9A14XhvAF2crWRKnM2V3Fp1v
8pO6R8I0ViZJ/oF7TJH0Ddhfq8G3ZCtZEqczZXcWnW/yk7pHwjRWJkn+gXtMkXQM2F8bwMdm
+1jCpuNkpxdNbiKSakYSNYYnmf9RepyQJAyoX8vBx2b7WMKm42SnF01uIpJqRhI1hieZ/1F6
nJAkDKhfy8HHZvtYwqbjZKcXTW4ikmpGEjWGJ5n/UXqckCQMqF/Lwcdm+1jCpuNkpxdNbiKS
akYSNYYnmf9RepyQJAx4XrvBp2aLWrKkM2V3Fp1v8pO6R8I0ViZJ/oF7TJH0DXhem8G3ZitZ
YqZDZAcX7W6CkspGsjUmJzn/8Xo8kIQMCF9rwWdmW1hipkNkBxftboKSykayNSYnOf/xejyQ
hAwIX2vBZ2ZbWGKmQ2QHF+1ugpLKRrI1Jic5//F6PJCEDAhfa8FnZltYYqZDZAcX7W6CkspG
sjUmJzn/8Xo8kIQMCF9rwRdni1iippNmdxadb/KTukfCNFYmSf6Be0yR9A14XhvAl2aLWBKn
82lXGa1hIp/KSHI7hiqZ8jF0XJ6UAohRG8D3aAtWIqlDaocZnW/yk7pHwjRWJkn+gXtMkfQN
eF4bwBdnK1kSpzNldxadb/KTukfCNFYmSf6Be0yR9A14XhvAF2crWRKnM2V3Fp1v8pO6R8I0
ViZJ/oF7TJH0DXheG8AXZytZsqaDZNcVnW/yk7pHwjRWJkn+gXtMkfQNeF4bwBdnq1iypjNl
BxftboKSykayNSYnOf/xejyQhAwIX2vBZ2ZbWGKmQ2QHF+1ugpLKRrI1Jic5//F6PJCEDAhf
a8FnZltYYqZDZAcX7W6CkspGsjUmJzn/8Xo8kIQMCF9rwWdmW1hipkNkBxftboKSykayNSYn
Of/xejyQhAwIX2vBZ2ZbWBKnk2THFz1s8pO6R8I0ViZJ/oF7TJH0DXheG8AXZytZkqaTZHcW
jWAinmpK0jl2K2nzcXZMkcQBWFM7zadqy1MiqxNohxudbyKeqkqiOfYoSf6Be0yR9A14XhvA
F2crWRKnM2V3Fp1v8pO6R8I0ViZJ/oF7TJH0DXheG8AXZytZEqczZXcWnW/yk7pHwjRWJkn+
gXtMkfQNeF4bwBdnK1kSpzNl1xctblKQukfCNFYmSf6Be0yR9A14XhvAF2crWRKns2TXF51v
0pN6SCI7dit58vF2vJzUDXhey80HaktU0q2DaIcb/WICnrpHIjl2K3ny8Xa8nPQNuFMrzBdn
61MyqgNppxztYgKeek0CPqYrafNxdiyQ9A14XhvAF2crWRKnM2V3Fp1v8pO6R8I0ViZJ/oF7
TJH0DXheG8AXZytZEqczZXcWPW5CkhpEwjRWJkn+gXtMkfQNeF4bwBdnK1kSpzNl9xc9bvKT
mkcCONYsifHBdNycNAdYXhvAx2o7VHKq82/HG21ikp5KSsI0Fiu59OF23Jx0AIhTu8q3bRtV
EqfTaFcbrWOCnkpKwjSWK3nygXuMm9QASFLLymdq21TSrfNvhxu9YgKe2kbCNFYmSf6Be0yR
9A14XhvAF2crWRKnM2V3Fp1vUpIKRmI3ViZJ/oF7TJH0DXheG8AXZytZEqczZXcWHW5SkrpH
4jR2Kcn0QXFsnNQNeF7LzQdqS1TSrYNohxv9YgKeukeCOaYsKfMRdsycBADYVLvKJ2srWfKq
E2hHGu1iAp66RwI5ZipJ/qF2/JwkAIhT+8rnagtU4qpTZHcWnW/yk7pHwjRWJkn+gXtMkfQN
eF4bwBdnK1kSpzNldxadb/KTGkZyNfYlSf6Be0yR9A14XhvAF2crWRKnM2V3Fp1vcpIaRsI0
ViZJ/oF7TJH0DXheG8AXZytZEqczZXcWnW/yk7pHwjRWJkn+gXtMkfQNeF4bwBdnK1kSpzNl
dxadb/KTukfCNFYmSf6Be0yR9A14XhvAF2crWRKnM2V3Fp1v8pO6R8I0ViZJ/oF7TJH0DXhe
G8AXZytZEqczZXcWnW/yk7pHYjXmJ+n9gXtMkfQNeF4bwBdnK1kSpzNldxadb/KTOkZiNVYm
mfIxdkyRBACoVMvN52orWcKqI2gXGz1h8pO6R8I0ViZJ/oF7TJH0DXheG8AXZytZEqczZXcW
nW/yk7pHwjRWJkn+gXtMkfQNeF4bwBdnK1kSpzNldxadb/KTukfCNFYmSf6Be0yR9A14XhvA
F2crWRKnM2V3Fp1v8pO6R8I09if5/yF4TJH0DXheG8AXZytZEqczZXcWnW/yk7pHQjX2J0n+
oXuMnhQCWFMrzGdq21QypzNlpxuNYpKeek1yOaYrKfNxdkyRFABYUyvMZ2rbVBKnE2jHG01i
Ap5aTTI+lixZ8+F6TJH0DXheG8AXZytZEqczZXcWnW/yk7pHwjRWJkn+gXtMkfQNeF4bwBdn
K1kSpzNldxadb/KTukfCNFYm6f8xeuyS9A14XhvAF2crWRKnM2V3Fp1v8pO6R8I01ifp/4F7
PJCEDAhfa8FnZltYYqZDZAcX7W6CkspGsjUmJzn/8Xo8kIQMCF9rwWdmW1hipkNkBxftboKS
ykayNSYnOf/xejyQhAwIX2vBZ2ZbWGKmQ2QHF+1ugpLKRrI1Jic5//F6PJCEDAhfa8FnZltY
YqZDZAcX7W6CkspGsjUmJ0n+IXr8kFQOyF2rw6dkq1iypjNlhxlNZQKeKkoyPkYrSf4Rdryc
JAe4VKvNB2pLVOKqM2W3HC1i8p6qSsI0liv584F7TJzUAGhT28oHavtUAqpzaDcbjWKSkrpH
YjXmJ+n9IXhMkfQNeF4bwBdnK1kSpzNldxadb/KTukfiNVYnSf8hdeySRA7IXavDx2gbV8Kr
w2p3Fh1uMp8KTcI5piv5/4F7XJ4UAthdu8MXZytZEqczZXcWnW/yk7pHwjRWJkn+gXv8knQM
2F8bwGdmW1hipkNkBxftboKSykayNSYnOf/xejyQhAwIX2vBZ2ZbWGKmQ2QHF+1ugpLKRrI1
Jic5//F6PJCEDAhfa8FnZltYYqZDZAcX7W6CkspGsjUmJzn/8XocnYQCaFPbzTdr21PCrTNl
VxldYwKfykuyNSYnSf4hevyQVA54XhvAF2crWRKnM2V3Fp1v8pO6R8I0Vib5/QF67JD0DahR
K8xXavtUAqpzaGcbnW8inJpIEjtWJonzcXYMnPQNmFM7zSdrW1TiqjNlhxudb7KeqkrCNGYq
2fMRdvycBAcYU4vNB2orWSKrc2h3Fl1lAp6aSrI55isp83F2TJE0AIhTq80XZ+tUIqvzb8cb
/W7ykxpGcjX2Jen9gXtMkfQNeF4bwBdnK1kSpzNldxadb/KTCkTCNfYo6f0xeEyR9A14XhvA
F2crWRKnM2V3Fp1v8pO6R1I7piuJ9FF0bJ4kAhhfO87nbctUsqlDa0cYXWDSnDpGAju2KWnz
sXc8nAQAyF9Lzhdnq1iypjNlVxhtZRKeWkoyOXYrSf6xd4ycNABYU+vNx237UxKnk2THFz1s
QpC6R8I0ViZJ/oF7TJH0DXheG8AXZytZEqejaocbXWUinJpIEjs2J2nwMXGMmwQAGFE7zbdp
W1fSq7NvtxndYGKeek2SOlYmyf8hekyR1APIVNvK52orWXKqw28HG71jAp6aSsI09if5/yF4
/JL0DXheG8AXZytZEqczZXcWnW/yk7pHwjTGKbnzQXGcntQCqFF7wcdoC1TCqoNqFxstYlKd
yknyNbYomf9hdKyeFAKYUUvOF2erWLKmM2WnGb1gIpy6R3I5Niv584F7rJvEAThT68rnaitZ
sqaDZNcVLWzyk7pHwjRWJkn+gXtMkfQNeF4bwBdnK1mCqMNotxxNYNKcakhCNeYnGfCBe8yQ
VAx4XsvPJ2trVMKqw283G61jMplKSsI0hilp8VF0TJFUDMhfu8OnZCtZEqczZXcWnW/yk7pH
wjRWJkn+gXtMkTQCmFE7zSdrW1TiqmNptxodZTKc+khSOZYsOfIhdTyfNAFoUQvM52v7VaKo
U2q3Gh1uYpxKSgI+hilp8VF0LJAkAlhTy80HZgtY4qnTa8cXzWHykzpGYjVWJjnxUXdsn/QN
aFP7zRdn+1YyqONqdxZ9ZcKf+koyPqYrSf4hevyQVA7IXRvAF2crWRKnM2V3Fp1v8pO6R8I0
ViZJ/kF0rJ7UAEhSa83nantV0quzb7cZ3WBinnpNkjVmJznyIXU8nzQBaFELzOdr+1WiqFNq
txodbmKcSkoCPoYpafFRdCyQJAJYU8vNp2Z7VxKns2TXF51vspxqS+I6ViZZ82F2TJEkAlhR
y88XZ8tTIqtzaIccbWLykxpGcjX2JUn+gXtMkfQNeF4bwBdnK1kSpzNldxadb0KQektCPpYp
CfERdoybVAMIUNvMl23rVlKoo2i3HM1u0pLqScI01ifp/4F7jJ10B3he280na+tTIqszZTcb
bWKSnipKAj7WK0n+IXr8kFQO2F0bwBdnK1kSpzNldxadb/KTukfCNFYmSf4xeMyQVAx4XmvB
Z2ZbWGKmQ2QHF+1ugpLKRrI1Jic5//F6PJCEDAhfa8FnZltYYqZDZAcX7W6CkspGsjUmJzn/
8Xo8kIQMCF9rwWdmW1hipkNkBxftboKSykayNQYqOfGRdoyc1AGIVMvKF2cbV8Kt42jHGy1i
gp/KRrI1Vibp/zF67JL0DXheG8AXZytZEqczZXcWnW/yk7pHwjTmJcn/IXpMkSQCSFJbzcdq
O1RSqiNodxbdYNKcakjCNJYrufPBdkyRFABYUyvMZ2rbVBKnw2h3Ft1i4p66R/I4xivZ8zF2
vJuUAOhTC80XZxtVUqozZbccbWLSnspKcjk2K7nzgXuMnAQAyFMbwNdqG1XSrYNoFxedb1KS
CkZiN/Yl+f0xePySRA5IX7vOt2SbWqKkg2bHFU1gcp4aSbI6VicZ8IF7zJBUDHhey8+XahtV
MqoDaacbXWUCnppKwjR2Krn0YXasnAQAWFMbwLdmm1iypINmdxadb/KTukfCNFYmSf6Be0yR
9A14XhvA92g7VjKoM2XHGz1hgp26RsI0lipZ8YF7zJA0AfhU289XaLtU0q1DZEcXLW7yk3pI
0jtWJpnxAXbsn4QDqFGbzUdm61byqBNoRxrtYgKe6ktyOSYqGfCBe7yelAK4UQvM92g7VjKo
Y2vXFS1s8pO6R8I0ViZJ/oF7TJH0DXheG8AXZytZ0qjTalcbrWOCnkpKkjiWKsn0QXQMnmQA
uFRrzLdpW1cSpkNkpxkdYqKdukdCNfYnSf7BdGyeJAJ4XvvKJ2trVOKtw2h3Fj1uQpIaRMI0
ViZJ/oF7TJH0DXheG8AXZytZEqczZccVXWNymXpIgjvGK4n0IXU8nzQB+FTbz1dou1TSrWNk
RxfNYfKTOkZiNVYmifIBcUyRNABIUtvKJ2srWVKqw2gXGw1iMpk6SsI09if5/yF47JL0DXhe
G8AXZytZEqczZXcWnW/yk7pHwjTmJcn/IXpMkYQMCF9rwWdmW1hipkNkBxftboKSykayNSYn
Of/xejyQhAwIX2vBZ2ZbWGKmQ2QHF+1ugpLKRrI1Jic5//F6PJCEDAhfa8FnZltYYqZDZAcX
7W6CkspGsjUGKjnxkXaMnNQBiFTLyhdn61XCqDNqBxrtboKSukdiNeYn6f2Be0yR9A14XhvA
F2crWRKnM2V3Fp1v8pMKREI19idJ/lF3zJxEAJhT28oXZ8tUMqoDaQcbbWLyk7pKMjl2K0n+
UXZsnAQASFI7zedqK1nCrTNoRxo9ZUKeqkrCNFYrufOhdkyRRAB4XvvOF2cLVaKt82+HG01l
8pN6SnI5VibJ83F2fJ00AIhTO813ZitZsqaDZNcVPWzyk7pHwjRWJkn+gXtMkfQNeF4bwBdn
m1qipBNk1xg9bEKQCkRyN+YlqfGRdGye9A3IU7vOZ2krWBKn82lnGZ1vMp86TQI7FinZ80Fx
TJE0AmhRG8DXaMtWMqoDaQcbbWKinzpGAjjWLInxwXTcnDQHCF+rzadme1jyqUNp1xjtYTKc
WkjiOWYqOfNxdhydNAH4VNvPV2i7VNKtQ2THG+1jop26RzI7NimJ8ZF3rJ7kAlhRS863ZIta
EqczZXcWnW/yk7pHwjRWJkn+gXtMkfQNyF2bwbdmK1miqFNopxxtYtKeCkoSPoYrWfOBe2yR
NAFYUyvMd2r7UyKr42i3HC1i4p7aSsI05iuJ83F2LJw0B8hT+82nattUMqoTZXcW3WLCn2pN
EjnmK1nzgXs8niQBWFAbwMdt21RiqjNoVxttYvKTukbCNFYrufOhdkyRVAzIX7vDF2crWRKn
M2V3Fp1v8pO6R8I0ViZJ/oF7/JJ0DNhfG8AXattUMqpDaIcbXWUymUpK4jmmK0n+UXZcnAQA
qFSrzcdt61PiqlNo1xytY/KTakrSOTYrSf6Bdmyc5AC4VAvNx2o7VFKqc2hnG51v0px6SzI4
ViaZ8wF2vJz0DZhU683XagtUErMzZRcbjWIynqpKwjRWJyn/gXvskEQMeF67w7dkK1kSpzNl
dxadb/KTukfCNFYmSf6Be0yRRA64UjvNp2jrVvKqk2sHGF1j0p4KSAI7tisZ/7F6HJ/0Dfhf
u8EXZ+tVMqoDaRcbTWXCn2pKAj7mK1nz4XZMkUQAuFPrzXdq61OiqtNoxxttYtKeukdiNeYn
6f0xeEyR9A14XhvAF2crWRKnM2V3Fp1v8pO6RwI7tilp87F3PJwEAChSG8Fna4tXYqkzZCcY
nW9ykhpGwjQmKZnyoXVMkeQAmFMbwNdrC1Qiq1NopxytYyKeek1yOUYrKfOBe/ycNACIU3vN
122bVPKqg2iHG71i8pMaRnI19iX5/YF7TJH0DXheG8AXZytZEqczZXcWnW/yk3pIIjt2K3ny
8Xa8nKQBSF9rzLdpW1fSqxNoxxldYBKe6knCNNYn6f+BewyeJAFYUBvAB2rLVBKn82lXG61j
kp5qTfI4hiuJ9DF2XJyUAHheq83XattUcqrzb8cbfWJCnkpK4jlWJun/MXrsklQOeF4bwBdn
K1kSpzNldxadb/KTukfCNFYm+f0BeuyQ9A3IUXvNx23bVDKqg2inHE1i4p66R+I0Vilp85F2
jJvkAKhTC81XaitZoqjzaIcb/WIymQpKIjnmK7nzoXZskfQNuFPrzfdt21QSp8NopxxNZQKe
mkoyOVYmaf6BemyRlAx4XrvBp2aLWrKkg2Z3Fp1v8pO6R8I0ViZJ/oF7TJH0DXheG8DXaMtW
MqoDaQcbbWKin5pGsjj2KDnwgXocn/QN+F+7wRdnW1bCqxNrdxaNYhKeukfCO3YrWfNBcVyc
JABoU1vNF2ebVtKqw2gXG11lQp5aSnI5pitp84F77JBEDNhdq8MXZytZEqczZXcWnW/yk7pH
wjRWJkn+gXuMnhQCWFMrzGdq21RCq+NrBxo9YYKdukaSOlYmyf8hekyRtAKoUjvOF2c7VPKq
M2V3Gb1i4p56TdI5hitZ88F2TJFEArhT6813autToqrTaMcbbWLSnrpHYjXmJ+n9IXhMkfQN
eF4bwBdnK1kSpzNldxadb/KTukdyN9Yn6f+Be/yelACoVOvNN2qbVMKt42hnG51v0pP6SDI5
NivZ80FxzJzUDRhfG8C3ZptYsqSTZscVnW/yk7pHwjRWJkn+gXtMkfQNeF4bwBdn61byqBNo
RxrtYgKe6ksCOiYq6fDxdUyQpAN4XpvBt2YrWWKo42lXGJ1v4p5aSsI0Fim58+F23Jw0B/hT
G8C3ZptYsqSDZncWnW/yk7pHwjRWJkn+gXtMkfQNeF4bwNdoy1YyqgNpBxttYqKfSkmyOPYo
OfBBd8ybNAI4UYvN1217VxKns2TXF51vspxqS+I6ViZZ82F2TJG0AohTe82HautTkqozZdcX
LW5SkLpHwjRWJkn+gXtMkfQNeF4bwBdnK1kSpzNlxxVdY3KZekiCO8YrifQhdTyfNAH4VNvP
V2i7VNKtY2SXGM1h8pM6RmI1ViaJ8gFxTJE0AEhS28onaytZUqrDaBcbDWIymTpKwjT2J/n/
IXj8kkQOyF3rz3do61YCq+NqRxhNYwKc6kliN/YlSf6Be0yR9A14XhvAF2crWRKnM2V3Fp1v
IpyKSxI+pisp8aF27J+EA6hRK8zHbdtUcqgTaCcXrW6inbpHQjX2J0n+UXR8nSQHiFMbwHdq
21NiqhNphxu9YvKTGkZyNfYl6f2Be0yR9A14XhvAF2crWRKnM2V3Fp1v8pM6RmI1ViY5//F6
PJCEDAhfa8FnZltYYqZDZAcX7W6CkspGsjUmJzn/8Xo8kIQMCF9rwWdmW1hipkNkBxftboKS
ykayNSYnOf/xejyQhAwIX2vBZ2ZbWGKmQ2QHF+1ugpLKRrI1Jic5//F6PJCEDAhfa8FnZltY
YqZDZAcX7W6CkspGwjT2J/n/IXhMkfQNeF4bwBdnK1kSpzNldxadb/KTukdCNfYnSf6BdLyc
1AB4XuvN922bVNKtA2lXG21i8pN6SnI5ViaZ9IF2vJxUB9hU683XbetTIqsTaIcbnW+ynopL
wjSWLGnzsXecm4QAyFPLysdtm1QCqlNohxudbzKeSkpyOVYmifOxd4ybRAB4XuvN12orWaKq
U2h3Fk1iwp9qTdI5Vibp/zF67JL0DXheG8AXZytZEqczZXcWnW/yk7pHwjTWJ+n/gXuMnEQA
eF7Lygdq+1RCqsNotxydb8KfWk0yOXYrufOBe7yblAB4XvvNV2rbU8Kts2h3Fq1jApl6TdI5
Jit58kFx/JwkAGhTG8CnaktUEqfDb6ccTWJCnnpN8jgWJ0n+wXZ8nfQNuFQ7zSdr+1NiqoNo
pxxNZUKeqkqiOaYrSf4hevyQVA54XhvAF2crWRKnM2V3Fp1v8pO6R8I0VibJ/yF6TJEUB8hT
6813attUEqfDaKccbWJinkpNcjmWLHnygXuMmwQHuFTbyidrK1lyqsNoNxvdYuKeukcSPpYs
ufNRcZyb5AB4XlvNB2o7VBKqU2R3Fj1uQpIaRMI0ViZJ/oF7TJH0DXheG8AXZytZEqczZfcX
PW7yk8pGsjUmJzn/8Xo8kIQMCF9rwWdmW1hipkNkBxftboKSykayNSYnOf/xejyQhAwIX2vB
Z2ZbWGKmQ2QHF+1ugpLKRrI1Jic5//F6PJCEDAhfa8FnZltYYqZDZAcX7W6CkspGsjUmJzn/
8Xo8kIQMCF9rwWdmW1hipkNkBxedb1KSCkZiN1YmSf6Be0yR9A14XhvAF2crWRKnM2V3Fh1u
UpK6R/I6liyJ9HF2nJvEAXheO8znbctU8qrDaFcbnW8ymZpK8jiGLDnzMXacmyQHyFMLzXdq
21QSp9NvhxyNYjKZqkrCNFYrufOhdkyRJABoU3vN123bVHKqw2hXG21i8pMKSqI5liy586F2
XJz0DZhTO80na1tU4qpTZHcWPW5CkhpEYjdWJkn+gXtMkfQNeF4bwBdnK1kSpzNldxa9bvKS
ikZiOvYl+f0xePySRAKYURvAl2b7VRKqg29nGf1iQpK6RwI41im58eF0TJFEAphRG8B3aDtW
0quzZKcaLWUimWpLwjnmLInxsXeMm8QB+F8bwVdmK1kSpnNkdxadbrKSukfCNeYn+f+Be4yd
dAKIUXvPF2cLVuKo82mHGr1gkpzqScI0pikp8UF0XJ1EAphRS84XZ9tWcqjzamcaLWASnOpJ
YjdWJkn+gXtMkfQNeF4bwBdnK1kSpzNldxYtYBKcukdCNYYq+fRRcdyeBAC4VAvPx2srVCKr
42iHGx1uEpwKSoI5piv5/4F7DJ+UA3he28wHaDtVoqhTarcaHW4inwpNEj7GKbnzQXGMnXQH
WFDLzKdqi1PiqrNklxktYrKeSkpyNeYn+f+Be4yddAKIUXvPF2cLVuKo82mHGr1gkpzqScI0
pikp8UF0XJ1EAphRS863ZCtZEqczZXcWnW/yk7pHwjRWJkn+gXtMkUQA2FBrzsdrm1PCrdNq
xxm9YRKeakiCOaYrefKhdsyQFALIU1vN52qbWEKpM2X3Fz1u8pNqSII5pit58qF2TJFEABhT
G83nbetTEqcTaYccfWISnkpK4jlWJun/MXrsklQOeF4bwBdnK1kSpzNldxadb/KTukfCNFYm
yf8hekyRNAFYUyvMx21bVKKq42+nHC1i4p7aSjI5Viap86F2fJ2EAIhTG8DXahtV0q2DaBcX
nW9SkgpGYjf2Jfn9MXj8kkQCmFEbwJdm61WirTNohxudb7Kd2knCNGYn+f+Be4yddAKIUXvP
t2SLWhKnM2V3Fp1v8pO6R8I0ViZJ/oF7TJH0Dchdm8G3ZitZYqZDZAcX7W6CkspGsjUmJzn/
8Xo8kIQMCF9rwWdmW1hipkNkBxftboKSykayNSYnOf/xejyQhAwIX2vBZ2ZbWGKmQ2QHF+1u
gpLKRrI1Bio58ZF2jJzUAYhUy8oXZwtW0qvDaTcXnW8yn2pIwjsmKjn/8XpMkVQMyF+7wxdn
K1kSpzNldxadb/KTukfCNFYmSf6Be/ySdAzYXxvAV2ibVGKqg2i3HI1i8pNqTcI55ixJ/rF3
TJEUA6hQG8DHahtVMqoDabccXWUCnppKcjlWJknzcXZsnPQNiFP7yqdq61MiqxNohxudb9Ke
qkqCORYrSf6RdqybBABYUxvAx23bUxKn429nG+1igp6KS6I1Vibp/zF67JJUDshdq8OnZJta
oqjTancWHW4in7pKcj5GKSnzMXpMkTQB+FHrz3doi1qipINmxxUtbEKQCkpiOiYoifIBcYye
tALoU9vKR2krWZKmk2R3Fq1hApk6TcI0hitZ83FxLJw0B4hTO80XZ4tYoqaTZscVLWxCkApE
cjfmKanxgXvMkEQAeF57zhdny1fCqYNkdxZdY3KcSkiiO1Ym+fMhdTyfFAOoUEvOF2fbVnKo
82pnGi1gEpzqSWI35iX5/TF4/JJEDshTu85naftVoq3jb6canWJCmXpI8jiWLHnyAXqMneQC
aFLrzMdrm1ZyqPNp9xdNY/KcCkvSOHYo+fHhdHyf1ALIUkvBp2qbWFKmM2VHF31hIpK6RsI1
VidJ/4F6TJD0DEhfW8EXZxtX0qgTavcXDW4ynzpNUjXmJwn/gXt8nzQCWFGbwddoy1YyqgNp
BxttYkKSCkaSOvYl+f0xePySRA6IUXvP12g7VaKo02onGD1sUpAKRHI35iX5/QF67JD0DYhR
y8rnartU4q0jaHcWXWXSnopLEj4mK/nzUXGcm0QAaFN7zedqK1nyqhNoRxrtYgKe2kbCNPYn
+f8heOySRA54XhvAF2crWRKnM2V3Fp1v8pO6R8I0Vib58WF0TJF0DKhSq8rHbctUgq0TaMcb
XWUCnjpG8jqWKWnxAXqMnhQCWFMrzGdq21SipnNkdxatbrKSukcCOEYpWfIxdCyeNAH4X9vM
l23rVlKoo2i3HC1uspK6RyI75isJ83F2/JD0DThQe84XZ+tVAqgjaccZ/WAynzpGAjjWLInx
wXTcnDQHyF+rwRdn61WSqMNqFxk9bEKQukfCNFYmSf6Be0yR9A14XhvAF2crWRKnM2V3Fp1v
8pMKSmI6JiiZ8jFxnJskAYhT28pXaBtVwq3zb4cZvWLSnqpK4jnWJ3n/gXpMkPQM6FA7wRdm
K1iipmNrdxYdblKSukcSOKYrifSBe7yc1ABYUwvNN2orWcKqI2i3G21i8pMaRnI19iX5/YF7
TJH0DXheG8AXZytZEqczZXcWnW/ykwpEEjtmKpn0cXYsntQA2FBrzidmm1fiqWNrdxYdblKS
ukciO0YrafMhcVyc9A2oUyvMx23bVBKnw2hXG71i4p6aSjI5ViaZ85F2PJzEARhT280HaitZ
sqaDZNcVLWzyk7pHwjRWJkn+gXtMkfQNeF4bwBdnK1mipBNqhxldYwKfmkiiOwYoSf4BeuyQ
9A2IUcvKx2o7VBKn82hHGt1i8pNqSnI5hisJ85F2TJFkB/hTq81XattUEqeTZMcXPWxCkLpH
wjRWJkn+gXtMkfQNeF4bwBdnK1kSp8NqFxldYOKfCkgiOwYo6f0xePySRA6IUVvPx2vbVrKk
k2Z3Fp1v8pO6R8I0ViZJ/oF7TJH0DXheG8CnZKtYsqYzZQcX7W6CkspGsjUmJzn/8Xo8kIQM
CF9rwWdmW1hipkNkBxftboKSykayNSYnOf/xejyQhAwIX2vBZ2ZbWGKmQ2QHF+1ugpLKRrI1
Jic5//F6PJCEDChSa88HautUMqvDb6ccnW/CnWpNEjnmK/nz8Xc8kIQMeF67wadmi1oSpzNl
dxadb/KTukfCNFYmSf6Be0yR9A3IXZvBt2YrWeKr82/HG91iQp4aTWI+RitJ/qF7rJ4UAjhT
C80XagtZEqfjaGcb7WICnrpHIjkWK3nyEXZMkTQAyFMbwOdqC1QyqiNoVxttYpKSukdiNeYn
6f0hePyS9A14XhvAF2ebWqKk02qXGd1i4p66SmI6Jiip8bF1DJ4kAYhRS84XZ6tYsqYzZZcZ
3WJCnrpK0jW2KQnzkXZMnPQN2F+rwbdkm1qipINmxxUtYBKcukdCNYYqSfMxcVyelADIXxvA
12urVuKoU2p3Fi1iUp3KSRI45iyZ9FF3TJxEB7hRK8zXbRtVkqbjaXcZLWPin4pJEjiGKfnx
MXQMkPQNSF/7zsdmK1gSpjNkdxedbvKSukbyNRYnSf6xdYye1AL4X4vB12urU4Kmg2Q3F51v
wp16SOI71ieJ8WF0bJzEAQhT682nZptYQqkzZYcZ/WAynKpLcju2KRnwIXj8kvQNeF4bwBdn
K1kSpzNldxadb/KTukfCNOYpqfGBe8yQJAHIVMvK92orVOKt82+nGx1uMp+qSNI45ikp8UF3
zJDEDJhQy8HHaRtXoqZzZHcWfWBCnvpKMjnmJ0n+8XVMkQQCaFH7z6dmK1nSq7Nqhxn9YPKT
WkgiOxYrWfOBduyfhAO4UjvP52vbVkKpM2WHGf1gMpyqS3I7tikZ8CF4/JJUDshdG8AXZytZ
EqczZXcWnW/yk7pHwjRWJkn+AXrskPQNOFELzQdqK1QSp+NoZxv9YhKZSkriOYYs+fORdiyc
BAB4XtvNJ2vrUwKqM2WHG01lwp96SjI5hiv58/F2fJ20AIhTG8CnaktUEqcDa6ccTWJCngpK
wjSmK0n+QXFsnMQBqFRrzadq+1PCrYNoZxv9YgKe2kbCNPYn+f8hePySVA7IXRvAF2crWRKn
M2V3Fp1v8pO6R8I0ViZJ/mF0XJ7UAnhe28/3aJtW0qizb9cY7WHykrpHAjhGKUn+AXqMnXQH
uFFbz4dq61NipgNkxxedbzKcqkhiN+Yl6f0xePySRA7IXavDl2aLWBKn42pnG/1iEplKSuI5
hiz585F2LJwEAHhe280na+tTAqozZYcbTWXCn3pKMjmGK/nz8XZ8nbQAiFMbwKdqS1QSpwNr
pxxNYkKeCkrCNKYrSf7Bdlyc9A24VDvNJ2v7U2Kqw2i3HF1l4p7aRsI09if5/yF4/JJUDshd
G8AXZytZEqczZXcWnW/yk7pHwjRWJkn+MXicnnQA2FBrztdoy1YyqgNpBxttYqKfekgiO+Yp
ifEBcTyd5AxIX/vOR2krWZKmk2R3Fk1gcp6KS+I5ZiqZ80FxvJzUAHheO8znbctU8qrDaFcb
nW9SkgpGYjfmJUn+gXtMkfQNeF4bwBdnK1kSpzNldxadb0KQCkgiO1Ymyf9RdMyc9A04UGvO
F2cbWPKp42R3Fy1hQpK6RwI41im58eF0TJEkAvhTu85naftWkqpjZEcXfWEikmpJwjUGKPn9
cXQMniQBiFEbwMdoq1SyqUNrpxkdYqKSikYiOoYnmfARdRyf9A2IUXvP12g7VaKo02onGD1s
QpC6R8I0ViZJ/oF7TJH0DXheG8AXZytZEqczZXcWnW/ykwpIIjtWJsn/UXf8myQHmFMbzedt
61PCqrNktxqNYOKfCkiiO5Yqyf9RdMycRAw4XxvA92ibVFKqw2jHF51vgp26RzI7Rimp8TF6
TJE0AfhR6893aCtZ8qjTajcbjWLynhpJsjqWKmnxcXe8nqQDeF7rz3do61YCq4NqlxnNYVKQ
CkRiN+YlSf6Be0yR9A14XhvAF2crWRKnM2V3Fp1vQpBqSEI59ig58EF0rJ7UAEhSa83nantV
0qjTascZXWBymcpLIjVmJ6nwUXpMkBQCKFAbwJdmi1gSp+Nq9xutY9KeiksSOZYsufOhdkyR
1AGIVPvN92rbVDKqM2XXFy1uUpAKRMI0ViZJ/oF7TJH0DXheG8AXZytZEqczZccVLWASnLpH
QjWGKcnzgXsMn4QDeF4rwfdp+1gSpoNrxxedbzKfOkgyOzYpSf5RdMycVAMIUMvPl2p7WCKm
02unF01h8pLqSXI3pikJ8VF3vJ70DahRm823aVtXwqizaCcXrW4SnWpGEjrGKBnwgXu8npQC
uFELzKdoy1ZCqZNmxxWdb/KTukfCNFYmSf6Be0yR9A14XhvAF2crWRKnM2V3Fi1gEpy6R0I1
hir59FFxrJz0AIhU28rHaqtY0qsjamcaLWCSnHpLQjWGKcnzMXoMkPQNmFGrzVdq21SipjNl
BxidbwKcqkgiO+YnSf5Bd8yeBAIYURvA92jLVlKqI2h3Gz1hgp16S+I7piq58dF1TJEEAhhR
288Ha5tW8qhja9cVLWzyk7pHwjRWJkn+gXtMkfQNeF4bwBdnK1niqFNqtxmNYxKcqkjiOwYo
6f0xeOySRA7IXavDp2SrWLKmM2WHGU1lAp4qSjI+RitJ/kFxbJzEAahUa82navtTwq2DaGcb
/WICnrpHgjqGKWnx4XVMkQQAeF5bzldoy1ZyqVNkdxY9bkKSGkRyN/Yl+f2Be0yR9A14XhvA
F2crWRKnM2V3Fp1v8pMKSCI7VibJ/1F3/JskB5hTG83nbetTwqqzZLcajWDinwpIojuWKsn/
sXqsnyQMeF/bz6dma1gSp9NqxxvdYgKeCkbCNCYoSf5xdFyeFALIXxvA12urVuKoU2p3Fn1g
Epz6StI5Vivp8PF1jJ3UAohS689HaStZ4qhTarcZjWNCnFpIkjr2Jfn9gXtMkfQNeF4bwBdn
K1kSpzNldxadb/KTCkgiO1Ymyf9Rd/ybJAeYUxvN523rU8Kqs2S3Go1g4p8KSKI7lirJ/7F6
rJ8kDHhfK86nZmtYEqfTascb3WICngpGwjQmKEn+cXRcnhQCyF8bwNdrq1biqFNqdxZ9YBKc
+krSOVYr6fDxdYyd1AKIUuvPR2krWeKoU2q3GY1jQpxaSJI69iXp/YF7TJH0DXheG8AXZytZ
EqczZXcWnW/yk7pHwjRWJkn+AXrskPQNqFELzXdq61MyqiNoNxvdYuKeukcSPqYrSf5xdmyc
1ABoUzvN52orWdKtE2hHGk1lgp4KShI+hiz585F2LJwEABhfG8C3ZptYsqSTZscVLWxCkApE
cju2KUn+AXqsnhQCOFMLzRdqm1gSp/Np9xltYJKcGkTCNFYmSf6Be0yR9A14XhvAF2crWRKn
M2V3Fp1v8pO6R8I0ViZJ/oF7/JxUAwhQy8ynbftTwqvDaLcc3WDCn2pNAj6mKWnzoXZcnNQA
+F8rwRdmK1gSpqNrVxedbsKSCkaSOlYmyf8hekyRJAGIU9vKF2fbVDKqE2hnG71i8pNqStI5
liu584F77JBEDNhdq8MXZytZEqczZXcWnW/yk7pHwjRWJkn+gXv8kiQCSFLLyudqS1YyqpNr
BxitbkKdSkmSOlYmyf8hekyRFAJoUzvNt207VBKn42hHGk1lAp66RzI5ditp85F2bJwEAHhe
y80HaltUIqtTaLcbjWLykxpGcjX2JUn+gXtMkfQNeF4bwBdnK1kSpzNldxadb0KQCkTiO6Yp
ifJxd2yelAIoUBvAl2aLWBKnw2qnHE1i4p66RwI5ZioJ84F7nJxEAKhTW80HaitZgquzaMcb
3WICnrpHYjXmJ+n9gXtMkfQNeF4bwBdnK1kSpzNldxadb/KTCkQyOzYpifGRd/yeFAIoULvD
p2SbWqKkw2oXGV1g4p8KSCI7Bijp/SF4TJH0DXheG8AXZytZEqczZXcWnW/yk7pHQjX2J0n+
cXScmwQA6FPrygdqK1nyqnNohxxNZXKe+kbCNIYrWfNRcQyE9A2oVOvKF2f7UwKq42gnG21i
Mpm6R4I5ZipJ/lFxjJvUAMhTe82HahtVEqfDaKccTWICnrpHcjkmKznzcXaMnEQASFLbyidr
W1TiqlNotxxtYpKSukdiNeYn6f2Be0yR9A14XhvAF2crWRKnM2V3Fp1v8pO6R8I0ViZJ/oF7
TJH0DXheu8MXZytZEqczZXcWnW/yk7pHwjRWJkn+gXv8nhQCeF57zwdo61WSpuNpxxxNZRKc
qkjiOrYrqfHBdrybJAf4U5vB92ibVFKqw2jHFy1u8pN6S0I7pikp8SF4TJH0DXheG8AXZytZ
EqczZXcWnW/yk7pHwjRWJkn+gXv8nFQDCFDLzKdt+1PCq8NotxzdYMKfak0CPqYpafOhdlyc
1AD4XyvBF2YrWBKmo2tXF51u0pIKRpI6VibJ/yF6TJEkAYhT28oXZ9tUMqoTaGcbvWLyk2pK
0jmWK7nzgXvskEQM2F0bwBdnK1kSpzNldxadb/KTukfCNFYmSf4xeJyexAGoVOvNd2gLVLKp
Q2tHFy1hAp3qScI01ifp/4F7rJ7kAFhTu8oHaitZwqoDaaccbWLyk0pK4jl2K1nzoXa8nPQN
qFMLzWdqG1VyqvNoZxudb1KSCkZiN1YmSf6Be0yR9A14XhvAF2crWRKnM2V3Fi1s0pxKSAI4
pipp8eF0HJ/0Dfhfu8EXZ9tWwq3jaGcbnW8ynopLgjlWJpnzMXacnLQAaFMbwIdrq1SiqnNo
hxudb1KSCkZiN1YmSf6Be0yR9A14XhvAF2crWRKnM2V3Fm1gkpx6SNI45imp8dF17JJUDnhe
G8AXZytZEqczZXcWnW/yk7pHwjRWJpnxsXecmwQAGFE7zbdpW1fCqANppxxtYpKcmkqSNWYn
GfCBe8yQVAx4XsvPJ2v7U+KqM2UXG21lgp6aSzI5ditJ/iF6/JBUDthdG8AXZytZEqczZXcW
nW/yk7pHwjRWJkn+AXrskPQNCF9rwWdmW1hipkNkBxftboKSykayNSYnOf/xejyQhAwIX2vB
Z2ZbWGKmQ2QHF+1ugpLKRrI1Jic5//F6PJCEDAhfa8FnZltYYqZDZAcX7W6CkspGsjUmJzn/
8Xo8kIQMCF9rwWdmW1hipkNkBxftboKSykayNSYnOf/xekyRVAzIX7vDF2crWRKnM2V3Fp1v
8pO6R8I0ViZJ/oF7zJBUDHhe68/HbdtUgqrDb2cbnW/Cn3pNAj6mK5n0sXdMkRQAyFN7zedq
K1nSrRNoRxpNZYKeCkoSPoYs+fORdiycBAB4XvvNN2obVWKqw2gXF51vUpIKRmI39iVJ/oF7
TJH0DXheG8AXZytZEqczZXcWnW/SkrpG4jX2KOn9gXtMkfQNeF4bwBdnK1kSpzNldxadb/KT
CkgiO1Ymyf9Rd/ybJAfoUevN1207VsKrM2hHGk1iAp46RiI75isJ83F2/JD0DThQe84XZ+tV
AqgjaccZ/WAynzpGEjjmLJn0EXS8nDQHuFKbyjdp+1WiqpNvhxsdbhKcCkqCOaYr+f8xevyQ
9A24UpvP52hLVhKnE2qHGV1jAp+aSKI7BihJ/nF0LJ40AmhSq8/3aHtXsqQzZXcWnW/yk7pH
wjRWJkn+gXtMkfQNeF7Lzydr+1PiqlNqVxs9YYKdmkbyNVYnGfCBe8yQVAx4XsvPJ2v7U+Kq
M2UXG21lgp6aSzI5ditJ/iF6/JBUDthdG8AXZytZEqczZXcWnW/yk7pHwjRWJkn+AXrskPQN
CF9rwWdmW1hipkNkBxftboKSykayNSYnOf/xejyQhAwIX2vBZ2ZbWGKmQ2QHF+1ugpLKRrI1
Jic5//F6PJCEDAhfa8FnZltYYqZDZAcX7W6CkspGsjUmJzn/8Xo8kIQMCF9rwWdmW1hipkNk
BxftboKSykayNSYnOf/xekyRVAzIX7vDF2crWRKnM2V3Fp1v8pO6R8I0ViZJ/oF7zJBUDHhe
O8+naPtW4qiTaccZjWCSnEpIwjR2KfnxUXdMnuQCqFLbzCdpK1kSpzNldxadb/KTukfCNFYm
Sf6Be0yR9A14XhvAF2crWRKnM2V3Fp1v8pO6R8I0ViZJ/oF7TJH0DXheG8AXZytZEqczZXcW
nW/yk7pHwjRWJkn+gXtMkfQN2F+rwbdkK1kSpzNldxadb/KTukfCNFYmSf6Be0yRdAzYXxvA
Z2ZbWGKmQ2QHF+1ugpLKRrI1Jic5//F6PJCEDAhfa8FnZltYYqZDZAcX7W6CkspGsjUmJzn/
8Xo8kIQMCF9rwWdmW1hipkNkBxftboKSykayNSYnOf/xejyQhAwIX2vBZ2ZbWGKmQ2QHF+1u
gpLKRrI1Jic5//F6PJCEDHheu8GnZotaEqczZXcWnW/yk7pHwjRWJkn+gXtMkfQN+F+7wRdn
+1YCqlNotxy9YuKe+kqCOUYrSf5Rcbyc9A1YU6vNx2rbVPKtw2+3HI1i8pNqSvI4dit58kFx
jJsEAFhTq80XZ9tUEqfjb0ca3WISmapKwjSWLLnz8XZMnOQAGF8bwLdmm1iypJNmdxadb/KT
ukfCNFYmSf6Be0yR9A14XhvAN2YbWBKmk2vXFZ1v8pO6R8I05iX5/TF0rJ70DRhRC8/Xa6tY
0qsjamcavWHinKpIgjvWJ5nyMXGcm2QCiFPbyqdo+1aSqgNpVxtNZXKSWkhyORYrufMxevyQ
RAx4XtvMl2jbVnKoM2VXGW1gMp9KS+I7NikZ8IF7vJ6UArhRC8ynaMtWQqmTZncWnW/yk7pH
wjRWJkn+gXtMkfQNeF4bwNdrm1RiqsNoVxh9YqKfikayOPYoOfBRd/ybJAfoUevN1237VaKt
42+3Gi1igp5KSkI1lipp8XF3vJ5EDChQG8CXZotYEqfzaccb7WICnrpH4jimLKnzYXa8nNQA
eF67wadmi1oSpzNldxadb0KQCkQiO7YpCfORdkycVAMIUPvPJ2lrVsKrw2onGJ1vcpIaRsI0
tikJ8zF2TJzkDJhRW80HaitUEqeTZMcXPWzyk7pHwjRWJkn+gXtMkfQNeF4bwBdnK1nSqNNq
xxldYHKZGkmyOlYnGfCBe8yQVAx4XtvPJ2vrUyKrM2WXG71iwp/KSjI5Vib58+F2jJwEAPhU
G8C3ZptYsqSTZncWnW/yk7pHwjRWJkn+gXtMkfQNeF4bwJdmi1gSp0NqZxtdYtKfSk0SPlYm
efBRcZycRADIU1vBF2f7VAKqU2i3HL1i4p76SoI5RitJ/lFxvJz0DVhTq83HattU8q3Db7cc
jWLyk5pHYjp2Jkn+cXacmwQA6FPrygdqK1lSqiNoZxudYvKTak0yPlYm2fIBdPyetAKIUXvB
F2eLWKKmk2bXFS1sQpAKRHI7tilJ/gF6jJ1EB3hT680XZ1tXEqcDZMcXnW8ynzpIMjs2Ken9
MXj8kkQOyF2rz/doK1mSpvNpZxmNYwKfaktyOzYpifIBepydRAeoVPvNh2rbVNKt42j3F31g
Qp76SjI55if5/4F7PJ/0DUhf+87HZvtXIqmDZHcWXWNynEpIojtWJpnxsXecmwQAGFE7zbdp
W1fCqANppxxtYpKcmkqSNWYnGfCBe7yelAK4UQvMp2jLVkKpk2Z3Fp1v8pO6R8I0ViZJ/oF7
TJH0DXheG8DnaGtWwqvDatcVnW/yk7pHwjRWJkn+gXtMkfQNeF4bwBdnm1rCqANppxxtYpKc
mkpiOiYomfGxd5ybBAAYUTvNR2YbWEKpM2X3Fz1u8pNqSPI4hiy584F7LJwEBwhTO8znagtU
EqeTZMcXPWxCkApEcjemKSnxQXRcnUQCmFFLzrdki1oSpzNldxadb/KTukfCNFYmSf6Be0yR
9A34X7vBF2dbWGKmQ2QHF+1ugpLKRrI1Jic5//F6PJCEDAhfa8FnZltYYqZDZAcX7W6CkspG
sjUmJzn/8Xo8kIQMCF9rwWdmW1hipkNkBxftboKSykayNSYnOf/xejyQhAwIX2vBZ2ZbWGKm
Q2QHF+1ugpLKRrI1Jic5//F6PJCEDAhfG8C3ZptYsqQzZXcWnW/yk7pHwjRWJkn+gXtMkfQN
eF6bwbdmK1liqCNotxu9YwKZak3CNHYpifJxdwyQ9A0IUQvN12oLVeKt4293Fl1jIpy6SII1
Via581FxvJxkAIhUC80XZ2tUAqojaHcbnW8imUpNwjTGKsnxMXQMngQCeF7bzadqK1kyqoNo
pxttYlKZCkrSOTYrufPBekyRVAzIX7vDF2crWRKnM2V3Fp1v8pO6R8I0ViZJ/oF7zJBUDHhe
+8rnagtUoqrTaMcbTWLinrpHEj6mK0n+QXFsnMQBqFTLzQdqC1TCrSNodxZdZQKeykrCOUYr
Sf5Bdvyc9A3IU3vN123bVDKq02hXG61jgp5KSqI1Vibp/zF67JJUDnheG8AXZytZEqczZXcW
nW/yk7pHwjRWJmn/sXp8kFQD2F2rw6dkm1qiqNNqdxYdbjKfCk3COaYrSf7BdSyf9A1IX6vB
F2frVZKow2oXGT1sUpC6R8I0ViZJ/oF7TJH0DXheG8AXZytZEqeDZvcXPW7yk8pGsjUmJzn/
8Xo8kIQMCF9rwWdmW1hipkNkBxftboKSykayNSYnOf/xejyQhAwIX2vBZ2ZbWGKmQ2QHF+1u
gpLKRrI1Jic5//F6PJCEDChSa88HautUMqvDb6ccnW/SnHpLMjgWJ0n+QXecnvQCCFJrwWdm
K1mypoNk1xU9bEKQukfCNFYmSf6Be0yR9A14XhvAF2crWRKng2qXGZ1vkpyqSAI41ieJ8pF0
XJ3UA2hRC89XaKtYwquDb6ccDWACnnpNcjuGKcnzsXdsnCQH+F/7z6dqa1TiqoNkxxctbvKT
ektCO6YpKfEheEyR9A14XhvAF2crWRKnM2V3Fp1v8pO6R3I35iX58WF0TJF0DPhfy8ynbftT
gqjDaLccTWNCmWpNAjjmKznzcXbMkDQBWFHrzOdom1hipvNpxxvtYgKemkkiOQYqef/xd/yQ
9A0YUBvAp2jLVtKrg2gHG21iQpK6RwI41im58eF0TJEkAkhSy8rnaktWMqqTawcYTWDCn2pN
Mjk2KWnz0Xp8kKQDeF7rz3do61YCq4NqlxnNYVKQukfCNFYmSf6Be0yR9A14XhvAF2crWRKn
g2bHFb1gApx6SzI4dikp8dF17JL0DXheG8AXZytZEqczZXcWnW/yk7pHwjTmJbnx4XSMnuQB
yFH7z0dpi1qypINmdxadb/KTukfCNFYmSf6Be0yR9A14XhvAl2aLWBKn42pHGr1iQp5qStI5
ViaZ87F3bJzEAbhU28rnagtU4qozZVcbLWIinkpKIj6mLIn0kXZMkUQAGFMbwMdt61MyqoNo
FxsNYsKfukfiOeYrmfNxduybRABoU3vN52pLWBKnk2THFz1sUpAKRMI0ViZJ/oF7TJH0DXhe
G8AXZytZEqczZbcaLWKCnkpK4jq2KxnysXo8nVQDCFDLzKdt+1OCqMNotxxNY0KZak0COOYr
OfNxdsyQNAFYUevM52ibWEKpM2X3Fz1u8pN6S3I5Jiu584F7bJ0EB5hT+83nagtUEqeTZMcX
PWxCkLpHwjRWJkn+gXtMkfQNeF4bwBdnK1kSp/Nqlxm9YsKfykoyOQYqifFhdPyeNAL4VGvM
t2lbV9KrI2pnGm1jIp8KSKI7lirJ/1F3/JskB5hTi83nautTwqqzZJcZLWKynkpKcjXmJxnw
gXvMkFQMeF47z5dtK1nCrfNvVxstYpKeKkrCNPYn+f8hePyS9A14XhvAF2crWRKnM2V3Fp1v
8pO6R8I0limp8TF0jJ50B9hQa87XaMtWoqjzavcczW7CkupJwjTWJ+n/gXuMnsQBuFQrzBdn
y1QyqgNpBxttYvKTCkqiOZYrufMBcUyRVAzIX7vDp2SbWqKkw2o3GU1jApwaRGI3ViZJ/oF7
TJH0DXheG8AXZytZEqczZXcWLWxykhpGwjQmJzn/8Xo8kIQMCF9rwWdmW1hipkNkBxftboKS
ykayNSYnOf/xejyQhAwIX2vBZ2ZbWGKmQ2QHF+1ugpLKRrI1Jic5//F6PJCEDAhfa8FnZltY
YqZjaQcZjWIynppLMj6GLEn+sXWcmyQAyFOrzWdrW1hipjNl1xctblKQGkRyN1YmSf6Be0yR
9A14XhvAF2crWRKnM2V3Fi1gEpy6R6I7RimJ8gF6jJ3kAmhSO84HaDtWUqizZKcaLWUimSpI
MjmWLPnxUXTMnMQBWFPLypdmy1aiqnNohxstbkKSCkbCNJYqyfFxdCye9A1YUevP12vbVTKo
U2onGJ1vApzaSAI7Rir58WF0HJ9UDshdG8AXZytZEqczZXcWnW/ykwpEEjvWK+nw8XWMneQC
aFLrzMdrm1ZyqPNp9xdNY0KZak0iOcYrufNBcZycdAyYUavNV2rbVKKmg2QnGJ1vcpIaRsI0
hinJ87F3bJzEAahT28rnagtUEqcTaYccfWISnkpK4jlWJun/MXrsklQOyF2rw6dkm1qSppNk
dxZtYCKZSkpSOaYsWfOBe5yc5AAYU9vKN2o7VFKqc2hnG51vIplKSsI0FiiZ8aF0LJ+0DHhe
+82naktU4qozZaccXWXSngpKojnGK3ny4XpMkVQMyF+7w7dkm1qipINmxxUtYBKcukdCNYYp
yfOBezyf9A1IX/vOx2YrWNKog2R3Fl1jcpxKSKI7ViaZ8bF3nJsEABhRO823aVtXwqgDaacc
bWKSnJpKkjVmJxnwgXtsngQCuFLrzDdoS1ZCqTNlhxn9YDKcqktyO7YpGfAheOySRA7IXavD
p2SrWLKmM2WHGU1lAp4qSjI+RitJ/lF2XJyUALhUO80HamtUUqojaHcWXWLCn3pN0jlWJnnw
UXGcnEQAyFMbwKdqS1QSp8NopxytYzKeSkoSOeYrOfOxdwycBAAYXxvAt2abWLKkk2bHFZ1v
8pO6R8I0ViZJ/oF7TJFEDshR+88XZ6tYwqizaHcW3WHyk4pGIjqGJ5nwgXr8kPQNaFE7zxdn
q1jCqLNodxb9YfKTikYiOoYnifBhdfyQ9A1oUTvPF2erWJKm42r3G51vkp26R/I1tiiZ/1F1
/J9EDHheK853aOtWEqezZKcZHWLyk/pJwjRmJ6nwUXqMn8QMyF+rwRdn61WSqMNqFxk9bEKQ
CkRyN+Yl+f0xdKye9A34X8vMF2qbUwKoU2jHF51vMp86SDI7Nin5/TF27J+EA6hSq8rHbftV
EqqDb7cZrWMymYpLQjWGKknxMXdcncQDqFLLz6dom1ZSpjNlRxd9YSKSeknCNVYnSf+BekyQ
9Ax4X1vBF2cbV9KoE2r3Fw1uApyaSlI15icJ/4F7fJ80AlhRm8GHZgtW4qrjaIcbLWISmUpK
AjlWJtn0oXZcnJQA6FMbwMdqq1QiqxNoRxpNYjKZSkriOcYn+f8xehyf9A2IUXvP12g7VaKo
02onGD1sQpAKRHI35iX5/TF27J+EA6hSq8rHbftV4qrzbzcZrWMimXpNMjt2K2nzkXZsnHQM
SF8bwRdmK1iCqcNrdxedbkKS6knCNNYn6f+Be5ydBAC4VBvA52oLVDKqI2hXG51vIp6qSgI5
pitJ/iF6/JBUDnheG8AXZytZEqczZXcWnW/yk7pHwjRWJvn9MXicnsQBqFTrzXdoC1SyqUNr
RxctYQKd6knCNNYn6f+Be6ye5ABYU7vKB2orWcKqA2mnHG1i8pNKSuI5ditZ86F2vJz0DahT
C81nahtVcqrzaGcbnW9SkgpGYjdWJkn+gXtMkfQNeF4bwBdnK1kSpzNldxYtbEKQmkgyO5Yq
ufKhdCyepAN4XpvBt2YrWeKo42+nG41i8pN6SvI4FitJ/lF2/JwkADhTC80XZ7tVkqqDaDcb
bWLykxpGcjX2Jfn9gXtMkfQNeF4bwBdnK1kSpzNldxadb/KTSkiiO5YpWfIxdKyepAPYXbvD
p2SbWqKkg2b3Fz1u8pNKSBI+pivZ83FxXJz0DahTC813astT4qoTaKccLWLintpKMjlWJonz
sXeMm+QAeF4rzsdt+1SiqoNodxYtYpKeukcyOYYsefJBdrycJADIU2vNJ2trVOKqU2R3Fj1u
QpIaRGI35iVJ/oF7TJH0DXheG8AXZytZoqSDapcZnW9ykmpIQjlWJgnw8XVMkcQMmFDLwcdp
m1eipjNltxodYAKc2kjCNIYpyfMhdTyfJAL4U2vBJ2bLV8Km42t3F81hQpBKSII7hiq58YF7
nJ50ANhQa87HaKtUYqYDZJcYTW4inSpJkjpWJrnx4XSMnuQByFH7z0dpi1qypINmdxadb/KT
ukfCNFYmSf6Be0yR9A14XhvAl2aLWBKn42pHGr1iQp5qStI5ViaZ87F3bJzEAbhU28rnagtU
4qozZVcbLWIinkpKIj6mLIn0kXZMkUQAGFMbwMdt61MyqoNoFxsNYsKfukfiOeYrmfNxduyb
RABoU3vN52pLWBKnk2THFz1sUpAKRHI35iX5/TF0rJ70DRhRC8/Xa6tY8qjTajcbjWLyngpG
wjSWKsnxcXQsnlQOyF0bwBdnK1kSpzNldxadb/KTCkRyN7YpqfHBdlyc9ADYUGvO12sLVuKr
w2onGJ1vcpIaRsI0tikJ8zF2TJzkDJhRW80HaitUEqeTZMcXPWxCkApEcjfmJfn9QXSsntQA
SFJrzedqe1XSqNNqxxldYHKZyktiOiYomfEBduyQxAyYUEvOF2erWLKmM2W3Ga1jMpmKS8I0
titp87F3PJwEAHheu8GnZotaoqSDZscVLWwCnPpIEjimKen9MXhMkfQNeF4bwBdnK1kSpzNl
xxUtbBKcWkiCOUYrSfMhdTyfFAJIUFvPx2vbVkKpM2X3Fz1u8pNaSII55itJ85F6rJ60AGhT
G80XZ4tYoqaTZscVLWxCkApEcjeWKanxoXZ8nYQAiFNLzNdoy1aiqPNq9xztY1KdykkCO7Yp
afOxdzycBAAoUtvP92ibVtKos28HGs1uIpw6SpI6VibJ/yF6TJE0AkhS28onaytZ8qoTaEca
7WICnrpHYjXmJ+n9MXhMkfQNeF4bwBdnK1kSpzNldxadb/KTukdyN5YpqfExdIyedAfYUGvO
12jLVqKo82r3HM1uwpLqScI01ifp/4F7jJ7EAbhUK8wXZ8tUMqoDaQcbbWLykwpKojmWK7nz
AXFMkVQMyF+7w6dkK1kSpzNldxadb/KTukfCNFYmSf6Be0yRBAIYUdvPB2ubVvKoY2vXFZ1v
8pO6R8I0ViZJ/oF7TJH0DXheG8AXZ9tWcqjzamcaLWASnOpJYjf2JUn+gXtMkfQNeF4bwBdn
K1kSpzNldxadb3KSGkbCNIYpWfPhdoyb1ABoU1vNV2o7VBKn42+HG51vIplKTcI5pitp87F3
jJvkAHhee83nbVtU4qoTaGcbnW+CnopLEj6GLPnz8XZcnPQNuFOrzRdn+1QiqxNoRxpdZTKZ
SkriOeYrKf+Be+yQRAzYXRvAF2crWRKnM2V3Fp1v8pO6R8I0ViZJ/iF4TJH0DXheG8AXZytZ
EqczZXcWnW/yk7pHcju2KUn+AXqMnhQCyFHbz5dtK1lyqTNlVxdtYTKdCkbCNJYqyfFxdCye
VA7IXavDp2SbWqKo02p3Fh1uIp+6SnI+Rikp8zF6TJE0AfhR6893aJtaoqqTawcYTWNCmWpN
EjhWK/n0QXR8nTQHSFKbwcdrK1aiqyNpRxhNYyKcCkhyOxYnSf6xeqyfJAy4UBvBF2YrWBKm
M2R3F51uspK6R/I6lilp8QF63JAEAlhTi8GnZmtYEqcDa7cZvWBykipGAjhGK1nzgXs8nMQB
GFOryhdn+1SSqgNpVxutYyKeek0yOXYrmfQRevyQRAwoUBvA52hLVtKoI2nHGX1gop0aRMI0
ViZJ/oF7TJH0DXheG8AXZytZEqczZXcWnW/yk7pHcjn2KDnwUXf8myQHqFLrzddta1Yiq+Nv
txxtYNKemkrSOXYryf+xekyQ9Ax4X4vO52krWCKmg2QnGJ1vcpIaRsI0hiq580FxTJEEAFhT
O80HagtUEqfjaGcbXWICnrpHYjXmJ+n9gXtMkfQNeF4bwBdnK1kSp4NmxxVNYMKfak0yOTYp
afMhdTyfxAzIUOvOR2krWZKmk2R3Fn1g4p6aSmI+RitJ/lF2fJ0kB4hTG8DnagtUMqojaFcb
bWLyk2pK0jkmK3ny4XaMnOQAeF67wadmi1oSpzNldxadb/KTukfCNFYm+f0xeGyeBAK4UuvM
N2hLVkKpM2X3Fz1u8pNKSBI+hitZ84F7jJzEAThTG8DHaptUwqpzaGcbnW9inzpKcjkWK7nz
gXvskEQM2F0bwBdnK1kSpzNldxadb/KTukfCNFYmSf5xdCyeNAJoUqvP92h7V7Kkk2Z3Fp1v
8pO6R8I0ViZJ/oF7TJH0DXheG8CXZotYEqdDZAcX7W6CkspGsjUmJzn/8Xo8kIQMCF9rwWdm
W1hipkNkBxftboKSykayNSYnOf/xejyQhAwIX2vBZ2ZbWGKmQ2QHF+1ugpLKRrI1Jic5//F6
PJCEDAhfa8FnZltYYqZDZAcX7W6CkspGsjUmJzn/8Xo8kIQMCF9rwWdmK1mypoNk1xWdb/KT
ukfCNFYmSf6Be0yR9A14XhvAF2erWLKmM2WnGY1ikp56TeI5RisJ88F2XJz0DahU680XZ/tT
EqoDadccLWLinrpHcjk2K0n+oXe8mxQAmFPrzTdqK1nSqoNodxZNZfKeCk2iNVYm6f8xeuyS
VA54XhvAF2crWRKnM2V3Fp1v8pO6R8I0ViZp/7F6bJBUA9hdq8OnZJtaoqjTancWHW4in7pK
cj5GKSnzMXpMkTQB+FHrz3doK1miqNNqdxb9YOKcektCNYYq+fRRcZyd9ADIVNvPJ2vrUyKr
s2R3F91u8pO6RoI1ViZJ/8F6TJH0DMhfq8EXZ+tVkqjDahcZnW/SnEpIAjimKmnx4XQcn/QN
iFF7z9doO1WiqNNqJxidbwKc2kgCO0Yq+fFhdByfVA7YXRvAF2crWRKnM2V3Fp1v8pO6R8I0
ViZJ/gF67JD0DehR683HbetToqojaBcbbWLyk3pNcjlWK1nzgXs8nOQAuFM7zOdt+1NypjNl
1xctblKQGkRyN+Yl+f1RdHyfJAGIURvAl2brVaKtM2iHGy1u8pOqSCI79iXp/YF7TJH0DXhe
G8AXZytZEqczZXcWnW/ykwpEQjX2J0n+8Xo8kIQMCF9rwWdmW1hipkNkBxftboKSykayNSYn
Of/xejyQhAwIX2vBZ2ZbWGKmQ2QHF+1ugpLKRrI1Jic5//F6PJCEDAhfa8FnZltYYqZDZAcX
7W6CkupLsjtGK4nzoXe8myQHeF47z9dr21Viq0NkBxedb1KSCkZiN1YmSf6Be0yR9A14XhvA
F2crWRKnM2V3Fi1scpIaRsI0Fin58/F2/Jw0B2hTG8DHbStUoq0zZUcanW8SnWpJwjSGK3ny
oXZ8nTQHuFTrzTdqm1QSpzNohxu9YvKTSkoiPuYrifSxd2ycBAB4XjvNB2prVFKqM2VnG31l
Ap6aSsI0hiy59IF7nJvkAAhTa80na0tYEqeTZMcXPWxSkApEwjRWJkn+gXtMkfQNeF4bwBdn
K1kSpzNldxc9YVKQCkRyN+Yl+f0xdKye9A34X8vMF2qbUwKoU2jHF51vMp86SDI7Ninp/TF4
/JJEDshdq8OnaotXYqnzapcZLWAynDpNkjpWJsn/IXpMkcQDiFSbyhdn+1QCqsNvFxtdZQKe
mkrCNPYn+f8hePySRA7IXavDp2SbVvKoM2X3Fy1i8pPaScI0tiiZ8DF6TJE0AfhR6893aCtZ
oqqTawcYfWEinepJwjSmKSnxQXRcnUQCmFFLzrdkm1qipINmxxUtbEKeGkmyOoYq+fRRcZyd
9ADIVNvPJ2vrUyKrs2S3Go1g4p9KSxI45ikp8UF3zJAkAXhRq8wHawtXoqhTakcYvWBCn+pG
cjnmJwn/gXt8kBQDqF8bwRdmK1gSpjNkdxedbtKS+kbCNGYoifGhdMyQZAxYUZvKh2abWFKm
M2VHGF1g0pw6RgI7tilp87F3PJwEAMhfq8FHaYtaoqSDZscVLWwCnNpIAjtGKvnxYXQcn1QO
2F2rwxdnK1kSpzNldxadb/KTukfCNFYmSf6Be8yQVAx4XsvPB2pLVNKtE2hnG91isp6qSsI0
Niu59PF2vJzUAGhTG8DHahtVMqoDabccXWUCnppKcjlWJmnzMXacnAQAmFTrytdtm1QSp7Nk
txqNYrKeKkrSOVYmmfGhdJyeRAwYXxvAt2abWLKkk2bHFZ1v8pO6R8I0ViZJ/oF7TJH0DXhe
G8AXZ5tW8qgzZfcXHW4ynFpIcjuWKcn08XpskEQMeF5bzndpK1kyqLNvtxndYGKeek1yNVYm
ifIBdLyelAJ4XsvPJ2v7U+KqU2pXGz1hgp2aRjI6VicZ8IF7bJ4EArhS68w3aEtWQqkzZYcZ
/WAynKpLcju2KRnwIXjskkQOeF4bwBdnK1kSpzNldxadb/KTukfCNFYmyf8hekyRBAKoVOvN
h2rbUwKqM2WnG41ikp56TeI5RisJ88F2XJz0DahRO8/HaCtZwq3Db3cWfWLSnopLsjmmK0n+
oXb8nCQAiFP7yudt61MCqlNkdxY9bkKSGkRiN+YlSf6Be0yR9A14XhvAF2crWRKnM2V3Fp1v
YpxKSgI+hilp8VF0LJDUA4hU+823aVtXIqnzalcZHW4ynFpI4jlmKjnzcXb8kKQDeF6bwbdm
K1kyqcNvlxt9YgKemkrCNGYqifNBdmycBACoVMvKF2eLWKKmk2bHFZ1v8pO6R8I0ViZJ/oF7
TJH0DXheG8AXZ7tW4qrzb6cZvWAinNpG4jrmLIn0cXYsntQA2FBrztdoy1aiqPNq9xzNYfKT
OkZiNVYmafAxcYybBAB4XnvN521bVDKrw2hXG51vUpIKRmI35iVJ/oF7TJH0DXheG8AXZytZ
EqczZXcWnW9inEpKAj6GKWnxUXQskCQCWFPLzadoS1SiqpNrBxitbhKdakYiO7YpqfFhdByf
9A34X7vBF2f7VjKo42p3Fi1ikp4KSsI0tix58sF2vJsEAHheu8GnZotaoqQzZXcWnW/yk7pH
wjRWJkn+gXtMkfQNeF6Lz+dq61PCqBNqpxkdbkKS6knCNNYn6f+Be5yexAE4U8vN521rVCKr
82+HG51vIpyaSBI7Vibp/zF67JJUDshdG8AXZytZEqczZXcWnW/yk7pHwjRWJkn+AXrskPQN
6FHrzcdt61OiqiNoFxttYvKTSkriOXYrWfOhdryc9A2oUTvPx2grWfKqE2hHGu1iAp66R+I5
5iuZ83F2rJsEB7hUC813ZitZsqaDZNcVPWxCkLpHwjRWJkn+gXtMkfQNeF4bwBdnK1kSp4Nq
lxmdb3KSKkgyOZYsmfGhdJyelAyoUTvNx2orWVKpU2t3Fp1uQpK6RwI41im58eF07JJEDshd
q8OnZJtaoqjTancWHW4in7pKcj5GKSnzMXpMkTQB+FHrz3dom1qiqpNrBxhNY0KZak0SOFYr
+fRBdHydNAdIUpvBx2srVqKrI2lHGE1jIpwKSHI7FidJ/rF6rJ8kDLhQG8EXZitYEqYzZHcX
nW6ykrpH8jqWKWnxAXrckAQCWFOLwadma1gSpwNrtxm9YHKSKkbiO6YrmfNxdvycFAeIU9vN
F2e7UzKqI2gXGw1i8pNqSOI7hinZ/zF6/JCkA3he6893aOtWAquDapcZzWFSkApEwjRWJkn+
gXtMkfQNeF4bwBdnK1kSpzNldxadb/KTukdyOfYoOfBRd/ybJAeoUuvN121rViKr42+3HG1g
0p6aStI5divJ/7F6TJD0DHhfi87naStYMqaDZCcYnW9ykhpGwjSGKrnzQXFMkQQAWFM7zQdq
C1QSp+NoZxtdYgKeukdiNeYn6f2Be0yR9A14XhvAF2crWRKnM2V3Fp1v8pMKRHI3hil58lFx
vJyUAlhTu85naRtYoqnDaycYnW9ykhpGwjS2KVnzoXbsm+QAeF7LzSdr+1PiqjNlhxu9YtKe
qkriOaYrSf5RdlychABIUnvN12o7VBKnk2THFz1s8pO6R8I0ViZJ/oF7TJH0DXheG8AXZytZ
oqSDZlcZbWAyn0pL4js2KRnwgXvMkFQMeF7rz8dt+1QCqjNltxutY7KeukcSOeYrmfPBdlyc
9A3oUpvNp2prVOKqM2XXFy1uUpAKRMI0ViZJ/oF7TJH0DXheG8AXZytZEqczZYcZ/WAynKpL
cju2KRnwIXjsklQOeF4bwBdnK1kSpzNldxadb/KTukfCNFYm+f0BeuyQ9A0IX2vBZ2ZbWGKm
Q2QHF+1ugpLKRrI1Jic5//F6PJCEDAhfa8FnZltYYqZDZAcX7W6CkspGsjUmJzn/8Xo8kIQM
CF9rwWdmW1hipkNkBxftboKSykaSOCYpWfNBdmydBAeoVBvAJ2n7U8Kqg2jHG+1jgpLKRsI0
9if5/yF4/JJEDshdq8OXZotYEqfDaqccbWJinkpN0jlWJpnzkXYsnDQHWFMLzVdqa1QCqjNl
pxxtYvKT+kmCO7YpKfDBekyRFADIU3vN52orWcKt829XGy1ikp4qSvI4NidJ/iF6/JBUDthd
q8MXZytZEqczZXcWnW/yk7pHwjRWJkn+gXt8kFQD2F2rwxdnK1kSpzNldxadb/KTukfCNFYm
Sf6Be/yeFAJ4XnvPB2jrVZKm82lnGY1j0p2qSNI7FinJ/1F3/JskB+hR683XbZtWwqizaEca
vWIimTpGIjvmKwnzcXb8kEQMyF8bwNdrq1biqFNqdxa9YAKceksyOHYpKfHRdUyRBAIYUdvP
B2ubVvKoY2vXFS1sQpAKRHI35imp8YF7zJA0AWhRC8zna/tVoqhTarcaHW4inwpNEj62K9nz
cXaMmyQA+F/7z6dqa1TiqoNkxxedb7Kd2knCNGYnqfBRekyQxAPIXxvA12urVuKoU2rXFS1s
QpAKRMI0ViZJ/oF7TJH0DXheG8CnaotXYqnjacccTWUin0pKAj4WKXnyUXGMmwQCWFM7zQdq
C1SSpgNkdxedbvKSKkkyOlYnmfAxehyf9A34X7vBF2f7VeKq8293Fm1i0p6aStI5ditJ/lF2
XJw0AIhTG8C3ZptYsqQzZXcWnW/yk7pHwjRWJkn+gXtMkfQNeF6rw6dk+1Yiq+Nvhxv9YNKe
GkmyOmYn+fBxdRyf9A34X7vBF2fLVgKqE2jXHI1i8pNqSvI4hiy584F7vJzUAFhTC803attU
EqfjaGcb7WLCn9pKAjlGK0n+IXr8kFQOeF4bwBdnK1kSpzNldxadb/KTukfCNFYm+f0xeGye
BAK4UuvMN2hLVkKpM2X3Fz1u8pNKSBI+hitZ84F7jJzEAThTG8DHaptUwqpzaGcbnW9inzpK
cjkWK7nzgXvskEQM2F2rwxdnK1kSpzNldxadb/KTukfCNFYmSf6Be7yelAK4UQvMp2jLVkKp
k2bXFZ1v8pO6R8I0ViZJ/oF7TJH0DXheG8AXZ5takqaTZHcWbWAimUpKUjmmLFnzgXucm/QA
yFR7wRdni1iippNm1xUtbEKQCkRyN+YpqfGBe8yQJAF4U6vKB2hLVKKmM2W3Gh1gApzaSMI0
5ivp8PF1nJ1EB6hUy8wXaptT0qgDabccrWNykmpLwjvmKlnysXWcnSQCyFGrz1dmK1kiptNr
pxedbvKSukbCNVYnSf+BemyQtAx4XivO12gLVpKmo2RXGR1lYpIKRoI1ViZ58EF0bJ50DLhR
+883ahtVYqrDaMcXLW6inbpHMjs2KYnxkXf8nhQCKFC7w7dkm1oSpzNldxadb/KTukfCNFYm
Sf6Be0yR9A34X7vBF2f7VgKqU2i3HL1i4p76SoI5RitJ/uF2vJuEAIhTO80HaitZwqoDaVcb
rWMymXpNMjl2K/nzgXtsnEQAqFPrzfdt21PSrYNodxYdbjKfqkqCOcYrWfOBewye1AKoUavB
d2YrWbKmg2TXFT1sQpC6R8I0ViZJ/oF7TJH0DXheG8AXZytZEqeDapcZnW9ykjpGAju2Kfnx
QXTMm4QMSF+rwRdna1dyqTNlVxkdZTKc+khSOZYs+f+Be4yddAKIUXvPF2f7ViKr42+HG/1g
0p4aSbI6die58IF6HJ/0DVhR68/Xa9tVMqhTaicYnW8CnNpIAjtGKvnxYXQcn1QO2F2rwxdn
K1kSpzNldxadb/KTukfCNFYmSf6Be8yQVAx4XuvPx23bVIKqw29nG51vIp6qSqI5lixp85F2
DJy0AGhTG8BXaAtWwqgzZaccbWXyk1pK4jlmKjnzcXZMkdQAyFPLzedqy1PirfNvZxv9bvKT
GkZyNfYl6f0xePySRA7IXcvPl2qLV2KpM2QnGJ1vcpIaRsI0hinJ87F3bJzEAahT28rnagtU
EqcTaYccfWISnkpK4jlWJun/MXrskkQOeF4bwBdnK1kSpzNldxadb/KTukfCNFYmqfGRdGye
9A3IU7vOZ2krWBKn82lnGZ1vcpJ6SCI75imJ8QFxPJDEDMhfG8DXaDtWEqfjavcbPWGCnWpI
QjkGJ4nxYXRsnMQBCFPrzUdrm1Riq2NrdxZtYJKcekjSOLYpWfGhdByfVA7YXavDF2crWRKn
M2V3Fp1v8pO6R8I0ViZJ/oF7zJBUDHhe6883agtUAqoTaIcbnW+ynJpIEjtWJqnzoXZ8nYQA
iFMbwDdqm1TCqsNolxxtZTKZqkqCNVYm+fPBdkyR1ADIU8vK521rVNKtA2m3HI1i8pN6SjI5
tiy584F7vJwkB6hU6803attUEqcTZXcXvW+SkrpHYjXmJ+n9IXj8kvQNeF4bwBdnK1kSpzNl
dxadb/KTukfCNOYpqfGBe8yQJAL4UxvAV2lLVxKnM2THF51vMp86SDI7Ninp/TF4/JJEDshd
q8OnaMtWEqezZKcanWJCmapIojnmJ0n+QXfMngQCGFGrw6dqi1diqeNpxxxNZSKfukpyPpYp
efJBcXyddAyoUhvPp2s7VSKp42mnGS1gQpz6RsI0Ziep8FF6jJ/0DHhfG8EXZitYEqYzZDcX
nW/CnXpI4jvWJ9n/cXRsnGQMyF9bwRdnG1fSqBNq9xcNbtKcSkoSOaYr+fNhcbycNAB4XovK
N2o7VHKqo2h3Ft1g0pxqSFI15if5/9F1TJEEAhhR288Ha5tW8qhja9cVLWzyk7pHwjRWJkn+
gXtMkfQNeF4bwBdnK1kSpzNldxadb0KeGkmyOoYq+fRRcZydBAC4VFvPJ2v7U9Ktw2pXG71i
4p6aSkI1ZidJ/4F6TJBkA4hQG8HXaZtYQqkzZfcXPW7yk2pLMjmWLEn+cXZsnNQAaFM7zRdn
+1QCqvNohxudb1KSCkZiN1YmSf6Be0yR9A14XhvAF2crWRKnM2V3Fi1sQpBqSPI4hiy58+F0
bJxUAwhQK8GnadtXQqkzZfcXPW7yk1pI0jl2K+n0kXZMkSQASFLLyudqK1niqhNoVxuNYtKe
SkrCNIYrWfPxdnydlAC4UwvNF2eLWKKmk2Z3Fp1v8pO6R8I0ViZJ/oF7TJH0DXheG8CnZJta
MqjDarcabWPSnNpIkjpWJsn/IXpMkQQCqFTLzQdqK1nSqgNpNxudbyKeCkoSORYrWfOBe9yd
dADIU1vN52orWbKmg2TXFS1s8pO6R8I0ViZJ/oF7TJH0DXheG8AXZytZ4qhTarcZjWNCnFpI
kjr2Jen9gXtMkfQNeF4bwBdnK1kSpzNldxadb/KTCkRCNfYnSf7xejyQhAwIX2vBZ2ZbWGKm
Q2QHF+1ugpLKRrI1Jic5//F6PJCEDAhfa8FnZltYYqZDZAcX7W6CkspGsjUmJzn/8Xo8kIQM
CF9rwWdmW1hipkNkBxftboKS6kuyO0YrifOhd7ybJAd4XtvMx2grVmKrQ2QHF51vUpIKRmI3
ViZJ/oF7TJH0DXheG8AXZytZEqczZXcWLWxykhpGwjQWKfnz8Xb8nDQHaFMbwMdtK1SirTNl
RxqdbxKdaknCNIYrefKhdnydNAe4VOvNN2qbVBKnM2iHG71i8pNKSiI+5iuJ9LF3bJwEAHhe
O80HamtUUqozZWcbfWUCnppKwjSGLLn0gXucm+QACFNrzSdrS1gSp5Nkxxc9bFKQCkTCNFYm
Sf6Be0yR9A14XhvAF2crWRKnM2VXFz1hUpAKRHI35iX5/TF0rJ70Dfhfy8wXaptTAqhTaMcX
nW8ynzpIMjs2Ken9MXj8kkQOyF2rw6dqi1diqfNqlxktYDKcOk2SOlYmyf8hekyRxAOIVJvK
F2f7VAKqw28XG11lAp6aSsI09if5/yF4/JJEDshdq8OnZJtW8qgzZfcXLWLyk9pJwjS2KJnw
MXpMkTQB+FHrz3doK1miqpNrBxh9YSKd6knCNKYpKfFBdFydRAKYUUvOt2SbWqKkg2bHFS1s
Qp4aSbI6hir59FFxnJ30AMhU288na+tTIquzZLcajWDin0pLEjjmKSnxQXfMkCQBeFGrzAdr
C1eiqFNqRxi9YEKf6kZyOeYnCf+Be3yQFAOoXxvBF2YrWBKmM2R3F51u0pL6RsI0ZiiJ8aF0
zJBkDFhRm8qHZptYUqYzZUcYXWDSnDpGAju2KWnzsXc8nAQAyF+rwUdpi1qipINmxxUtbAKc
2kgCO0Yq+fFhdByfVA7YXavDF2crWRKnM2V3Fp1v8pO6R8I0ViZJ/oF7zJBUDHhey88HaktU
0q0TaGcb3WKynqpKwjQ2K7n08Xa8nNQAaFMbwMdqG1UyqgNptxxdZQKemkpyOVYmafMxdpyc
BACYVOvK122bVBKns2S3Go1isp4qStI5VibJ8XF2fJ00AIhTO82nZktYEqeTZMcXPWxSkApE
wjRWJkn+gXtMkfQNeF4bwBdnK1kSpzNlxxl9YPKTOkZCNZYpqfExdIyedAcIX/vOp2YrWVKp
U2t3Fr1gcpl6SII7xiuJ9DF6TJE0AfhR6893aCtZwqgDaaccbWKSnJpKYjomKGn/cXVMkKQD
eF47z+do61XiqxNqFxnNYfKTSkiiO5YpWfIxdKyepAPYXbvDF2crWRKnM2V3Fp1v8pO6R8I0
ViZJ/oF7/JJ0DNhfG8DHaDtUcqrzb1cbjWKynvpK0jlWJmn+QXdsnMQBGFPLyidr+1TSrYNo
Zxv9YvKTCkoCOaYrKfNBcfycFADIU+vNN2oLWVKmM2VXFp1g0p6qSgI+RiuZ85F2DJz0DchR
283naktU0q2DaJcbLWICnppK4jQ2J0n+IXr8kFQO2F2rw6dkm1qipINqlxmdb3KSOkYCO7Yp
afOxdzycBAAoUhvBZ2srWVKpU2t3Fp1uQpK6R9I7dilJ/gF6jJ4UAlhTK8xnattUQqsDZAca
nW+yndpJwjSWKmnzMXSMnhQAyF+rwRdn61WSqMNqFxmdbyKciksSPqYrKfGhduyfhANYX+vO
J2Z7VxKnE2qHGV1jAp+aSKI7BihJ/nF0LJ40AmhSq8/3aHtXsqSDZscVLWxCkApIIjtWJsn/
AXqMnhQCWFMrzGdq21RCqxNkBxqdb7Kd2knCNFYn+f+Be1ye1AJ4XpvB12jLVjKqA2kHG21i
op9qSbI4ViYJ8OF1TJH0DMhfq8EXZ+tVkqjDahcZnW8inIpLEj6mKynxoXbsn4QDWF/rzidm
e1cSpxNqhxldYwKfmkiiOwYoSf5xdCyeNAJoUqvP92h7V7Kkk2Z3Fp1v8pO6R8I0ViZJ/oF7
TJH0DXheG8CnZKtYsqYzZacZjWKSnnpN4jlGKwnzwXZcnPQNWF5bz+dqS1SCqvNv9xu9b5KS
ukdiNeYn6f0heEyR9A14XhvAF2crWRKnM2V3Fp1v8pO6R3I35imp8YF7zJB0DPhf28wHaDtV
4quDahcZXWNyknpIIjt2K3ny8Xa8nKQBuFBrzKdmi1gypsNrlxgtbqKSekgiO3YrefLxdryc
pAGIUGvMp2YrWVKpU2t3Fr1gcpl6SII7xiuJ9DF6TJE0AfhR6893aCtZwqgDaaccbWKSnJpK
YjomKGn/cXV8kKQDeF47z+do61XiqxNqFxnNYfKTSkiiO5YpWfIxdKyepAPYXbvDF2crWRKn
M2V3Fp1v8pO6R8I0ViZJ/oF7/JJ0DNhfG8DHa6tUoqrTaLccnW8SnppK8jgmK7nzgXtsnEQA
qFPrzfdt21PSrSNodxadYgKemkrCNKYrCfMxdjycRAAYUyvMN2rbVBKng2h3Fn1h8pOaS3I+
liy581FxTJE0AMhTG8CXattUIqvzaIcbvWKSkrpHYjXmJ+n9IXj8kkQOyF2rw/doO1YyqDNl
xxs9YYKdukbCNJYqWfGBe2yedAe4UVvPh2rrUxKn82pnGZ1vMpxaSOI5Zio583F2HJ1EAAhS
u85naetW8qgTaEca7WICnupLcjkGJ6nw8Xccn/QNiFF7z9doO1XyqCNqVxnNYVKQCkRyN+Yl
ufHhdIye5AGoUSvOx2vbVkKpk2bXFZ1v8pO6R8I0ViZJ/oF7TJH0DXheG8AXZ6tYsqYzZacZ
jWKSnnpN4jlGKwnzwXZcnPQNGFMLzddqO1QSp0NoZxtdYtKfSk0SPlYmufOBe6ycBAcYU7vK
p2o7VHKqw2h3Fr1iQp5qSkI55iu581FxjJvEARhfG8C3ZptYsqSTZncWnW/yk7pHwjRWJkn+
gXtMkfQNeF4bwKdoy1YSp7Nk9xddYBKcmkryOCYrufPRd0yQhAF4XlvOd2krWXKoI2i3G21i
QpK6R9I7dilJ/gF6jJ4UAlhTK8xnattUQqsDZAcanW+yndpJwjS2KZnxkXaMnAQAyF+rwRdn
61WSqMNqFxk9bPKTukfCNFYmSf6Be0yR9A14XhvAF2crWRKnM2V3Fp1vQp4aSbI6hir59FFx
nJ0EALhUW88na/tT0q3DalcbvWLinppKQjVmJ0n/gXpMkGQDiFAbwedpm1hCqTNl9xc9bvKT
aksyOZYsSf5xdmyc1ABoUzvNF2f7VAKq82iHG51vUpIKRmI3ViZJ/oF7TJH0DXheG8AXZ5ta
oqTjakcaTWUCntpI4jn2KDnwsXr8nwQDKFAbwJdmi1gSp9NqZxu9YlKZqkrCNIYrefJRcbyc
9A2IUzvNN2o7VDKqw2h3Fk1i4p7KSvI4NiuJ85F2TJFUDMhfu8MXZytZEqczZXcWnW/yk7pH
wjRWJkn+gXv8ktQCiFHbzOdrC1ZyqGNrdxYdblKSukcyO4YsmfORdkyRNABIUlvNF2f7VKKq
42g3G41i8pMqS0I55isJ83F2TJFUDMhfu8MXZytZEqczZXcWnW/yk7pHwjRWJkn+gXu8npQC
uFELzKdoy1ZCqZNm1xUtbEKQCkRCNfYnSf6hdPycJACIU/vK523rUwKqM2WXG71iwp/KSjI5
ViaJ8zF2TJHUAMhTy8oXajtUwq3zb0canW8inqpK4jl2K7nzQXGMm+QAeF47zadq61MCqhNo
FxuNYvKTikuCORYrefKBe9ycBACoVNvKp2o7VHKqw2gXF51vUpIKRmI39iVJ/oF7TJH0DXhe
G8AXZytZEqczZXcWnW8inIpLEj6mKynxoXbsn4QDqFErzMdt21QyqQNppxvNYqKdukdCNfYn
Sf5RdHydJAeIUxvAd2rbU2KqE2mHG71i8pMaRnI19iXp/YF7TJH0DXheG8AXZytZEqczZXcW
nW/ykzpGYjVWJpn/UXqckCQMqF/Lwcdm+1jCpuNkpxdNbiKSakYSNYYnmf9RepyQJAyoX8vB
x2b7WMKm42SnF01uIpJqRhI1hieZ/1F6nJAkDKhfy8HHZvtYwqbjZKcXTW4ikmpGEjWGJ5n/
UXqckCQMqF/Lwcdm+1jCpuNkpxdNbiKSakbCNPYn+f8heEyR9A14XhvAF2crWRKnM2V3Fp1v
8pO6R0I19idJ/lF0fJ8kAYhRy8wXZ7tW4qjjabcaLWDinNpIMjtWJrnxoXRsnuQCWFGrzxdn
+1YCqENqRxj9YDKcqkjCNFYmSf6Be0yR9A14XhvAF2crWRKnM2V3Fp1v8pO6R8I0ViZJ/oF7
TJH0DXheG8AXZytZEqczZXcWnW/yk7pHwjRWJun/MXrskvQNeF4bwBdnK1kSpzNldxadb/KT
ukfCNNYn6f+Be5yQJAyoX8vBx2b7WMKm42SnF01uIpJqRhI1hieZ/1F6nJAkDKhfy8HHZvtY
wqbjZKcXTW4ikmpGEjWGJ5n/UXqckCQMqF/Lwcdm+1jCpuNkpxdNbiKSakYSNYYnmf9RepyQ
JAyoX8vBx2b7WMKm42SnF01uIpJqRhI1hidJ/iF6/JBUDthdG8AXZytZEqczZXcWnW/yk7pH
wjRWJkn+AXrskPQNCF9rwWdmW1hipkNkBxftboKSykayNSYnOf/xejyQhAwIX2vBZ2ZbWGKm
Q2QHF+1ugpLKRrI1Jic5//F6PJCEDAhfa8FnZltYYqZDZAcX7W6CkspGsjUmJzn/8Xo8kIQM
CF9rwWdmW1hipkNkBxftboKSykayNSYnOf/xekyRVAzIX7vDF2crWRKnM2V3Fp1v8pO6R8I0
ViZJ/oF7zJBUDHhei8/naPtV0quDamcZ/WACnLpHMjt2KWnxkXRsngQCeF57z+drW1biqBNq
Zxmdb/KcSkuiO5Yq+fGBe0yR9A14XhvAF2crWRKnM2V3Fp1v8pO6R8I0ViZJ/oF7TJH0DXhe
G8AXZytZEqczZXcWnW/yk7pHwjRWJkn+gXtMkfQN2F+rwbdkK1kSpzNldxadb/KTukfCNFYm
Sf6Be0yRdAzYXxvAZ2ZbWGKmQ2QHF+1ugpLKRrI1Jic5//F6PJCEDAhfa8FnZltYYqZDZAcX
7W6CkspGsjUmJzn/8Xo8kIQMCF9rwWdmW1hipkNkBxftboKSykayNSYnOf/xejyQhAwIX2vB
Z2ZbWGKmQ2QHF+1ugpLKRrI1Jic5//F6PJCEDHheu8GnZotaEqczZXcWnW/yk7pHwjRWJkn+
gXtMkfQN+F+7wRdnG1cyqhNoxxt9ZeKeukcSPqYrSf5xdmyc1ABoUzvN52orWXKqw28HG21i
0p6qSsI0Viu59OF2jJtEAHheO82navtUkqqDaIcbTWUymapKojVWJun/MXrsklQOeF4bwBdn
K1kSpzNldxadb/KTukfCNFYmaf9BdUyQVAPYXavDp2SbWqKo02p3Fh1uIp+6SnI+Rikp8zF6
TJE0AfhR6893aJtaoqqTawcYTWNCmWpNEjhWK/n0QXR8nTQHSFKbwcdrK1aiqyNpRxhNYyKc
CkhyOxYnSf6xeqyfJAy4UBvBF2YrWBKmM2R3F51uspK6R/I6lilp8QF63JAEAlhTi8GnZmtY
EqcDa7cZvWBykipGUjh2K1nz4XbcnPQNGFPrymdqC1XiqhNodxaNYhKeukfCOUYr+fPhdoyb
JAfoX6vBp2Z7VxKnw2oXGV1g4p8KSCI7Bijp/TF4/JJEDshTu85naftVoq3jb6cabWIymfpI
8jiGLIn0cXRsnNQAaFM7zZdmG1gSpjNkdxcNYcKSmkbCNeYnGfCBe8yQVAx4XsvM52rrUxKn
w2hXG71i4p6aSsI0hitZ80F2vJz0Ddhfq8G3ZCtZEqczZXcWnW/yk7pHwjTmJZnxsXecmwQA
GFE7zbdpW1cipoNrhxjNYfKTOkZiNVYmqfGRdmycVAdoUxvAx2obVcKtw2h3Fm1i0p6aStI5
diu584F7nJzkAAhTK8x3autUAqozZdcXLW5SkLpHwjRWJkn+gXtMkfQNeF4bwBdnK1kSpxNq
hxldYwKfmkiiOwYoSf4BeuyQ9A2IUcvKx2o7VBKn82hHGt1i8pNqSnI5hisJ85F2TJFkAfhT
q81XattUEqeTZMcXPWxSkLpHwjRWJkn+gXtMkfQNeF4bwBdnK1kSp7Nk1xedbyKSakYSNYYn
mf9RepyQJAyoX8vBx2b7WMKm42SnF01uIpJqRhI1hieZ/1F6nJAkDKhfy8HHZvtYwqbjZKcX
TW4ikmpGEjWGJ5n/UXqckCQMqF/Lwcdm+1jCpuNkpxdNbiKSakYSNYYnmf9RepyQJAyoX8vB
x2b7WMKm42R3Fj1uQpIaRMI0ViZJ/oF7TJH0DXheG8AXZytZEqczZfcXPW7yk2pI8jqGKrnx
UXdMkWQCiFHLzNdrm1YCqFNqhxmdbwKcmkjiO0YpafExdEyR1ALIUcvMF2g7VsKr82lHGJ1v
8pO6R8I0ViZJ/oF7TJH0DXheG8AXZytZEqczZXcWnW/yk7pHwjRWJkn+gXtMkfQNeF4bwBdn
K1kSpzNldxadb1KSCkZiN1YmSf6Be0yR9A14XhvAF2crWRKnM2V3Fh1uUpK6RxI1hieZ/1F6
nJAkDKhfy8HHZvtYwqbjZKcXTW4ikmpGEjWGJ5n/UXqckCQMqF/Lwcdm+1jCpuNkpxdNbiKS
akYSNYYnmf9RepyQJAyoX8vBx2b7WMKm42SnF01uIpJqRhI1hieZ/1F6nJAkDKhfy8HHZvtY
wqbjZKcXTW7ykxpGcjX2Jen9gXtMkfQNeF4bwBdnK1kSpzNldxadb/KTOkZiNVYmOf/xejyQ
hAwIX2vBZ2ZbWGKmQ2QHF+1ugpLKRrI1Jic5//F6PJCEDAhfa8FnZltYYqZDZAcX7W6CkspG
sjUmJzn/8Xo8kIQMCF9rwWdmW1hipkNkBxftboKSykayNSYnOf/xejyQhAwIX2vBZ2ZbWGKm
Q2QHF+1ugpLKRsI09if5/yF4TJH0DXheG8AXZytZEqczZXcWnW/yk7pHQjX2J0n+EXS8niQB
uFKrzwdoS1biqDNlhxm9YNKcqkjiO6YpSf5hdGyexAMIUevPF2cLVqKo42l3GY1gIp96S/I6
ViZJ/oF7TJH0DXheG8AXZytZEqczZXcWnW/yk7pHwjRWJkn+gXtMkfQNeF4bwBdnK1kSpzNl
dxadb/KTukfCNFYm6f8xeuyS9A14XhvAF2crWRKnM2V3Fp1v8pO6R8I01ifp/4F7PJCEDAhf
a8FnZltYYqZDZAcX7W6CkspGsjUmJzn/8Xo8kIQMCF9rwWdmW1hipkNkBxftboKSykayNSYn
Of/xejyQhAwIX2vBZ2ZbWGKmQ2QHF+1ugpLKRrI1Jic5//F6PJCEDAhfa8FnZltYYqZDZAcX
7W6CkspGsjUmJ0n+IXr8kFQOeF4bwBdnK1kSpzNldxadb/KTukfCNFYmyf8hekyRxANYUzvN
p2rLUwKqM2WnHG1i8pNKSuI5ditZ86F2vJz0DRhT68pnattUMqojaHcWvWNCmXpNMjmGLEn+
YXZsnMQBCFPrzRdn61SiqjNlVxstYiKZukrSOYYsifSxdyyQ9A3YX6vBt2SLWhKnM2V3Fp1v
8pO6R8I0ViZJ/oF7TJH0DVhf684XZotXsqSDZscVLWxCnFpIwjTWJ5nygXb8m+QCGFOrwRdn
61WSqMNqFxktbEKeGkmyOoYq+fRRcZyd9ADIVNvPJ2vrUyKrs2SnGp1gQp+qS/I6hiqZ8TF0
/J60DHheK8H3aftY0qkzZHcXnW7ykrpGwjVWJwn/gXt8nzQCWFGbwYdm21YyqqNkxxfdbvKT
ikkCO3Ypyf8RenyflACoVIvK52oLVBKn02hXG61jgp5KSsI0lixZ85F2TJG0AGhTe82HartY
oqaDZCcYnW8CnNpIAjtGKvnxYXQcn1QOeF4bwBdnK1kSpzNldxadb/KTukfCNFYm+fMhdTyf
JAHIVMvKx2vbVNKtc2pHGk1lMplKSOI5ditZ86F2zJDEDHhfG8EXZrtX4qkzZJcYLW6inbpH
QjX2J0n+UXe8nDQHeF7rzTdqC1QCqhNodxZNYuKeekoyOVYm6f8xeuyS9A14XhvAF2crWRKn
M2V3Fi1sIpyKSxI+pisp8aF27J+EA0hfq87naXtXEqezZNcXnW8SnKpK4jn2LFnzgXucnMQB
qFTrzRdn21QyqhNoZxu9YgKeukcSOUYrOfOxdyycNABoUxvAt2abWLKkM2V3Fp1v8pO6R8I0
ViZJ/oF7TJH0DXheO8/naOtV4qsTahcZzWHykzpGYjVWJrnxUXGcnOQAeF7bzSdra1QSp+No
xxtNYrKeqkrCNMYqyfMxdgycBAB4XrvBp2aLWrKkM2V3Fp1v8pO6R8I0ViZJ/oF7TJH0DXhe
m8G3ZitZYqZDZAcX7W6CkspGsjUmJzn/8Xo8kIQMCF9rwWdmW1hipkNkBxftboKSykayNSYn
Of/xejyQhAwIX2vBZ2ZbWGKmQ2QHF+1ugpLKRrI1Jic5//F6PJCEDAhfa8FnZltYYqZDZAcX
7W6CkspGsjUmJzn/8Xo8kIQMCF9rwRdni1iippNmdxadb/KTukfCNFYmSf6Be0yR9A14XhvA
l2aLWBKno2qHGU1jMp8KSNI7Nim58YF7vJ7UAlhRC883aNtWEqfTalcZrWGCnEpIwjR2Kfnx
UXdMnuQCqFLbzCdpK1kSpzNldxadb/KTukfCNFYmSf6Be0yR9A14XhvAF2crWRKnM2V3Fp1v
8pO6R8I0ViZJ/oF7TJH0DXheG8AXZytZsqaDZNcVnW/yk7pHwjRWJkn+gXtMkfQNeF4bwBdn
q1iypjNlBxftboKSykayNSYnOf/xejyQhAwIX2vBZ2ZbWGKmQ2QHF+1ugpLKRrI1Jic5//F6
PJCEDAhfa8FnZltYYqZDZAcX7W6CkspGsjUmJzn/8Xo8kIQMCF9rwWdmW1hipkNkBxftboKS
ykayNSYnOf/xejyQhAwIX2vBZ2ZbWBKnk2THFz1s8pO6R8I0ViZJ/oF7TJH0DXheG8AXZytZ
kqaTZHcWrWHSnppKcjm2LFnzgXucmwQAeF7rzTdqC1QCqhNohxudbzKeiksCPuYrSf5hdmyc
xAEIU+vNF2frVKKqM2VXGy1iIpm6StI5hiyJ9LF3LJD0Ddhfq8G3ZItaEqczZXcWnW/yk7pH
wjRWJkn+gXtMkfQNWF/rzidmi1eypINmxxUtbEKcWkjCNNYnmfKBdvyb5AIYU6vBF2frVZKo
w2oXGS1sQp4aSbI6hir59FFxnJ30AMhU288na+tTIquzZKcanWBCn6pL8jqGKpnxMXT8nrQM
eF4rwfdp+1jSqTNkdxedbvKSukbCNVYnCf+Be3yfNAJYUZvBh2bbVjKqo2THF91u8pOKSQI7
dinJ/xF63J3UAGhTe82HaitZIqtTaKccDWUCnppKwjS2K2nzsXc8nAQA6F+rwadme1cSp8Nq
FxldYOKfCkgiOwYo6f2Be0yR9A14XhvAF2crWRKnM2V3Fp1v8pMKSmI6JiiZ8jFxnJskAYhT
28pXaBtVwq3zb4cZvWLSnqpK4jnWJ3n/gXpMkPQM6FDrzhdmu1eipmNrdxYdblKSukcSOKYr
ifSBe7yc1ABYUwvNN2orWcKqI2i3G21i8pMaRnI19iVJ/oF7TJH0DXheG8AXZytZoqTjakca
TWUCntpI4jn2KDnwsXr8nwQDKFAbwJdmi1gSp9NqZxu9YlKZqkrCNIYrefJRcbyc9A2IUzvN
N2o7VDKqw2h3Fk1i4p7KSvI4NiuJ85F2TJFUDMhfu8MXZytZEqczZXcWnW/yk7pHwjRWJkn+
gXtsngQCuFLrzDdoS1ZCqTNl9xc9bvKTSkgSPoYrWfOBe4ycxAE4UxvAx2qbVMKqc2hnG51v
Yp86SnI5Fiu584F77JBEDNhdu8MXZytZEqczZXcWnW/yk7pHwjRWJkn+gXvMkFQMeF5rwWdm
W1hipkNkBxftboKSykayNSYnOf/xejyQhAwIX2vBZ2ZbWGKmQ2QHF+1ugpLKRrI1Jic5//F6
PJCEDAhfa8FnZltYYqZDZAcX7W6CkspGsjUmJzn/8Xo8kIQMCF9rwWdmW1hipkNkBxftboKS
ykayNSYnOf/xejyQ9A3YX6vBt2QrWRKnM2V3Fp1v8pO6R8I0ViZJ/oF7TJF0DNhfG8CHaNtW
wqvzaccZjWCSnEpIwjSGKXnwUXe8nvQNiFE7zzdoG1fSqyNqdxadb/KTukfCNFYmSf6Be0yR
9A14XhvAF2crWRKnM2V3Fp1v8pO6R8I0ViZJ/oF7TJH0DXheG8AXZytZEqczZXcWnW/yk7pH
wjRWJkn+gXtMkfQNeF67wadmi1oSpzNldxadb/KTukfCNFYmSf6Be0yR9A34X7vBF2dbWGKm
Q2QHF+1ugpLKRrI1Jic5//F6PJCEDAhfa8FnZltYYqZDZAcX7W6CkspGsjUmJzn/8Xo8kIQM
CF9rwWdmW1hipkNkBxftboKSykayNSYnOf/xejyQhAwIX2vBZ2ZbWGKmQ2QHF+1ugpLKRrI1
Jic5//F6PJCEDAhfG8C3ZptYsqSTZncWnW/yk7pHwjRWJkn+gXu8nrQCqFLrz7dkK1kSpzNl
dxadb/KTukfCNFYmSf6Be0yRRADYUGvOx2ubU8Kt42mHG11lspyKSxI+liy58aF2bJzkAFhT
m8EnZitYEqYzZOcYnW4SnbpGcjUGKEn+AXrskPQNqFLrzddtK1niqhNoVxuNYtKeukcSOUYr
ifNxdkyRVAzIX7vDF2crWRKnM2V3Fp1v8pO6R3I3hil58lFxvJyUAlhTu85naRtYoqnDaycY
nW9ykhpGwjS2KVnzoXbsm+QAeF7LzSdr+1PiqjNlhxu9YtKeqkriOaYrSf5RdlychABIUnvN
12o7VBKnk2THFz1s8pO6R8I0ViZJ/oF7TJH0DXheG8AXZytZMqjDarcabWPSnNpIkjpWJsn/
IXpMkQQCqFTLzQdqK1nSqgNpNxudbyKeCkoSORYrWfOBe9yddADIU1vN52orWbKmg2TXFZ1v
8pO6R8I0ViZJ/oF7TJEEAhhR288Ha/tWIqnjaYcZzWFSkLpHwjRWJkn+cXQsnjQCaFKLzJdo
m1ZSqMNqJxg9bFKQOkZiNVYmGfJxdCycNAB4XgvN92orWfKqg2g3G21igp+6R2I15idJ/A==]]>
						</sourceCode>
					</functionBlock>
					<functionBlock name="EastronSDM120_v1" version="1.0.0">
						<descr>(eLLabMdbDevsLib_A200), Eastron SDM 120</descr>
						<vars>
							<inputVars>
								<var name="Enable" type="BOOL">
									<descr>FB enable</descr>
								</var>
								<var name="MMID" type="@_MMODBUSCOREDATA">
									<descr>Modbus manager ID</descr>
								</var>
								<var name="Node" type="USINT">
									<descr>Node address</descr>
								</var>
								<var name="Timeout" type="UINT">
									<descr>Timeout time (mS)</descr>
									<initValue>200</initValue>
								</var>
							</inputVars>
							<outputVars>
								<var name="Done" type="BOOL">
									<descr>FB done</descr>
								</var>
								<var name="Fault" type="BOOL">
									<descr>FB fault</descr>
								</var>
								<var name="Errors" type="UDINT">
									<descr>Communication errors</descr>
								</var>
								<var name="Voltage" type="REAL">
									<descr>Line voltage (Volts)</descr>
								</var>
								<var name="Current" type="REAL">
									<descr>Line current (Amps)</descr>
								</var>
								<var name="Frequency" type="REAL">
									<descr>Line frequency (Hertz)</descr>
								</var>
								<var name="AcPower" type="REAL">
									<descr>Active power (Watts)</descr>
								</var>
								<var name="ApPower" type="REAL">
									<descr>Apparent power (VA)</descr>
								</var>
								<var name="RePower" type="REAL">
									<descr>Reactive power (VAr)</descr>
								</var>
								<var name="PwFactor" type="REAL">
									<descr>Power factor (None)</descr>
								</var>
								<var name="IAcEnergy" type="REAL">
									<descr>Import active energy (kWh)</descr>
								</var>
								<var name="EAcEnergy" type="REAL">
									<descr>Export active energy (kWh)</descr>
								</var>
								<var name="TAcEnergy" type="REAL">
									<descr>Total active energy (kWh)</descr>
								</var>
							</outputVars>
							<externalVars>
								<var name="SysActTaskID" type="USINT">
									<descr>Task ID</descr>
								</var>
							</externalVars>
							<localVars>
								<var name="DaughterIDx" type="USINT">
									<descr>Indice FB figlia</descr>
								</var>
								<var name="Init" type="BOOL">
									<descr>Inizializzazione FB</descr>
									<initValue>TRUE</initValue>
								</var>
								<var name="MIDx" type="USINT">
									<descr>Modbus index</descr>
								</var>
								<var name="MValue" type="UDINT">
									<descr>Modbus value</descr>
								</var>
								<var name="Ptr" type="@BYTE" dim0="2">
									<descr>Auxiliary pointer</descr>
								</var>
								<var name="i" type="USINT">
									<descr>Auxiliary counter</descr>
								</var>
							</localVars>
						</vars>
						<iecDeclaration valid="TRUE">
							<![CDATA[]]>
						</iecDeclaration>
						<interfaces/>
						<methods/>
						<sourceCode type="ST" encoded="true">
							<![CDATA[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
mFOrzVdq21RiqzNl1xctbvKR]]>
						</sourceCode>
					</functionBlock>
					<functionBlock name="EastronSDM630_v1" version="1.0.0">
						<descr>(eLLabMdbDevsLib_A200), Eastron SDM 630</descr>
						<vars>
							<inputVars>
								<var name="Enable" type="BOOL">
									<descr>FB enable</descr>
								</var>
								<var name="MMID" type="@_MMODBUSCOREDATA">
									<descr>Modbus manager ID</descr>
								</var>
								<var name="Node" type="USINT">
									<descr>Node address</descr>
								</var>
								<var name="Timeout" type="UINT">
									<descr>Timeout time (mS)</descr>
									<initValue>200</initValue>
								</var>
							</inputVars>
							<outputVars>
								<var name="Done" type="BOOL">
									<descr>FB done</descr>
								</var>
								<var name="Fault" type="BOOL">
									<descr>FB fault</descr>
								</var>
								<var name="Errors" type="UDINT">
									<descr>Communication errors</descr>
								</var>
								<var name="Voltage" type="REAL" dim0="4">
									<descr>Line voltage (Volts)</descr>
								</var>
								<var name="Current" type="REAL" dim0="5">
									<descr>Line current (Amps)</descr>
								</var>
								<var name="PhAngle" type="REAL" dim0="4">
									<descr>Phase angle (Degrees)</descr>
								</var>
								<var name="Frequency" type="REAL">
									<descr>Line frequency (Hertz)</descr>
								</var>
								<var name="AcPower" type="REAL" dim0="4">
									<descr>Active power (Watts)</descr>
								</var>
								<var name="ApPower" type="REAL" dim0="4">
									<descr>Apparent power (VA)</descr>
								</var>
								<var name="RePower" type="REAL" dim0="4">
									<descr>Reactive power (VAr)</descr>
								</var>
								<var name="PwFactor" type="REAL" dim0="4">
									<descr>Power factor (None)</descr>
								</var>
								<var name="IAcEnergy" type="REAL">
									<descr>Import active energy (kWh)</descr>
								</var>
								<var name="EAcEnergy" type="REAL">
									<descr>Export active energy (kWh)</descr>
								</var>
								<var name="TAcEnergy" type="REAL">
									<descr>Total active energy (kWh)</descr>
								</var>
							</outputVars>
							<externalVars>
								<var name="SysActTaskID" type="USINT">
									<descr>Task ID</descr>
								</var>
							</externalVars>
							<localVars>
								<var name="DaughterIDx" type="USINT">
									<descr>Indice FB figlia</descr>
								</var>
								<var name="i" type="USINT">
									<descr>Auxiliary counter</descr>
								</var>
								<var name="Init" type="BOOL">
									<descr>Inizializzazione FB</descr>
									<initValue>TRUE</initValue>
								</var>
								<var name="MIDx" type="USINT">
									<descr>Modbus index</descr>
								</var>
								<var name="MValue" type="UDINT">
									<descr>Modbus value</descr>
								</var>
								<var name="Ptr" type="@BYTE" dim0="2">
									<descr>Auxiliary pointer</descr>
								</var>
							</localVars>
						</vars>
						<iecDeclaration valid="TRUE">
							<![CDATA[]]>
						</iecDeclaration>
						<interfaces/>
						<methods/>
						<sourceCode type="ST" encoded="true">
							<![CDATA[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]]>
						</sourceCode>
					</functionBlock>
					<functionBlock name="ModbusMsCore" version="1.0.0">
						<descr>(eLLabMdbDevsLib_A200), modbus master core</descr>
						<vars>
							<inputVars>
								<var name="Enable" type="BOOL">
									<descr>FB Enable</descr>
								</var>
								<var name="SpyOn" type="BOOL">
									<descr>Activate spy data</descr>
								</var>
								<var name="File" type="FILEP">
									<descr>File pointer</descr>
								</var>
								<var name="IFTime" type="UDINT">
									<descr>Interframe time (uS)</descr>
								</var>
								<var name="Delay" type="UINT">
									<descr>Communication delay</descr>
								</var>
							</inputVars>
							<outputVars>
								<var name="Enabled" type="BOOL">
									<descr>FB Enabled</descr>
								</var>
								<var name="Fault" type="BOOL">
									<descr>FB Fault</descr>
								</var>
								<var name="MMID" type="@_MMODBUSCOREDATA">
									<descr>Modbus manager ID</descr>
								</var>
							</outputVars>
							<externalVars>
								<var name="SysActTaskID" type="USINT">
									<descr>Task ID</descr>
								</var>
							</externalVars>
							<localVars>
								<var name="MMdb" type="_ModbusMaster">
									<descr>Modbus master communication</descr>
								</var>
								<var name="MMData" type="_MMODBUSCOREDATA">
									<descr>Master modbus manager data struct</descr>
								</var>
								<var name="CaseNr" type="USINT">
									<descr>Case gestione programma</descr>
								</var>
								<var name="i" type="USINT">
									<descr>Auxiliary counter</descr>
								</var>
							</localVars>
						</vars>
						<iecDeclaration valid="TRUE">
							<![CDATA[]]>
						</iecDeclaration>
						<interfaces/>
						<methods/>
						<sourceCode type="ST" encoded="true">
							<![CDATA[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
TJHkAJhTG8D3aptUUqrDaAcanW9SkgpGwjY=]]>
						</sourceCode>
					</functionBlock>
					<functionBlock name="SAModbusCmd" version="1.0.0">
						<descr>(eLLabMdbDevsLib_A200), Stand alone Modbus command</descr>
						<vars>
							<inputVars>
								<var name="Enable" type="BOOL">
									<descr>FB enable</descr>
								</var>
								<var name="MMID" type="@_MMODBUSCOREDATA">
									<descr>Modbus manager ID</descr>
								</var>
								<var name="Type" type="USINT">
									<descr>Modbus type</descr>
								</var>
								<var name="Node" type="USINT">
									<descr>Node address</descr>
								</var>
								<var name="FCode" type="USINT">
									<descr>Modbus function</descr>
								</var>
								<var name="Address" type="UINT">
									<descr>Variable address</descr>
								</var>
								<var name="Points" type="USINT">
									<descr>Number of points</descr>
								</var>
								<var name="Buffer" type="@USINT">
									<descr>Buffer address</descr>
								</var>
								<var name="Timeout" type="UINT">
									<descr>Timeout time (mS)</descr>
								</var>
							</inputVars>
							<outputVars>
								<var name="Done" type="BOOL">
									<descr>FB done</descr>
								</var>
								<var name="Ok" type="BOOL">
									<descr>Command Ok</descr>
								</var>
								<var name="Fault" type="BOOL">
									<descr>FB fault</descr>
								</var>
								<var name="Errors" type="UDINT">
									<descr>Communication errors</descr>
								</var>
							</outputVars>
							<externalVars>
								<var name="SysActTaskID" type="USINT">
									<descr>Task ID</descr>
								</var>
							</externalVars>
							<localVars>
								<var name="DaughterIDx" type="USINT">
									<descr>Indice FB figlia</descr>
								</var>
								<var name="i" type="USINT">
									<descr>Auxiliary counter</descr>
								</var>
								<var name="Init" type="BOOL">
									<descr>Inizializzazione FB</descr>
									<initValue>TRUE</initValue>
								</var>
								<var name="aaa" type="UINT"/>
							</localVars>
						</vars>
						<iecDeclaration valid="TRUE">
							<![CDATA[]]>
						</iecDeclaration>
						<interfaces/>
						<methods/>
						<sourceCode type="ST" encoded="true">
							<![CDATA[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]]>
						</sourceCode>
					</functionBlock>
				</functionBlocks>
				<programs/>
				<macros/>
				<structs>
					<struct name="_MMODBUSCOREDATA" version="1.0.0">
						<descr>(eLLabMMdbCoreLib_A200), Master modbus core data (Privata)</descr>
						<vars>
							<var name="DStart" type="BOOL">
								<descr>Daugther FB start (From core)</descr>
							</var>
							<var name="DReady" type="BOOL">
								<descr>Daugther FB ready (To core)</descr>
							</var>
							<var name="DDone" type="BOOL">
								<descr>Daugther FB done (To core)</descr>
							</var>
							<var name="MDataOk" type="BOOL">
								<descr>Modbus data Ok (From core)</descr>
							</var>
							<var name="DaughterNr" type="USINT">
								<descr>Daugther FB number (To core)</descr>
							</var>
							<var name="DaughterIDx" type="USINT">
								<descr>Daugther FB index (From core)</descr>
							</var>
							<var name="Type" type="USINT">
								<descr>Modbus type (To core)</descr>
							</var>
							<var name="Node" type="USINT">
								<descr>Modbus node (To core)</descr>
							</var>
							<var name="FCode" type="USINT">
								<descr>Modbus function (To core)</descr>
							</var>
							<var name="Points" type="USINT">
								<descr>Number of points (To core)</descr>
							</var>
							<var name="Dummy" type="BYTE" dim0="2"/>
							<var name="Address" type="UINT">
								<descr>Register address (To core)</descr>
							</var>
							<var name="Timeout" type="UINT">
								<descr>Timeout time (mS) (To core)</descr>
							</var>
							<var name="Buffer" type="@BYTE">
								<descr>Buffer address (To core)</descr>
							</var>
							<var name="MMUID" type="UDINT">
								<descr>Modbus master core unique ID (From core)</descr>
							</var>
						</vars>
					</struct>
				</structs>
				<typedefs/>
				<enums/>
				<subranges/>
				<interfaces/>
			</lib>
		</libraries>
		<aux>
			<src fullXml="false" name="HMIsManager.PLC" order="0" hidden="false">
				<![CDATA[]]>
			</src>
		</aux>
		<workspace>
			<root name="RESTSvcSQL" nextID="450">
				<folder name="Programs" id="1">
					<Pou name="EastronMng" id="237"/>
					<Pou name="RESTSvcMng" id="238"/>
				</folder>
				<folder name="Function blocks" id="3"/>
				<folder name="Functions" id="5"/>
				<folder id="6" name="GlobalVars">
					<GlobalVars name="Global" id="31"/>
					<GlobalVars id="18" name="Inputs"/>
					<GlobalVars id="25" name="Outputs"/>
				</folder>
			</root>
		</workspace>
	</sources>
	<codegen crossReference="false" crossReferenceOptions="0x3000001D" listing="true" hideSourceCodeInListing="true" saveEXPFile="true" saveTargetFiles="false" warningEnable="true" symMap="true" checkIndexType="false" waitExtension="false" allocateUnusedVariables="false" checkArrayBounds="false" checkDivisionByZero="false" checkPointers="false" checkReferences="false" checkInterfaces="false" customTargetBINFileName="RESTSvcSQL.bin" customTargetTSCFileName="RESTSvcSQL_source.bin" customTargetTDSFileName="RESTSvcSQL_debug.bin" generateCustomFilesName="false">
		<disabledWarnings/>
		<applicationDataBlocks/>
	</codegen>
	<simWorkspaces/>
	<debug watchRefresh="20" watchVarRefresh="0" watchMaxArray="20" autoSaveWatchList="false"/>
	<editor useOldGridSize="false"/>
	<userDef>
		<release>RESTSvcDem</release>
		<author/>
		<note/>
		<version/>
		<password disabled="true"/>
	</userDef>
	<downloadSequence sourceCode="never" debugSymbols="onPLCApplicationDownload"/>
	<commands>
		<postbuild/>
		<postdown/>
		<predown/>
	</commands>
	<resources>
		<configuration template="LogicLab.pct" version="1">
			<data protocol="root">
				<project_config nextID="0">
					<datacomment/>
				</project_config>
				<Mps054_XTarget_12_0 template="Elsist\Plc\Mps054_XTarget_12_0.pct" version="1" name="SlimLine Mps054 XTarget" caption="SlimLine Mps054 XTarget">
					<config>
						<elsist_hmis/>
					</config>
				</Mps054_XTarget_12_0>
			</data>
		</configuration>
	</resources>
</plcProject>